// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ovh

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manage rules for HTTP route.
//
// ## Example Usage
//
// Route which redirect all url to https for example.com (Vhost).
//
// ```go
// package main
//
// import (
// 	"fmt"
//
// 	"github.com/pulumi/pulumi-ovh/sdk/go/ovh"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		httpsredirect, err := ovh.NewIPLoadbalancingHTTPRoute(ctx, "httpsredirect", &ovh.IPLoadbalancingHTTPRouteArgs{
// 			Action: &IPLoadbalancingHTTPRouteActionArgs{
// 				Status: pulumi.Int(302),
// 				Target: pulumi.String(fmt.Sprintf("%v%v%v%v", "https://", host, path, arguments)),
// 				Type:   pulumi.String("redirect"),
// 			},
// 			DisplayName: pulumi.String("Redirect to HTTPS"),
// 			FrontendId:  pulumi.Int(11111),
// 			ServiceName: pulumi.String("loadbalancer-xxxxxxxxxxxxxxxxxx"),
// 			Weight:      pulumi.Int(1),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = ovh.NewIPLoadbalancingHTTPRouteRule(ctx, "examplerule", &ovh.IPLoadbalancingHTTPRouteRuleArgs{
// 			DisplayName: pulumi.String("Match example.com host"),
// 			Field:       pulumi.String("host"),
// 			Match:       pulumi.String("is"),
// 			Negate:      pulumi.Bool(false),
// 			Pattern:     pulumi.String("example.com"),
// 			RouteId:     httpsredirect.ID(),
// 			ServiceName: pulumi.String("loadbalancer-xxxxxxxxxxxxxxxxxx"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// Rule which match a specific header (same effect as the host match above).
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-ovh/sdk/go/ovh"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := ovh.NewIPLoadbalancingHTTPRouteRule(ctx, "examplerule", &ovh.IPLoadbalancingHTTPRouteRuleArgs{
// 			DisplayName: pulumi.String("Match example.com Host header"),
// 			Field:       pulumi.String("headers"),
// 			Match:       pulumi.String("is"),
// 			Negate:      pulumi.Bool(false),
// 			Pattern:     pulumi.String("example.com"),
// 			RouteId:     pulumi.Any(ovh_iploadbalancing_http_route.Httpsredirect.Id),
// 			ServiceName: pulumi.String("loadbalancer-xxxxxxxxxxxxxxxxxx"),
// 			SubField:    pulumi.String("Host"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type IPLoadbalancingHTTPRouteRule struct {
	pulumi.CustomResourceState

	// Human readable name for your rule, this field is for you
	DisplayName pulumi.StringPtrOutput `pulumi:"displayName"`
	// Name of the field to match like "protocol" or "host". See "/ipLoadbalancing/{serviceName}/availableRouteRules" for a list of available rules
	Field pulumi.StringOutput `pulumi:"field"`
	// Matching operator. Not all operators are available for all fields. See "/ipLoadbalancing/{serviceName}/availableRouteRules"
	Match pulumi.StringOutput `pulumi:"match"`
	// Invert the matching operator effect
	Negate pulumi.BoolPtrOutput `pulumi:"negate"`
	// Value to match against this match. Interpretation if this field depends on the match and field
	Pattern pulumi.StringPtrOutput `pulumi:"pattern"`
	// The route to apply this rule
	RouteId pulumi.StringOutput `pulumi:"routeId"`
	// The internal name of your IP load balancing
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
	// Name of sub-field, if applicable. This may be a Cookie or Header name for instance
	SubField pulumi.StringPtrOutput `pulumi:"subField"`
}

// NewIPLoadbalancingHTTPRouteRule registers a new resource with the given unique name, arguments, and options.
func NewIPLoadbalancingHTTPRouteRule(ctx *pulumi.Context,
	name string, args *IPLoadbalancingHTTPRouteRuleArgs, opts ...pulumi.ResourceOption) (*IPLoadbalancingHTTPRouteRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Field == nil {
		return nil, errors.New("invalid value for required argument 'Field'")
	}
	if args.Match == nil {
		return nil, errors.New("invalid value for required argument 'Match'")
	}
	if args.RouteId == nil {
		return nil, errors.New("invalid value for required argument 'RouteId'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	var resource IPLoadbalancingHTTPRouteRule
	err := ctx.RegisterResource("ovh:index/iPLoadbalancingHTTPRouteRule:IPLoadbalancingHTTPRouteRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIPLoadbalancingHTTPRouteRule gets an existing IPLoadbalancingHTTPRouteRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIPLoadbalancingHTTPRouteRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IPLoadbalancingHTTPRouteRuleState, opts ...pulumi.ResourceOption) (*IPLoadbalancingHTTPRouteRule, error) {
	var resource IPLoadbalancingHTTPRouteRule
	err := ctx.ReadResource("ovh:index/iPLoadbalancingHTTPRouteRule:IPLoadbalancingHTTPRouteRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IPLoadbalancingHTTPRouteRule resources.
type iploadbalancingHTTPRouteRuleState struct {
	// Human readable name for your rule, this field is for you
	DisplayName *string `pulumi:"displayName"`
	// Name of the field to match like "protocol" or "host". See "/ipLoadbalancing/{serviceName}/availableRouteRules" for a list of available rules
	Field *string `pulumi:"field"`
	// Matching operator. Not all operators are available for all fields. See "/ipLoadbalancing/{serviceName}/availableRouteRules"
	Match *string `pulumi:"match"`
	// Invert the matching operator effect
	Negate *bool `pulumi:"negate"`
	// Value to match against this match. Interpretation if this field depends on the match and field
	Pattern *string `pulumi:"pattern"`
	// The route to apply this rule
	RouteId *string `pulumi:"routeId"`
	// The internal name of your IP load balancing
	ServiceName *string `pulumi:"serviceName"`
	// Name of sub-field, if applicable. This may be a Cookie or Header name for instance
	SubField *string `pulumi:"subField"`
}

type IPLoadbalancingHTTPRouteRuleState struct {
	// Human readable name for your rule, this field is for you
	DisplayName pulumi.StringPtrInput
	// Name of the field to match like "protocol" or "host". See "/ipLoadbalancing/{serviceName}/availableRouteRules" for a list of available rules
	Field pulumi.StringPtrInput
	// Matching operator. Not all operators are available for all fields. See "/ipLoadbalancing/{serviceName}/availableRouteRules"
	Match pulumi.StringPtrInput
	// Invert the matching operator effect
	Negate pulumi.BoolPtrInput
	// Value to match against this match. Interpretation if this field depends on the match and field
	Pattern pulumi.StringPtrInput
	// The route to apply this rule
	RouteId pulumi.StringPtrInput
	// The internal name of your IP load balancing
	ServiceName pulumi.StringPtrInput
	// Name of sub-field, if applicable. This may be a Cookie or Header name for instance
	SubField pulumi.StringPtrInput
}

func (IPLoadbalancingHTTPRouteRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*iploadbalancingHTTPRouteRuleState)(nil)).Elem()
}

type iploadbalancingHTTPRouteRuleArgs struct {
	// Human readable name for your rule, this field is for you
	DisplayName *string `pulumi:"displayName"`
	// Name of the field to match like "protocol" or "host". See "/ipLoadbalancing/{serviceName}/availableRouteRules" for a list of available rules
	Field string `pulumi:"field"`
	// Matching operator. Not all operators are available for all fields. See "/ipLoadbalancing/{serviceName}/availableRouteRules"
	Match string `pulumi:"match"`
	// Invert the matching operator effect
	Negate *bool `pulumi:"negate"`
	// Value to match against this match. Interpretation if this field depends on the match and field
	Pattern *string `pulumi:"pattern"`
	// The route to apply this rule
	RouteId string `pulumi:"routeId"`
	// The internal name of your IP load balancing
	ServiceName string `pulumi:"serviceName"`
	// Name of sub-field, if applicable. This may be a Cookie or Header name for instance
	SubField *string `pulumi:"subField"`
}

// The set of arguments for constructing a IPLoadbalancingHTTPRouteRule resource.
type IPLoadbalancingHTTPRouteRuleArgs struct {
	// Human readable name for your rule, this field is for you
	DisplayName pulumi.StringPtrInput
	// Name of the field to match like "protocol" or "host". See "/ipLoadbalancing/{serviceName}/availableRouteRules" for a list of available rules
	Field pulumi.StringInput
	// Matching operator. Not all operators are available for all fields. See "/ipLoadbalancing/{serviceName}/availableRouteRules"
	Match pulumi.StringInput
	// Invert the matching operator effect
	Negate pulumi.BoolPtrInput
	// Value to match against this match. Interpretation if this field depends on the match and field
	Pattern pulumi.StringPtrInput
	// The route to apply this rule
	RouteId pulumi.StringInput
	// The internal name of your IP load balancing
	ServiceName pulumi.StringInput
	// Name of sub-field, if applicable. This may be a Cookie or Header name for instance
	SubField pulumi.StringPtrInput
}

func (IPLoadbalancingHTTPRouteRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*iploadbalancingHTTPRouteRuleArgs)(nil)).Elem()
}

type IPLoadbalancingHTTPRouteRuleInput interface {
	pulumi.Input

	ToIPLoadbalancingHTTPRouteRuleOutput() IPLoadbalancingHTTPRouteRuleOutput
	ToIPLoadbalancingHTTPRouteRuleOutputWithContext(ctx context.Context) IPLoadbalancingHTTPRouteRuleOutput
}

func (*IPLoadbalancingHTTPRouteRule) ElementType() reflect.Type {
	return reflect.TypeOf((**IPLoadbalancingHTTPRouteRule)(nil)).Elem()
}

func (i *IPLoadbalancingHTTPRouteRule) ToIPLoadbalancingHTTPRouteRuleOutput() IPLoadbalancingHTTPRouteRuleOutput {
	return i.ToIPLoadbalancingHTTPRouteRuleOutputWithContext(context.Background())
}

func (i *IPLoadbalancingHTTPRouteRule) ToIPLoadbalancingHTTPRouteRuleOutputWithContext(ctx context.Context) IPLoadbalancingHTTPRouteRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPLoadbalancingHTTPRouteRuleOutput)
}

// IPLoadbalancingHTTPRouteRuleArrayInput is an input type that accepts IPLoadbalancingHTTPRouteRuleArray and IPLoadbalancingHTTPRouteRuleArrayOutput values.
// You can construct a concrete instance of `IPLoadbalancingHTTPRouteRuleArrayInput` via:
//
//          IPLoadbalancingHTTPRouteRuleArray{ IPLoadbalancingHTTPRouteRuleArgs{...} }
type IPLoadbalancingHTTPRouteRuleArrayInput interface {
	pulumi.Input

	ToIPLoadbalancingHTTPRouteRuleArrayOutput() IPLoadbalancingHTTPRouteRuleArrayOutput
	ToIPLoadbalancingHTTPRouteRuleArrayOutputWithContext(context.Context) IPLoadbalancingHTTPRouteRuleArrayOutput
}

type IPLoadbalancingHTTPRouteRuleArray []IPLoadbalancingHTTPRouteRuleInput

func (IPLoadbalancingHTTPRouteRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IPLoadbalancingHTTPRouteRule)(nil)).Elem()
}

func (i IPLoadbalancingHTTPRouteRuleArray) ToIPLoadbalancingHTTPRouteRuleArrayOutput() IPLoadbalancingHTTPRouteRuleArrayOutput {
	return i.ToIPLoadbalancingHTTPRouteRuleArrayOutputWithContext(context.Background())
}

func (i IPLoadbalancingHTTPRouteRuleArray) ToIPLoadbalancingHTTPRouteRuleArrayOutputWithContext(ctx context.Context) IPLoadbalancingHTTPRouteRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPLoadbalancingHTTPRouteRuleArrayOutput)
}

// IPLoadbalancingHTTPRouteRuleMapInput is an input type that accepts IPLoadbalancingHTTPRouteRuleMap and IPLoadbalancingHTTPRouteRuleMapOutput values.
// You can construct a concrete instance of `IPLoadbalancingHTTPRouteRuleMapInput` via:
//
//          IPLoadbalancingHTTPRouteRuleMap{ "key": IPLoadbalancingHTTPRouteRuleArgs{...} }
type IPLoadbalancingHTTPRouteRuleMapInput interface {
	pulumi.Input

	ToIPLoadbalancingHTTPRouteRuleMapOutput() IPLoadbalancingHTTPRouteRuleMapOutput
	ToIPLoadbalancingHTTPRouteRuleMapOutputWithContext(context.Context) IPLoadbalancingHTTPRouteRuleMapOutput
}

type IPLoadbalancingHTTPRouteRuleMap map[string]IPLoadbalancingHTTPRouteRuleInput

func (IPLoadbalancingHTTPRouteRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IPLoadbalancingHTTPRouteRule)(nil)).Elem()
}

func (i IPLoadbalancingHTTPRouteRuleMap) ToIPLoadbalancingHTTPRouteRuleMapOutput() IPLoadbalancingHTTPRouteRuleMapOutput {
	return i.ToIPLoadbalancingHTTPRouteRuleMapOutputWithContext(context.Background())
}

func (i IPLoadbalancingHTTPRouteRuleMap) ToIPLoadbalancingHTTPRouteRuleMapOutputWithContext(ctx context.Context) IPLoadbalancingHTTPRouteRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPLoadbalancingHTTPRouteRuleMapOutput)
}

type IPLoadbalancingHTTPRouteRuleOutput struct{ *pulumi.OutputState }

func (IPLoadbalancingHTTPRouteRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IPLoadbalancingHTTPRouteRule)(nil)).Elem()
}

func (o IPLoadbalancingHTTPRouteRuleOutput) ToIPLoadbalancingHTTPRouteRuleOutput() IPLoadbalancingHTTPRouteRuleOutput {
	return o
}

func (o IPLoadbalancingHTTPRouteRuleOutput) ToIPLoadbalancingHTTPRouteRuleOutputWithContext(ctx context.Context) IPLoadbalancingHTTPRouteRuleOutput {
	return o
}

type IPLoadbalancingHTTPRouteRuleArrayOutput struct{ *pulumi.OutputState }

func (IPLoadbalancingHTTPRouteRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IPLoadbalancingHTTPRouteRule)(nil)).Elem()
}

func (o IPLoadbalancingHTTPRouteRuleArrayOutput) ToIPLoadbalancingHTTPRouteRuleArrayOutput() IPLoadbalancingHTTPRouteRuleArrayOutput {
	return o
}

func (o IPLoadbalancingHTTPRouteRuleArrayOutput) ToIPLoadbalancingHTTPRouteRuleArrayOutputWithContext(ctx context.Context) IPLoadbalancingHTTPRouteRuleArrayOutput {
	return o
}

func (o IPLoadbalancingHTTPRouteRuleArrayOutput) Index(i pulumi.IntInput) IPLoadbalancingHTTPRouteRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IPLoadbalancingHTTPRouteRule {
		return vs[0].([]*IPLoadbalancingHTTPRouteRule)[vs[1].(int)]
	}).(IPLoadbalancingHTTPRouteRuleOutput)
}

type IPLoadbalancingHTTPRouteRuleMapOutput struct{ *pulumi.OutputState }

func (IPLoadbalancingHTTPRouteRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IPLoadbalancingHTTPRouteRule)(nil)).Elem()
}

func (o IPLoadbalancingHTTPRouteRuleMapOutput) ToIPLoadbalancingHTTPRouteRuleMapOutput() IPLoadbalancingHTTPRouteRuleMapOutput {
	return o
}

func (o IPLoadbalancingHTTPRouteRuleMapOutput) ToIPLoadbalancingHTTPRouteRuleMapOutputWithContext(ctx context.Context) IPLoadbalancingHTTPRouteRuleMapOutput {
	return o
}

func (o IPLoadbalancingHTTPRouteRuleMapOutput) MapIndex(k pulumi.StringInput) IPLoadbalancingHTTPRouteRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IPLoadbalancingHTTPRouteRule {
		return vs[0].(map[string]*IPLoadbalancingHTTPRouteRule)[vs[1].(string)]
	}).(IPLoadbalancingHTTPRouteRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IPLoadbalancingHTTPRouteRuleInput)(nil)).Elem(), &IPLoadbalancingHTTPRouteRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*IPLoadbalancingHTTPRouteRuleArrayInput)(nil)).Elem(), IPLoadbalancingHTTPRouteRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IPLoadbalancingHTTPRouteRuleMapInput)(nil)).Elem(), IPLoadbalancingHTTPRouteRuleMap{})
	pulumi.RegisterOutputType(IPLoadbalancingHTTPRouteRuleOutput{})
	pulumi.RegisterOutputType(IPLoadbalancingHTTPRouteRuleArrayOutput{})
	pulumi.RegisterOutputType(IPLoadbalancingHTTPRouteRuleMapOutput{})
}
