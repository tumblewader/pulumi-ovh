// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ovh

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Attach a dedicated server to a VRack.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-ovh/sdk/go/ovh"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := ovh.NewVRACDedicatedServer(ctx, "vds", &ovh.VRACDedicatedServerArgs{
// 			ServerId: pulumi.String("67890"),
// 			VrackId:  pulumi.String("12345"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type VRACDedicatedServer struct {
	pulumi.CustomResourceState

	// The id of the dedicated server.
	ServerId pulumi.StringOutput `pulumi:"serverId"`
	// The id of the vrack.
	VrackId pulumi.StringOutput `pulumi:"vrackId"`
}

// NewVRACDedicatedServer registers a new resource with the given unique name, arguments, and options.
func NewVRACDedicatedServer(ctx *pulumi.Context,
	name string, args *VRACDedicatedServerArgs, opts ...pulumi.ResourceOption) (*VRACDedicatedServer, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ServerId == nil {
		return nil, errors.New("invalid value for required argument 'ServerId'")
	}
	if args.VrackId == nil {
		return nil, errors.New("invalid value for required argument 'VrackId'")
	}
	var resource VRACDedicatedServer
	err := ctx.RegisterResource("ovh:index/vRACDedicatedServer:VRACDedicatedServer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVRACDedicatedServer gets an existing VRACDedicatedServer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVRACDedicatedServer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VRACDedicatedServerState, opts ...pulumi.ResourceOption) (*VRACDedicatedServer, error) {
	var resource VRACDedicatedServer
	err := ctx.ReadResource("ovh:index/vRACDedicatedServer:VRACDedicatedServer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VRACDedicatedServer resources.
type vracdedicatedServerState struct {
	// The id of the dedicated server.
	ServerId *string `pulumi:"serverId"`
	// The id of the vrack.
	VrackId *string `pulumi:"vrackId"`
}

type VRACDedicatedServerState struct {
	// The id of the dedicated server.
	ServerId pulumi.StringPtrInput
	// The id of the vrack.
	VrackId pulumi.StringPtrInput
}

func (VRACDedicatedServerState) ElementType() reflect.Type {
	return reflect.TypeOf((*vracdedicatedServerState)(nil)).Elem()
}

type vracdedicatedServerArgs struct {
	// The id of the dedicated server.
	ServerId string `pulumi:"serverId"`
	// The id of the vrack.
	VrackId string `pulumi:"vrackId"`
}

// The set of arguments for constructing a VRACDedicatedServer resource.
type VRACDedicatedServerArgs struct {
	// The id of the dedicated server.
	ServerId pulumi.StringInput
	// The id of the vrack.
	VrackId pulumi.StringInput
}

func (VRACDedicatedServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vracdedicatedServerArgs)(nil)).Elem()
}

type VRACDedicatedServerInput interface {
	pulumi.Input

	ToVRACDedicatedServerOutput() VRACDedicatedServerOutput
	ToVRACDedicatedServerOutputWithContext(ctx context.Context) VRACDedicatedServerOutput
}

func (*VRACDedicatedServer) ElementType() reflect.Type {
	return reflect.TypeOf((**VRACDedicatedServer)(nil)).Elem()
}

func (i *VRACDedicatedServer) ToVRACDedicatedServerOutput() VRACDedicatedServerOutput {
	return i.ToVRACDedicatedServerOutputWithContext(context.Background())
}

func (i *VRACDedicatedServer) ToVRACDedicatedServerOutputWithContext(ctx context.Context) VRACDedicatedServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VRACDedicatedServerOutput)
}

// VRACDedicatedServerArrayInput is an input type that accepts VRACDedicatedServerArray and VRACDedicatedServerArrayOutput values.
// You can construct a concrete instance of `VRACDedicatedServerArrayInput` via:
//
//          VRACDedicatedServerArray{ VRACDedicatedServerArgs{...} }
type VRACDedicatedServerArrayInput interface {
	pulumi.Input

	ToVRACDedicatedServerArrayOutput() VRACDedicatedServerArrayOutput
	ToVRACDedicatedServerArrayOutputWithContext(context.Context) VRACDedicatedServerArrayOutput
}

type VRACDedicatedServerArray []VRACDedicatedServerInput

func (VRACDedicatedServerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VRACDedicatedServer)(nil)).Elem()
}

func (i VRACDedicatedServerArray) ToVRACDedicatedServerArrayOutput() VRACDedicatedServerArrayOutput {
	return i.ToVRACDedicatedServerArrayOutputWithContext(context.Background())
}

func (i VRACDedicatedServerArray) ToVRACDedicatedServerArrayOutputWithContext(ctx context.Context) VRACDedicatedServerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VRACDedicatedServerArrayOutput)
}

// VRACDedicatedServerMapInput is an input type that accepts VRACDedicatedServerMap and VRACDedicatedServerMapOutput values.
// You can construct a concrete instance of `VRACDedicatedServerMapInput` via:
//
//          VRACDedicatedServerMap{ "key": VRACDedicatedServerArgs{...} }
type VRACDedicatedServerMapInput interface {
	pulumi.Input

	ToVRACDedicatedServerMapOutput() VRACDedicatedServerMapOutput
	ToVRACDedicatedServerMapOutputWithContext(context.Context) VRACDedicatedServerMapOutput
}

type VRACDedicatedServerMap map[string]VRACDedicatedServerInput

func (VRACDedicatedServerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VRACDedicatedServer)(nil)).Elem()
}

func (i VRACDedicatedServerMap) ToVRACDedicatedServerMapOutput() VRACDedicatedServerMapOutput {
	return i.ToVRACDedicatedServerMapOutputWithContext(context.Background())
}

func (i VRACDedicatedServerMap) ToVRACDedicatedServerMapOutputWithContext(ctx context.Context) VRACDedicatedServerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VRACDedicatedServerMapOutput)
}

type VRACDedicatedServerOutput struct{ *pulumi.OutputState }

func (VRACDedicatedServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VRACDedicatedServer)(nil)).Elem()
}

func (o VRACDedicatedServerOutput) ToVRACDedicatedServerOutput() VRACDedicatedServerOutput {
	return o
}

func (o VRACDedicatedServerOutput) ToVRACDedicatedServerOutputWithContext(ctx context.Context) VRACDedicatedServerOutput {
	return o
}

type VRACDedicatedServerArrayOutput struct{ *pulumi.OutputState }

func (VRACDedicatedServerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VRACDedicatedServer)(nil)).Elem()
}

func (o VRACDedicatedServerArrayOutput) ToVRACDedicatedServerArrayOutput() VRACDedicatedServerArrayOutput {
	return o
}

func (o VRACDedicatedServerArrayOutput) ToVRACDedicatedServerArrayOutputWithContext(ctx context.Context) VRACDedicatedServerArrayOutput {
	return o
}

func (o VRACDedicatedServerArrayOutput) Index(i pulumi.IntInput) VRACDedicatedServerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VRACDedicatedServer {
		return vs[0].([]*VRACDedicatedServer)[vs[1].(int)]
	}).(VRACDedicatedServerOutput)
}

type VRACDedicatedServerMapOutput struct{ *pulumi.OutputState }

func (VRACDedicatedServerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VRACDedicatedServer)(nil)).Elem()
}

func (o VRACDedicatedServerMapOutput) ToVRACDedicatedServerMapOutput() VRACDedicatedServerMapOutput {
	return o
}

func (o VRACDedicatedServerMapOutput) ToVRACDedicatedServerMapOutputWithContext(ctx context.Context) VRACDedicatedServerMapOutput {
	return o
}

func (o VRACDedicatedServerMapOutput) MapIndex(k pulumi.StringInput) VRACDedicatedServerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VRACDedicatedServer {
		return vs[0].(map[string]*VRACDedicatedServer)[vs[1].(string)]
	}).(VRACDedicatedServerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VRACDedicatedServerInput)(nil)).Elem(), &VRACDedicatedServer{})
	pulumi.RegisterInputType(reflect.TypeOf((*VRACDedicatedServerArrayInput)(nil)).Elem(), VRACDedicatedServerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VRACDedicatedServerMapInput)(nil)).Elem(), VRACDedicatedServerMap{})
	pulumi.RegisterOutputType(VRACDedicatedServerOutput{})
	pulumi.RegisterOutputType(VRACDedicatedServerArrayOutput{})
	pulumi.RegisterOutputType(VRACDedicatedServerMapOutput{})
}
