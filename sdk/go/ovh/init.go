// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ovh

import (
	"fmt"

	"github.com/blang/semver"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type module struct {
	version semver.Version
}

func (m *module) Version() semver.Version {
	return m.version
}

func (m *module) Construct(ctx *pulumi.Context, name, typ, urn string) (r pulumi.Resource, err error) {
	switch typ {
	case "ovh:index/cloudNetworkPrivate:CloudNetworkPrivate":
		r = &CloudNetworkPrivate{}
	case "ovh:index/cloudNetworkPrivateSubnet:CloudNetworkPrivateSubnet":
		r = &CloudNetworkPrivateSubnet{}
	case "ovh:index/cloudUser:CloudUser":
		r = &CloudUser{}
	case "ovh:index/dedicatedCephACL:DedicatedCephACL":
		r = &DedicatedCephACL{}
	case "ovh:index/dedicatedServerInstallTask:DedicatedServerInstallTask":
		r = &DedicatedServerInstallTask{}
	case "ovh:index/dedicatedServerRebootTask:DedicatedServerRebootTask":
		r = &DedicatedServerRebootTask{}
	case "ovh:index/dedicatedServerUpdate:DedicatedServerUpdate":
		r = &DedicatedServerUpdate{}
	case "ovh:index/domainZoneRecord:DomainZoneRecord":
		r = &DomainZoneRecord{}
	case "ovh:index/domainZoneRedirection:DomainZoneRedirection":
		r = &DomainZoneRedirection{}
	case "ovh:index/iPLoadbalancingHTTPFarm:IPLoadbalancingHTTPFarm":
		r = &IPLoadbalancingHTTPFarm{}
	case "ovh:index/iPLoadbalancingHTTPFarmServer:IPLoadbalancingHTTPFarmServer":
		r = &IPLoadbalancingHTTPFarmServer{}
	case "ovh:index/iPLoadbalancingHTTPFrontend:IPLoadbalancingHTTPFrontend":
		r = &IPLoadbalancingHTTPFrontend{}
	case "ovh:index/iPLoadbalancingHTTPRoute:IPLoadbalancingHTTPRoute":
		r = &IPLoadbalancingHTTPRoute{}
	case "ovh:index/iPLoadbalancingHTTPRouteRule:IPLoadbalancingHTTPRouteRule":
		r = &IPLoadbalancingHTTPRouteRule{}
	case "ovh:index/iPLoadbalancingRefresh:IPLoadbalancingRefresh":
		r = &IPLoadbalancingRefresh{}
	case "ovh:index/iPLoadbalancingTCPFarm:IPLoadbalancingTCPFarm":
		r = &IPLoadbalancingTCPFarm{}
	case "ovh:index/iPLoadbalancingTCPFarmServer:IPLoadbalancingTCPFarmServer":
		r = &IPLoadbalancingTCPFarmServer{}
	case "ovh:index/iPLoadbalancingTCPFrontend:IPLoadbalancingTCPFrontend":
		r = &IPLoadbalancingTCPFrontend{}
	case "ovh:index/iPLoadbalancingVRACNetwork:IPLoadbalancingVRACNetwork":
		r = &IPLoadbalancingVRACNetwork{}
	case "ovh:index/iPReverse:IPReverse":
		r = &IPReverse{}
	case "ovh:index/meIPXEScript:MeIPXEScript":
		r = &MeIPXEScript{}
	case "ovh:index/meInstallationTemplate:MeInstallationTemplate":
		r = &MeInstallationTemplate{}
	case "ovh:index/meInstallationTemplatePartitionScheme:MeInstallationTemplatePartitionScheme":
		r = &MeInstallationTemplatePartitionScheme{}
	case "ovh:index/meInstallationTemplatePartitionSchemeHardwareRaid:MeInstallationTemplatePartitionSchemeHardwareRaid":
		r = &MeInstallationTemplatePartitionSchemeHardwareRaid{}
	case "ovh:index/meInstallationTemplatePartitionSchemePartition:MeInstallationTemplatePartitionSchemePartition":
		r = &MeInstallationTemplatePartitionSchemePartition{}
	case "ovh:index/meSSHKey:MeSSHKey":
		r = &MeSSHKey{}
	case "ovh:index/pubicCloudPrivateNetwork:PubicCloudPrivateNetwork":
		r = &PubicCloudPrivateNetwork{}
	case "ovh:index/pubicCloudPrivateNetworkSubnet:PubicCloudPrivateNetworkSubnet":
		r = &PubicCloudPrivateNetworkSubnet{}
	case "ovh:index/publicCloudUser:PublicCloudUser":
		r = &PublicCloudUser{}
	case "ovh:index/vRACCloudProject:VRACCloudProject":
		r = &VRACCloudProject{}
	case "ovh:index/vRACDedicatedServer:VRACDedicatedServer":
		r = &VRACDedicatedServer{}
	case "ovh:index/vRACDedicatedServerInterface:VRACDedicatedServerInterface":
		r = &VRACDedicatedServerInterface{}
	case "ovh:index/vRACIPLoadbalancing:VRACIPLoadbalancing":
		r = &VRACIPLoadbalancing{}
	case "ovh:index/vRACPublicCloudAttachment:VRACPublicCloudAttachment":
		r = &VRACPublicCloudAttachment{}
	default:
		return nil, fmt.Errorf("unknown resource type: %s", typ)
	}

	err = ctx.RegisterResource(typ, name, nil, r, pulumi.URN_(urn))
	return
}

type pkg struct {
	version semver.Version
}

func (p *pkg) Version() semver.Version {
	return p.version
}

func (p *pkg) ConstructProvider(ctx *pulumi.Context, name, typ, urn string) (pulumi.ProviderResource, error) {
	if typ != "pulumi:providers:ovh" {
		return nil, fmt.Errorf("unknown provider type: %s", typ)
	}

	r := &Provider{}
	err := ctx.RegisterResource(typ, name, nil, r, pulumi.URN_(urn))
	return r, err
}

func init() {
	version, err := PkgVersion()
	if err != nil {
		fmt.Printf("failed to determine package version. defaulting to v1: %v\n", err)
	}
	pulumi.RegisterResourceModule(
		"ovh",
		"index/cloudNetworkPrivate",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ovh",
		"index/cloudNetworkPrivateSubnet",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ovh",
		"index/cloudUser",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ovh",
		"index/dedicatedCephACL",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ovh",
		"index/dedicatedServerInstallTask",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ovh",
		"index/dedicatedServerRebootTask",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ovh",
		"index/dedicatedServerUpdate",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ovh",
		"index/domainZoneRecord",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ovh",
		"index/domainZoneRedirection",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ovh",
		"index/iPLoadbalancingHTTPFarm",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ovh",
		"index/iPLoadbalancingHTTPFarmServer",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ovh",
		"index/iPLoadbalancingHTTPFrontend",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ovh",
		"index/iPLoadbalancingHTTPRoute",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ovh",
		"index/iPLoadbalancingHTTPRouteRule",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ovh",
		"index/iPLoadbalancingRefresh",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ovh",
		"index/iPLoadbalancingTCPFarm",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ovh",
		"index/iPLoadbalancingTCPFarmServer",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ovh",
		"index/iPLoadbalancingTCPFrontend",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ovh",
		"index/iPLoadbalancingVRACNetwork",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ovh",
		"index/iPReverse",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ovh",
		"index/meIPXEScript",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ovh",
		"index/meInstallationTemplate",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ovh",
		"index/meInstallationTemplatePartitionScheme",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ovh",
		"index/meInstallationTemplatePartitionSchemeHardwareRaid",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ovh",
		"index/meInstallationTemplatePartitionSchemePartition",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ovh",
		"index/meSSHKey",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ovh",
		"index/pubicCloudPrivateNetwork",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ovh",
		"index/pubicCloudPrivateNetworkSubnet",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ovh",
		"index/publicCloudUser",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ovh",
		"index/vRACCloudProject",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ovh",
		"index/vRACDedicatedServer",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ovh",
		"index/vRACDedicatedServerInterface",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ovh",
		"index/vRACIPLoadbalancing",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ovh",
		"index/vRACPublicCloudAttachment",
		&module{version},
	)
	pulumi.RegisterResourcePackage(
		"ovh",
		&pkg{version},
	)
}
