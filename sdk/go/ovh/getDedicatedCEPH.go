// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ovh

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to retrieve information about a dedicated CEPH.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-ovh/sdk/go/ovh"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := ovh.GetDedicatedCEPH(ctx, &GetDedicatedCEPHArgs{
// 			ServiceName: "XXXXXX",
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
func GetDedicatedCEPH(ctx *pulumi.Context, args *GetDedicatedCEPHArgs, opts ...pulumi.InvokeOption) (*GetDedicatedCEPHResult, error) {
	var rv GetDedicatedCEPHResult
	err := ctx.Invoke("ovh:index/getDedicatedCEPH:getDedicatedCEPH", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDedicatedCEPH.
type GetDedicatedCEPHArgs struct {
	// CEPH cluster version
	CephVersion *string `pulumi:"cephVersion"`
	// The service name of the dedicated CEPH cluster.
	ServiceName string `pulumi:"serviceName"`
	// the status of the service
	Status *string `pulumi:"status"`
}

// A collection of values returned by getDedicatedCEPH.
type GetDedicatedCEPHResult struct {
	// list of CEPH monitors IPs
	CephMons []string `pulumi:"cephMons"`
	// CEPH cluster version
	CephVersion string `pulumi:"cephVersion"`
	// CRUSH algorithm settings. Possible values
	// * OPTIMAL
	// * DEFAULT
	// * LEGACY
	// * BOBTAIL
	// * ARGONAUT
	// * FIREFLY
	// * HAMMER
	// * JEWEL
	CrushTunables string `pulumi:"crushTunables"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// CEPH cluster label
	Label string `pulumi:"label"`
	// cluster region
	Region      string `pulumi:"region"`
	ServiceName string `pulumi:"serviceName"`
	// Cluster size in TB
	Size float64 `pulumi:"size"`
	// the state of the cluster
	State string `pulumi:"state"`
	// the status of the service
	Status string `pulumi:"status"`
}

func GetDedicatedCEPHOutput(ctx *pulumi.Context, args GetDedicatedCEPHOutputArgs, opts ...pulumi.InvokeOption) GetDedicatedCEPHResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetDedicatedCEPHResult, error) {
			args := v.(GetDedicatedCEPHArgs)
			r, err := GetDedicatedCEPH(ctx, &args, opts...)
			return *r, err
		}).(GetDedicatedCEPHResultOutput)
}

// A collection of arguments for invoking getDedicatedCEPH.
type GetDedicatedCEPHOutputArgs struct {
	// CEPH cluster version
	CephVersion pulumi.StringPtrInput `pulumi:"cephVersion"`
	// The service name of the dedicated CEPH cluster.
	ServiceName pulumi.StringInput `pulumi:"serviceName"`
	// the status of the service
	Status pulumi.StringPtrInput `pulumi:"status"`
}

func (GetDedicatedCEPHOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDedicatedCEPHArgs)(nil)).Elem()
}

// A collection of values returned by getDedicatedCEPH.
type GetDedicatedCEPHResultOutput struct{ *pulumi.OutputState }

func (GetDedicatedCEPHResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDedicatedCEPHResult)(nil)).Elem()
}

func (o GetDedicatedCEPHResultOutput) ToGetDedicatedCEPHResultOutput() GetDedicatedCEPHResultOutput {
	return o
}

func (o GetDedicatedCEPHResultOutput) ToGetDedicatedCEPHResultOutputWithContext(ctx context.Context) GetDedicatedCEPHResultOutput {
	return o
}

// list of CEPH monitors IPs
func (o GetDedicatedCEPHResultOutput) CephMons() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetDedicatedCEPHResult) []string { return v.CephMons }).(pulumi.StringArrayOutput)
}

// CEPH cluster version
func (o GetDedicatedCEPHResultOutput) CephVersion() pulumi.StringOutput {
	return o.ApplyT(func(v GetDedicatedCEPHResult) string { return v.CephVersion }).(pulumi.StringOutput)
}

// CRUSH algorithm settings. Possible values
// * OPTIMAL
// * DEFAULT
// * LEGACY
// * BOBTAIL
// * ARGONAUT
// * FIREFLY
// * HAMMER
// * JEWEL
func (o GetDedicatedCEPHResultOutput) CrushTunables() pulumi.StringOutput {
	return o.ApplyT(func(v GetDedicatedCEPHResult) string { return v.CrushTunables }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetDedicatedCEPHResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetDedicatedCEPHResult) string { return v.Id }).(pulumi.StringOutput)
}

// CEPH cluster label
func (o GetDedicatedCEPHResultOutput) Label() pulumi.StringOutput {
	return o.ApplyT(func(v GetDedicatedCEPHResult) string { return v.Label }).(pulumi.StringOutput)
}

// cluster region
func (o GetDedicatedCEPHResultOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v GetDedicatedCEPHResult) string { return v.Region }).(pulumi.StringOutput)
}

func (o GetDedicatedCEPHResultOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v GetDedicatedCEPHResult) string { return v.ServiceName }).(pulumi.StringOutput)
}

// Cluster size in TB
func (o GetDedicatedCEPHResultOutput) Size() pulumi.Float64Output {
	return o.ApplyT(func(v GetDedicatedCEPHResult) float64 { return v.Size }).(pulumi.Float64Output)
}

// the state of the cluster
func (o GetDedicatedCEPHResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v GetDedicatedCEPHResult) string { return v.State }).(pulumi.StringOutput)
}

// the status of the service
func (o GetDedicatedCEPHResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetDedicatedCEPHResult) string { return v.Status }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetDedicatedCEPHResultOutput{})
}
