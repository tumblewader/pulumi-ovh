// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ovh

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a backend server entry linked to loadbalancing group (farm)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-ovh/sdk/go/ovh"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		lb, err := ovh.GetIPLoadbalancing(ctx, &GetIPLoadbalancingArgs{
// 			ServiceName: pulumi.StringRef("ip-1.2.3.4"),
// 			State:       pulumi.StringRef("ok"),
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		farmname, err := ovh.NewIPLoadbalancingTCPFarm(ctx, "farmname", &ovh.IPLoadbalancingTCPFarmArgs{
// 			ServiceName: pulumi.String(lb.Id),
// 			Port:        pulumi.Int(8080),
// 			Zone:        pulumi.String("all"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = ovh.NewIPLoadbalancingTCPFarmServer(ctx, "backend", &ovh.IPLoadbalancingTCPFarmServerArgs{
// 			ServiceName:          pulumi.String(lb.Id),
// 			FarmId:               farmname.ID(),
// 			DisplayName:          pulumi.String("mybackend"),
// 			Address:              pulumi.String("4.5.6.7"),
// 			Status:               pulumi.String("active"),
// 			Port:                 pulumi.Int(80),
// 			ProxyProtocolVersion: pulumi.Any(v2),
// 			Weight:               pulumi.Int(2),
// 			Probe:                pulumi.Bool(true),
// 			Ssl:                  pulumi.Bool(false),
// 			Backup:               pulumi.Bool(true),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type IPLoadbalancingTCPFarmServer struct {
	pulumi.CustomResourceState

	// Address of the backend server (IP from either internal or OVH network)
	Address pulumi.StringOutput `pulumi:"address"`
	// is it a backup server used in case of failure of all the non-backup backends
	Backup pulumi.BoolPtrOutput   `pulumi:"backup"`
	Chain  pulumi.StringPtrOutput `pulumi:"chain"`
	// Label for the server
	DisplayName pulumi.StringPtrOutput `pulumi:"displayName"`
	// ID of the farm this server is attached to
	FarmId pulumi.IntOutput `pulumi:"farmId"`
	// Port that backend will respond on
	Port pulumi.IntPtrOutput `pulumi:"port"`
	// defines if backend will be probed to determine health and keep as active in farm if healthy
	Probe pulumi.BoolPtrOutput `pulumi:"probe"`
	// version of the PROXY protocol used to pass origin connection information from loadbalancer to recieving service (`v1`, `v2`, `v2-ssl`, `v2-ssl-cn`)
	ProxyProtocolVersion pulumi.StringPtrOutput `pulumi:"proxyProtocolVersion"`
	// The internal name of your IP load balancing
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
	// is the connection ciphered with SSL (TLS)
	Ssl pulumi.BoolPtrOutput `pulumi:"ssl"`
	// backend status - `active` or `inactive`
	Status pulumi.StringOutput `pulumi:"status"`
	// used in loadbalancing algorithm
	Weight pulumi.IntPtrOutput `pulumi:"weight"`
}

// NewIPLoadbalancingTCPFarmServer registers a new resource with the given unique name, arguments, and options.
func NewIPLoadbalancingTCPFarmServer(ctx *pulumi.Context,
	name string, args *IPLoadbalancingTCPFarmServerArgs, opts ...pulumi.ResourceOption) (*IPLoadbalancingTCPFarmServer, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Address == nil {
		return nil, errors.New("invalid value for required argument 'Address'")
	}
	if args.FarmId == nil {
		return nil, errors.New("invalid value for required argument 'FarmId'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	if args.Status == nil {
		return nil, errors.New("invalid value for required argument 'Status'")
	}
	var resource IPLoadbalancingTCPFarmServer
	err := ctx.RegisterResource("ovh:index/iPLoadbalancingTCPFarmServer:IPLoadbalancingTCPFarmServer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIPLoadbalancingTCPFarmServer gets an existing IPLoadbalancingTCPFarmServer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIPLoadbalancingTCPFarmServer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IPLoadbalancingTCPFarmServerState, opts ...pulumi.ResourceOption) (*IPLoadbalancingTCPFarmServer, error) {
	var resource IPLoadbalancingTCPFarmServer
	err := ctx.ReadResource("ovh:index/iPLoadbalancingTCPFarmServer:IPLoadbalancingTCPFarmServer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IPLoadbalancingTCPFarmServer resources.
type iploadbalancingTCPFarmServerState struct {
	// Address of the backend server (IP from either internal or OVH network)
	Address *string `pulumi:"address"`
	// is it a backup server used in case of failure of all the non-backup backends
	Backup *bool   `pulumi:"backup"`
	Chain  *string `pulumi:"chain"`
	// Label for the server
	DisplayName *string `pulumi:"displayName"`
	// ID of the farm this server is attached to
	FarmId *int `pulumi:"farmId"`
	// Port that backend will respond on
	Port *int `pulumi:"port"`
	// defines if backend will be probed to determine health and keep as active in farm if healthy
	Probe *bool `pulumi:"probe"`
	// version of the PROXY protocol used to pass origin connection information from loadbalancer to recieving service (`v1`, `v2`, `v2-ssl`, `v2-ssl-cn`)
	ProxyProtocolVersion *string `pulumi:"proxyProtocolVersion"`
	// The internal name of your IP load balancing
	ServiceName *string `pulumi:"serviceName"`
	// is the connection ciphered with SSL (TLS)
	Ssl *bool `pulumi:"ssl"`
	// backend status - `active` or `inactive`
	Status *string `pulumi:"status"`
	// used in loadbalancing algorithm
	Weight *int `pulumi:"weight"`
}

type IPLoadbalancingTCPFarmServerState struct {
	// Address of the backend server (IP from either internal or OVH network)
	Address pulumi.StringPtrInput
	// is it a backup server used in case of failure of all the non-backup backends
	Backup pulumi.BoolPtrInput
	Chain  pulumi.StringPtrInput
	// Label for the server
	DisplayName pulumi.StringPtrInput
	// ID of the farm this server is attached to
	FarmId pulumi.IntPtrInput
	// Port that backend will respond on
	Port pulumi.IntPtrInput
	// defines if backend will be probed to determine health and keep as active in farm if healthy
	Probe pulumi.BoolPtrInput
	// version of the PROXY protocol used to pass origin connection information from loadbalancer to recieving service (`v1`, `v2`, `v2-ssl`, `v2-ssl-cn`)
	ProxyProtocolVersion pulumi.StringPtrInput
	// The internal name of your IP load balancing
	ServiceName pulumi.StringPtrInput
	// is the connection ciphered with SSL (TLS)
	Ssl pulumi.BoolPtrInput
	// backend status - `active` or `inactive`
	Status pulumi.StringPtrInput
	// used in loadbalancing algorithm
	Weight pulumi.IntPtrInput
}

func (IPLoadbalancingTCPFarmServerState) ElementType() reflect.Type {
	return reflect.TypeOf((*iploadbalancingTCPFarmServerState)(nil)).Elem()
}

type iploadbalancingTCPFarmServerArgs struct {
	// Address of the backend server (IP from either internal or OVH network)
	Address string `pulumi:"address"`
	// is it a backup server used in case of failure of all the non-backup backends
	Backup *bool   `pulumi:"backup"`
	Chain  *string `pulumi:"chain"`
	// Label for the server
	DisplayName *string `pulumi:"displayName"`
	// ID of the farm this server is attached to
	FarmId int `pulumi:"farmId"`
	// Port that backend will respond on
	Port *int `pulumi:"port"`
	// defines if backend will be probed to determine health and keep as active in farm if healthy
	Probe *bool `pulumi:"probe"`
	// version of the PROXY protocol used to pass origin connection information from loadbalancer to recieving service (`v1`, `v2`, `v2-ssl`, `v2-ssl-cn`)
	ProxyProtocolVersion *string `pulumi:"proxyProtocolVersion"`
	// The internal name of your IP load balancing
	ServiceName string `pulumi:"serviceName"`
	// is the connection ciphered with SSL (TLS)
	Ssl *bool `pulumi:"ssl"`
	// backend status - `active` or `inactive`
	Status string `pulumi:"status"`
	// used in loadbalancing algorithm
	Weight *int `pulumi:"weight"`
}

// The set of arguments for constructing a IPLoadbalancingTCPFarmServer resource.
type IPLoadbalancingTCPFarmServerArgs struct {
	// Address of the backend server (IP from either internal or OVH network)
	Address pulumi.StringInput
	// is it a backup server used in case of failure of all the non-backup backends
	Backup pulumi.BoolPtrInput
	Chain  pulumi.StringPtrInput
	// Label for the server
	DisplayName pulumi.StringPtrInput
	// ID of the farm this server is attached to
	FarmId pulumi.IntInput
	// Port that backend will respond on
	Port pulumi.IntPtrInput
	// defines if backend will be probed to determine health and keep as active in farm if healthy
	Probe pulumi.BoolPtrInput
	// version of the PROXY protocol used to pass origin connection information from loadbalancer to recieving service (`v1`, `v2`, `v2-ssl`, `v2-ssl-cn`)
	ProxyProtocolVersion pulumi.StringPtrInput
	// The internal name of your IP load balancing
	ServiceName pulumi.StringInput
	// is the connection ciphered with SSL (TLS)
	Ssl pulumi.BoolPtrInput
	// backend status - `active` or `inactive`
	Status pulumi.StringInput
	// used in loadbalancing algorithm
	Weight pulumi.IntPtrInput
}

func (IPLoadbalancingTCPFarmServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*iploadbalancingTCPFarmServerArgs)(nil)).Elem()
}

type IPLoadbalancingTCPFarmServerInput interface {
	pulumi.Input

	ToIPLoadbalancingTCPFarmServerOutput() IPLoadbalancingTCPFarmServerOutput
	ToIPLoadbalancingTCPFarmServerOutputWithContext(ctx context.Context) IPLoadbalancingTCPFarmServerOutput
}

func (*IPLoadbalancingTCPFarmServer) ElementType() reflect.Type {
	return reflect.TypeOf((**IPLoadbalancingTCPFarmServer)(nil)).Elem()
}

func (i *IPLoadbalancingTCPFarmServer) ToIPLoadbalancingTCPFarmServerOutput() IPLoadbalancingTCPFarmServerOutput {
	return i.ToIPLoadbalancingTCPFarmServerOutputWithContext(context.Background())
}

func (i *IPLoadbalancingTCPFarmServer) ToIPLoadbalancingTCPFarmServerOutputWithContext(ctx context.Context) IPLoadbalancingTCPFarmServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPLoadbalancingTCPFarmServerOutput)
}

// IPLoadbalancingTCPFarmServerArrayInput is an input type that accepts IPLoadbalancingTCPFarmServerArray and IPLoadbalancingTCPFarmServerArrayOutput values.
// You can construct a concrete instance of `IPLoadbalancingTCPFarmServerArrayInput` via:
//
//          IPLoadbalancingTCPFarmServerArray{ IPLoadbalancingTCPFarmServerArgs{...} }
type IPLoadbalancingTCPFarmServerArrayInput interface {
	pulumi.Input

	ToIPLoadbalancingTCPFarmServerArrayOutput() IPLoadbalancingTCPFarmServerArrayOutput
	ToIPLoadbalancingTCPFarmServerArrayOutputWithContext(context.Context) IPLoadbalancingTCPFarmServerArrayOutput
}

type IPLoadbalancingTCPFarmServerArray []IPLoadbalancingTCPFarmServerInput

func (IPLoadbalancingTCPFarmServerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IPLoadbalancingTCPFarmServer)(nil)).Elem()
}

func (i IPLoadbalancingTCPFarmServerArray) ToIPLoadbalancingTCPFarmServerArrayOutput() IPLoadbalancingTCPFarmServerArrayOutput {
	return i.ToIPLoadbalancingTCPFarmServerArrayOutputWithContext(context.Background())
}

func (i IPLoadbalancingTCPFarmServerArray) ToIPLoadbalancingTCPFarmServerArrayOutputWithContext(ctx context.Context) IPLoadbalancingTCPFarmServerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPLoadbalancingTCPFarmServerArrayOutput)
}

// IPLoadbalancingTCPFarmServerMapInput is an input type that accepts IPLoadbalancingTCPFarmServerMap and IPLoadbalancingTCPFarmServerMapOutput values.
// You can construct a concrete instance of `IPLoadbalancingTCPFarmServerMapInput` via:
//
//          IPLoadbalancingTCPFarmServerMap{ "key": IPLoadbalancingTCPFarmServerArgs{...} }
type IPLoadbalancingTCPFarmServerMapInput interface {
	pulumi.Input

	ToIPLoadbalancingTCPFarmServerMapOutput() IPLoadbalancingTCPFarmServerMapOutput
	ToIPLoadbalancingTCPFarmServerMapOutputWithContext(context.Context) IPLoadbalancingTCPFarmServerMapOutput
}

type IPLoadbalancingTCPFarmServerMap map[string]IPLoadbalancingTCPFarmServerInput

func (IPLoadbalancingTCPFarmServerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IPLoadbalancingTCPFarmServer)(nil)).Elem()
}

func (i IPLoadbalancingTCPFarmServerMap) ToIPLoadbalancingTCPFarmServerMapOutput() IPLoadbalancingTCPFarmServerMapOutput {
	return i.ToIPLoadbalancingTCPFarmServerMapOutputWithContext(context.Background())
}

func (i IPLoadbalancingTCPFarmServerMap) ToIPLoadbalancingTCPFarmServerMapOutputWithContext(ctx context.Context) IPLoadbalancingTCPFarmServerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPLoadbalancingTCPFarmServerMapOutput)
}

type IPLoadbalancingTCPFarmServerOutput struct{ *pulumi.OutputState }

func (IPLoadbalancingTCPFarmServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IPLoadbalancingTCPFarmServer)(nil)).Elem()
}

func (o IPLoadbalancingTCPFarmServerOutput) ToIPLoadbalancingTCPFarmServerOutput() IPLoadbalancingTCPFarmServerOutput {
	return o
}

func (o IPLoadbalancingTCPFarmServerOutput) ToIPLoadbalancingTCPFarmServerOutputWithContext(ctx context.Context) IPLoadbalancingTCPFarmServerOutput {
	return o
}

type IPLoadbalancingTCPFarmServerArrayOutput struct{ *pulumi.OutputState }

func (IPLoadbalancingTCPFarmServerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IPLoadbalancingTCPFarmServer)(nil)).Elem()
}

func (o IPLoadbalancingTCPFarmServerArrayOutput) ToIPLoadbalancingTCPFarmServerArrayOutput() IPLoadbalancingTCPFarmServerArrayOutput {
	return o
}

func (o IPLoadbalancingTCPFarmServerArrayOutput) ToIPLoadbalancingTCPFarmServerArrayOutputWithContext(ctx context.Context) IPLoadbalancingTCPFarmServerArrayOutput {
	return o
}

func (o IPLoadbalancingTCPFarmServerArrayOutput) Index(i pulumi.IntInput) IPLoadbalancingTCPFarmServerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IPLoadbalancingTCPFarmServer {
		return vs[0].([]*IPLoadbalancingTCPFarmServer)[vs[1].(int)]
	}).(IPLoadbalancingTCPFarmServerOutput)
}

type IPLoadbalancingTCPFarmServerMapOutput struct{ *pulumi.OutputState }

func (IPLoadbalancingTCPFarmServerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IPLoadbalancingTCPFarmServer)(nil)).Elem()
}

func (o IPLoadbalancingTCPFarmServerMapOutput) ToIPLoadbalancingTCPFarmServerMapOutput() IPLoadbalancingTCPFarmServerMapOutput {
	return o
}

func (o IPLoadbalancingTCPFarmServerMapOutput) ToIPLoadbalancingTCPFarmServerMapOutputWithContext(ctx context.Context) IPLoadbalancingTCPFarmServerMapOutput {
	return o
}

func (o IPLoadbalancingTCPFarmServerMapOutput) MapIndex(k pulumi.StringInput) IPLoadbalancingTCPFarmServerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IPLoadbalancingTCPFarmServer {
		return vs[0].(map[string]*IPLoadbalancingTCPFarmServer)[vs[1].(string)]
	}).(IPLoadbalancingTCPFarmServerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IPLoadbalancingTCPFarmServerInput)(nil)).Elem(), &IPLoadbalancingTCPFarmServer{})
	pulumi.RegisterInputType(reflect.TypeOf((*IPLoadbalancingTCPFarmServerArrayInput)(nil)).Elem(), IPLoadbalancingTCPFarmServerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IPLoadbalancingTCPFarmServerMapInput)(nil)).Elem(), IPLoadbalancingTCPFarmServerMap{})
	pulumi.RegisterOutputType(IPLoadbalancingTCPFarmServerOutput{})
	pulumi.RegisterOutputType(IPLoadbalancingTCPFarmServerArrayOutput{})
	pulumi.RegisterOutputType(IPLoadbalancingTCPFarmServerMapOutput{})
}
