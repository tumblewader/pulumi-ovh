// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ovh

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manage a vrack network for your IP Loadbalancing service.
type IPLoadbalancingVRACNetwork struct {
	pulumi.CustomResourceState

	// Human readable name for your vrack network
	DisplayName pulumi.StringPtrOutput `pulumi:"displayName"`
	// This attribute is there for documentation purpose only and isnt passed to the OVH API as it may conflicts with http/tcp farms `vrackNetworkId` attribute
	FarmIds pulumi.IntArrayOutput `pulumi:"farmIds"`
	// An IP block used as a pool of IPs by this Load Balancer to connect to the servers in this private network. The blck must be in the private network and reserved for the Load Balancer
	NatIp pulumi.StringOutput `pulumi:"natIp"`
	// The internal name of your IP load balancing
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
	// IP block of the private network in the vRack
	Subnet pulumi.StringOutput `pulumi:"subnet"`
	// VLAN of the private network in the vRack. 0 if the private network is not in a VLAN
	Vlan pulumi.IntOutput `pulumi:"vlan"`
	// (Required) Internal Load Balancer identifier of the vRack private network
	VrackNetworkId pulumi.IntOutput `pulumi:"vrackNetworkId"`
}

// NewIPLoadbalancingVRACNetwork registers a new resource with the given unique name, arguments, and options.
func NewIPLoadbalancingVRACNetwork(ctx *pulumi.Context,
	name string, args *IPLoadbalancingVRACNetworkArgs, opts ...pulumi.ResourceOption) (*IPLoadbalancingVRACNetwork, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NatIp == nil {
		return nil, errors.New("invalid value for required argument 'NatIp'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	if args.Subnet == nil {
		return nil, errors.New("invalid value for required argument 'Subnet'")
	}
	var resource IPLoadbalancingVRACNetwork
	err := ctx.RegisterResource("ovh:index/iPLoadbalancingVRACNetwork:IPLoadbalancingVRACNetwork", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIPLoadbalancingVRACNetwork gets an existing IPLoadbalancingVRACNetwork resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIPLoadbalancingVRACNetwork(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IPLoadbalancingVRACNetworkState, opts ...pulumi.ResourceOption) (*IPLoadbalancingVRACNetwork, error) {
	var resource IPLoadbalancingVRACNetwork
	err := ctx.ReadResource("ovh:index/iPLoadbalancingVRACNetwork:IPLoadbalancingVRACNetwork", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IPLoadbalancingVRACNetwork resources.
type iploadbalancingVRACNetworkState struct {
	// Human readable name for your vrack network
	DisplayName *string `pulumi:"displayName"`
	// This attribute is there for documentation purpose only and isnt passed to the OVH API as it may conflicts with http/tcp farms `vrackNetworkId` attribute
	FarmIds []int `pulumi:"farmIds"`
	// An IP block used as a pool of IPs by this Load Balancer to connect to the servers in this private network. The blck must be in the private network and reserved for the Load Balancer
	NatIp *string `pulumi:"natIp"`
	// The internal name of your IP load balancing
	ServiceName *string `pulumi:"serviceName"`
	// IP block of the private network in the vRack
	Subnet *string `pulumi:"subnet"`
	// VLAN of the private network in the vRack. 0 if the private network is not in a VLAN
	Vlan *int `pulumi:"vlan"`
	// (Required) Internal Load Balancer identifier of the vRack private network
	VrackNetworkId *int `pulumi:"vrackNetworkId"`
}

type IPLoadbalancingVRACNetworkState struct {
	// Human readable name for your vrack network
	DisplayName pulumi.StringPtrInput
	// This attribute is there for documentation purpose only and isnt passed to the OVH API as it may conflicts with http/tcp farms `vrackNetworkId` attribute
	FarmIds pulumi.IntArrayInput
	// An IP block used as a pool of IPs by this Load Balancer to connect to the servers in this private network. The blck must be in the private network and reserved for the Load Balancer
	NatIp pulumi.StringPtrInput
	// The internal name of your IP load balancing
	ServiceName pulumi.StringPtrInput
	// IP block of the private network in the vRack
	Subnet pulumi.StringPtrInput
	// VLAN of the private network in the vRack. 0 if the private network is not in a VLAN
	Vlan pulumi.IntPtrInput
	// (Required) Internal Load Balancer identifier of the vRack private network
	VrackNetworkId pulumi.IntPtrInput
}

func (IPLoadbalancingVRACNetworkState) ElementType() reflect.Type {
	return reflect.TypeOf((*iploadbalancingVRACNetworkState)(nil)).Elem()
}

type iploadbalancingVRACNetworkArgs struct {
	// Human readable name for your vrack network
	DisplayName *string `pulumi:"displayName"`
	// This attribute is there for documentation purpose only and isnt passed to the OVH API as it may conflicts with http/tcp farms `vrackNetworkId` attribute
	FarmIds []int `pulumi:"farmIds"`
	// An IP block used as a pool of IPs by this Load Balancer to connect to the servers in this private network. The blck must be in the private network and reserved for the Load Balancer
	NatIp string `pulumi:"natIp"`
	// The internal name of your IP load balancing
	ServiceName string `pulumi:"serviceName"`
	// IP block of the private network in the vRack
	Subnet string `pulumi:"subnet"`
	// VLAN of the private network in the vRack. 0 if the private network is not in a VLAN
	Vlan *int `pulumi:"vlan"`
}

// The set of arguments for constructing a IPLoadbalancingVRACNetwork resource.
type IPLoadbalancingVRACNetworkArgs struct {
	// Human readable name for your vrack network
	DisplayName pulumi.StringPtrInput
	// This attribute is there for documentation purpose only and isnt passed to the OVH API as it may conflicts with http/tcp farms `vrackNetworkId` attribute
	FarmIds pulumi.IntArrayInput
	// An IP block used as a pool of IPs by this Load Balancer to connect to the servers in this private network. The blck must be in the private network and reserved for the Load Balancer
	NatIp pulumi.StringInput
	// The internal name of your IP load balancing
	ServiceName pulumi.StringInput
	// IP block of the private network in the vRack
	Subnet pulumi.StringInput
	// VLAN of the private network in the vRack. 0 if the private network is not in a VLAN
	Vlan pulumi.IntPtrInput
}

func (IPLoadbalancingVRACNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*iploadbalancingVRACNetworkArgs)(nil)).Elem()
}

type IPLoadbalancingVRACNetworkInput interface {
	pulumi.Input

	ToIPLoadbalancingVRACNetworkOutput() IPLoadbalancingVRACNetworkOutput
	ToIPLoadbalancingVRACNetworkOutputWithContext(ctx context.Context) IPLoadbalancingVRACNetworkOutput
}

func (*IPLoadbalancingVRACNetwork) ElementType() reflect.Type {
	return reflect.TypeOf((**IPLoadbalancingVRACNetwork)(nil)).Elem()
}

func (i *IPLoadbalancingVRACNetwork) ToIPLoadbalancingVRACNetworkOutput() IPLoadbalancingVRACNetworkOutput {
	return i.ToIPLoadbalancingVRACNetworkOutputWithContext(context.Background())
}

func (i *IPLoadbalancingVRACNetwork) ToIPLoadbalancingVRACNetworkOutputWithContext(ctx context.Context) IPLoadbalancingVRACNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPLoadbalancingVRACNetworkOutput)
}

// IPLoadbalancingVRACNetworkArrayInput is an input type that accepts IPLoadbalancingVRACNetworkArray and IPLoadbalancingVRACNetworkArrayOutput values.
// You can construct a concrete instance of `IPLoadbalancingVRACNetworkArrayInput` via:
//
//          IPLoadbalancingVRACNetworkArray{ IPLoadbalancingVRACNetworkArgs{...} }
type IPLoadbalancingVRACNetworkArrayInput interface {
	pulumi.Input

	ToIPLoadbalancingVRACNetworkArrayOutput() IPLoadbalancingVRACNetworkArrayOutput
	ToIPLoadbalancingVRACNetworkArrayOutputWithContext(context.Context) IPLoadbalancingVRACNetworkArrayOutput
}

type IPLoadbalancingVRACNetworkArray []IPLoadbalancingVRACNetworkInput

func (IPLoadbalancingVRACNetworkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IPLoadbalancingVRACNetwork)(nil)).Elem()
}

func (i IPLoadbalancingVRACNetworkArray) ToIPLoadbalancingVRACNetworkArrayOutput() IPLoadbalancingVRACNetworkArrayOutput {
	return i.ToIPLoadbalancingVRACNetworkArrayOutputWithContext(context.Background())
}

func (i IPLoadbalancingVRACNetworkArray) ToIPLoadbalancingVRACNetworkArrayOutputWithContext(ctx context.Context) IPLoadbalancingVRACNetworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPLoadbalancingVRACNetworkArrayOutput)
}

// IPLoadbalancingVRACNetworkMapInput is an input type that accepts IPLoadbalancingVRACNetworkMap and IPLoadbalancingVRACNetworkMapOutput values.
// You can construct a concrete instance of `IPLoadbalancingVRACNetworkMapInput` via:
//
//          IPLoadbalancingVRACNetworkMap{ "key": IPLoadbalancingVRACNetworkArgs{...} }
type IPLoadbalancingVRACNetworkMapInput interface {
	pulumi.Input

	ToIPLoadbalancingVRACNetworkMapOutput() IPLoadbalancingVRACNetworkMapOutput
	ToIPLoadbalancingVRACNetworkMapOutputWithContext(context.Context) IPLoadbalancingVRACNetworkMapOutput
}

type IPLoadbalancingVRACNetworkMap map[string]IPLoadbalancingVRACNetworkInput

func (IPLoadbalancingVRACNetworkMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IPLoadbalancingVRACNetwork)(nil)).Elem()
}

func (i IPLoadbalancingVRACNetworkMap) ToIPLoadbalancingVRACNetworkMapOutput() IPLoadbalancingVRACNetworkMapOutput {
	return i.ToIPLoadbalancingVRACNetworkMapOutputWithContext(context.Background())
}

func (i IPLoadbalancingVRACNetworkMap) ToIPLoadbalancingVRACNetworkMapOutputWithContext(ctx context.Context) IPLoadbalancingVRACNetworkMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPLoadbalancingVRACNetworkMapOutput)
}

type IPLoadbalancingVRACNetworkOutput struct{ *pulumi.OutputState }

func (IPLoadbalancingVRACNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IPLoadbalancingVRACNetwork)(nil)).Elem()
}

func (o IPLoadbalancingVRACNetworkOutput) ToIPLoadbalancingVRACNetworkOutput() IPLoadbalancingVRACNetworkOutput {
	return o
}

func (o IPLoadbalancingVRACNetworkOutput) ToIPLoadbalancingVRACNetworkOutputWithContext(ctx context.Context) IPLoadbalancingVRACNetworkOutput {
	return o
}

type IPLoadbalancingVRACNetworkArrayOutput struct{ *pulumi.OutputState }

func (IPLoadbalancingVRACNetworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IPLoadbalancingVRACNetwork)(nil)).Elem()
}

func (o IPLoadbalancingVRACNetworkArrayOutput) ToIPLoadbalancingVRACNetworkArrayOutput() IPLoadbalancingVRACNetworkArrayOutput {
	return o
}

func (o IPLoadbalancingVRACNetworkArrayOutput) ToIPLoadbalancingVRACNetworkArrayOutputWithContext(ctx context.Context) IPLoadbalancingVRACNetworkArrayOutput {
	return o
}

func (o IPLoadbalancingVRACNetworkArrayOutput) Index(i pulumi.IntInput) IPLoadbalancingVRACNetworkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IPLoadbalancingVRACNetwork {
		return vs[0].([]*IPLoadbalancingVRACNetwork)[vs[1].(int)]
	}).(IPLoadbalancingVRACNetworkOutput)
}

type IPLoadbalancingVRACNetworkMapOutput struct{ *pulumi.OutputState }

func (IPLoadbalancingVRACNetworkMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IPLoadbalancingVRACNetwork)(nil)).Elem()
}

func (o IPLoadbalancingVRACNetworkMapOutput) ToIPLoadbalancingVRACNetworkMapOutput() IPLoadbalancingVRACNetworkMapOutput {
	return o
}

func (o IPLoadbalancingVRACNetworkMapOutput) ToIPLoadbalancingVRACNetworkMapOutputWithContext(ctx context.Context) IPLoadbalancingVRACNetworkMapOutput {
	return o
}

func (o IPLoadbalancingVRACNetworkMapOutput) MapIndex(k pulumi.StringInput) IPLoadbalancingVRACNetworkOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IPLoadbalancingVRACNetwork {
		return vs[0].(map[string]*IPLoadbalancingVRACNetwork)[vs[1].(string)]
	}).(IPLoadbalancingVRACNetworkOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IPLoadbalancingVRACNetworkInput)(nil)).Elem(), &IPLoadbalancingVRACNetwork{})
	pulumi.RegisterInputType(reflect.TypeOf((*IPLoadbalancingVRACNetworkArrayInput)(nil)).Elem(), IPLoadbalancingVRACNetworkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IPLoadbalancingVRACNetworkMapInput)(nil)).Elem(), IPLoadbalancingVRACNetworkMap{})
	pulumi.RegisterOutputType(IPLoadbalancingVRACNetworkOutput{})
	pulumi.RegisterOutputType(IPLoadbalancingVRACNetworkArrayOutput{})
	pulumi.RegisterOutputType(IPLoadbalancingVRACNetworkMapOutput{})
}
