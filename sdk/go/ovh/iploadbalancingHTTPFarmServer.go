// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ovh

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a backend server entry linked to http loadbalancing group (farm)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-ovh/sdk/go/ovh"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		lb, err := ovh.GetIPLoadbalancing(ctx, &GetIPLoadbalancingArgs{
// 			ServiceName: pulumi.StringRef("ip-1.2.3.4"),
// 			State:       pulumi.StringRef("ok"),
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		farmname, err := ovh.NewIPLoadbalancingHTTPFarm(ctx, "farmname", &ovh.IPLoadbalancingHTTPFarmArgs{
// 			ServiceName: pulumi.String(lb.Id),
// 			Port:        pulumi.Int(8080),
// 			Zone:        pulumi.String("all"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = ovh.NewIPLoadbalancingHTTPFarmServer(ctx, "backend", &ovh.IPLoadbalancingHTTPFarmServerArgs{
// 			ServiceName:          pulumi.String(lb.Id),
// 			FarmId:               farmname.ID(),
// 			DisplayName:          pulumi.String("mybackend"),
// 			Address:              pulumi.String("4.5.6.7"),
// 			Status:               pulumi.String("active"),
// 			Port:                 pulumi.Int(80),
// 			ProxyProtocolVersion: pulumi.Any(v2),
// 			Weight:               pulumi.Int(2),
// 			Probe:                pulumi.Bool(true),
// 			Ssl:                  pulumi.Bool(false),
// 			Backup:               pulumi.Bool(true),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type IPLoadbalancingHTTPFarmServer struct {
	pulumi.CustomResourceState

	// Address of the backend server (IP from either internal or OVH network)
	Address pulumi.StringOutput `pulumi:"address"`
	// is it a backup server used in case of failure of all the non-backup backends
	Backup pulumi.BoolPtrOutput   `pulumi:"backup"`
	Chain  pulumi.StringPtrOutput `pulumi:"chain"`
	// Value of the stickiness cookie used for this backend.
	Cookie pulumi.StringOutput `pulumi:"cookie"`
	// Label for the server
	DisplayName pulumi.StringPtrOutput `pulumi:"displayName"`
	// ID of the farm this server is attached to
	FarmId pulumi.IntOutput `pulumi:"farmId"`
	// Port that backend will respond on
	Port pulumi.IntPtrOutput `pulumi:"port"`
	// defines if backend will be probed to determine health and keep as active in farm if healthy
	Probe pulumi.BoolPtrOutput `pulumi:"probe"`
	// version of the PROXY protocol used to pass origin connection information from loadbalancer to recieving service (`v1`, `v2`, `v2-ssl`, `v2-ssl-cn`)
	ProxyProtocolVersion pulumi.StringPtrOutput `pulumi:"proxyProtocolVersion"`
	// The internal name of your IP load balancing
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
	// is the connection ciphered with SSL (TLS)
	Ssl pulumi.BoolPtrOutput `pulumi:"ssl"`
	// backend status - `active` or `inactive`
	Status pulumi.StringOutput `pulumi:"status"`
	// used in loadbalancing algorithm
	Weight pulumi.IntPtrOutput `pulumi:"weight"`
}

// NewIPLoadbalancingHTTPFarmServer registers a new resource with the given unique name, arguments, and options.
func NewIPLoadbalancingHTTPFarmServer(ctx *pulumi.Context,
	name string, args *IPLoadbalancingHTTPFarmServerArgs, opts ...pulumi.ResourceOption) (*IPLoadbalancingHTTPFarmServer, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Address == nil {
		return nil, errors.New("invalid value for required argument 'Address'")
	}
	if args.FarmId == nil {
		return nil, errors.New("invalid value for required argument 'FarmId'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	if args.Status == nil {
		return nil, errors.New("invalid value for required argument 'Status'")
	}
	var resource IPLoadbalancingHTTPFarmServer
	err := ctx.RegisterResource("ovh:index/iPLoadbalancingHTTPFarmServer:IPLoadbalancingHTTPFarmServer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIPLoadbalancingHTTPFarmServer gets an existing IPLoadbalancingHTTPFarmServer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIPLoadbalancingHTTPFarmServer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IPLoadbalancingHTTPFarmServerState, opts ...pulumi.ResourceOption) (*IPLoadbalancingHTTPFarmServer, error) {
	var resource IPLoadbalancingHTTPFarmServer
	err := ctx.ReadResource("ovh:index/iPLoadbalancingHTTPFarmServer:IPLoadbalancingHTTPFarmServer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IPLoadbalancingHTTPFarmServer resources.
type iploadbalancingHTTPFarmServerState struct {
	// Address of the backend server (IP from either internal or OVH network)
	Address *string `pulumi:"address"`
	// is it a backup server used in case of failure of all the non-backup backends
	Backup *bool   `pulumi:"backup"`
	Chain  *string `pulumi:"chain"`
	// Value of the stickiness cookie used for this backend.
	Cookie *string `pulumi:"cookie"`
	// Label for the server
	DisplayName *string `pulumi:"displayName"`
	// ID of the farm this server is attached to
	FarmId *int `pulumi:"farmId"`
	// Port that backend will respond on
	Port *int `pulumi:"port"`
	// defines if backend will be probed to determine health and keep as active in farm if healthy
	Probe *bool `pulumi:"probe"`
	// version of the PROXY protocol used to pass origin connection information from loadbalancer to recieving service (`v1`, `v2`, `v2-ssl`, `v2-ssl-cn`)
	ProxyProtocolVersion *string `pulumi:"proxyProtocolVersion"`
	// The internal name of your IP load balancing
	ServiceName *string `pulumi:"serviceName"`
	// is the connection ciphered with SSL (TLS)
	Ssl *bool `pulumi:"ssl"`
	// backend status - `active` or `inactive`
	Status *string `pulumi:"status"`
	// used in loadbalancing algorithm
	Weight *int `pulumi:"weight"`
}

type IPLoadbalancingHTTPFarmServerState struct {
	// Address of the backend server (IP from either internal or OVH network)
	Address pulumi.StringPtrInput
	// is it a backup server used in case of failure of all the non-backup backends
	Backup pulumi.BoolPtrInput
	Chain  pulumi.StringPtrInput
	// Value of the stickiness cookie used for this backend.
	Cookie pulumi.StringPtrInput
	// Label for the server
	DisplayName pulumi.StringPtrInput
	// ID of the farm this server is attached to
	FarmId pulumi.IntPtrInput
	// Port that backend will respond on
	Port pulumi.IntPtrInput
	// defines if backend will be probed to determine health and keep as active in farm if healthy
	Probe pulumi.BoolPtrInput
	// version of the PROXY protocol used to pass origin connection information from loadbalancer to recieving service (`v1`, `v2`, `v2-ssl`, `v2-ssl-cn`)
	ProxyProtocolVersion pulumi.StringPtrInput
	// The internal name of your IP load balancing
	ServiceName pulumi.StringPtrInput
	// is the connection ciphered with SSL (TLS)
	Ssl pulumi.BoolPtrInput
	// backend status - `active` or `inactive`
	Status pulumi.StringPtrInput
	// used in loadbalancing algorithm
	Weight pulumi.IntPtrInput
}

func (IPLoadbalancingHTTPFarmServerState) ElementType() reflect.Type {
	return reflect.TypeOf((*iploadbalancingHTTPFarmServerState)(nil)).Elem()
}

type iploadbalancingHTTPFarmServerArgs struct {
	// Address of the backend server (IP from either internal or OVH network)
	Address string `pulumi:"address"`
	// is it a backup server used in case of failure of all the non-backup backends
	Backup *bool   `pulumi:"backup"`
	Chain  *string `pulumi:"chain"`
	// Label for the server
	DisplayName *string `pulumi:"displayName"`
	// ID of the farm this server is attached to
	FarmId int `pulumi:"farmId"`
	// Port that backend will respond on
	Port *int `pulumi:"port"`
	// defines if backend will be probed to determine health and keep as active in farm if healthy
	Probe *bool `pulumi:"probe"`
	// version of the PROXY protocol used to pass origin connection information from loadbalancer to recieving service (`v1`, `v2`, `v2-ssl`, `v2-ssl-cn`)
	ProxyProtocolVersion *string `pulumi:"proxyProtocolVersion"`
	// The internal name of your IP load balancing
	ServiceName string `pulumi:"serviceName"`
	// is the connection ciphered with SSL (TLS)
	Ssl *bool `pulumi:"ssl"`
	// backend status - `active` or `inactive`
	Status string `pulumi:"status"`
	// used in loadbalancing algorithm
	Weight *int `pulumi:"weight"`
}

// The set of arguments for constructing a IPLoadbalancingHTTPFarmServer resource.
type IPLoadbalancingHTTPFarmServerArgs struct {
	// Address of the backend server (IP from either internal or OVH network)
	Address pulumi.StringInput
	// is it a backup server used in case of failure of all the non-backup backends
	Backup pulumi.BoolPtrInput
	Chain  pulumi.StringPtrInput
	// Label for the server
	DisplayName pulumi.StringPtrInput
	// ID of the farm this server is attached to
	FarmId pulumi.IntInput
	// Port that backend will respond on
	Port pulumi.IntPtrInput
	// defines if backend will be probed to determine health and keep as active in farm if healthy
	Probe pulumi.BoolPtrInput
	// version of the PROXY protocol used to pass origin connection information from loadbalancer to recieving service (`v1`, `v2`, `v2-ssl`, `v2-ssl-cn`)
	ProxyProtocolVersion pulumi.StringPtrInput
	// The internal name of your IP load balancing
	ServiceName pulumi.StringInput
	// is the connection ciphered with SSL (TLS)
	Ssl pulumi.BoolPtrInput
	// backend status - `active` or `inactive`
	Status pulumi.StringInput
	// used in loadbalancing algorithm
	Weight pulumi.IntPtrInput
}

func (IPLoadbalancingHTTPFarmServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*iploadbalancingHTTPFarmServerArgs)(nil)).Elem()
}

type IPLoadbalancingHTTPFarmServerInput interface {
	pulumi.Input

	ToIPLoadbalancingHTTPFarmServerOutput() IPLoadbalancingHTTPFarmServerOutput
	ToIPLoadbalancingHTTPFarmServerOutputWithContext(ctx context.Context) IPLoadbalancingHTTPFarmServerOutput
}

func (*IPLoadbalancingHTTPFarmServer) ElementType() reflect.Type {
	return reflect.TypeOf((**IPLoadbalancingHTTPFarmServer)(nil)).Elem()
}

func (i *IPLoadbalancingHTTPFarmServer) ToIPLoadbalancingHTTPFarmServerOutput() IPLoadbalancingHTTPFarmServerOutput {
	return i.ToIPLoadbalancingHTTPFarmServerOutputWithContext(context.Background())
}

func (i *IPLoadbalancingHTTPFarmServer) ToIPLoadbalancingHTTPFarmServerOutputWithContext(ctx context.Context) IPLoadbalancingHTTPFarmServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPLoadbalancingHTTPFarmServerOutput)
}

// IPLoadbalancingHTTPFarmServerArrayInput is an input type that accepts IPLoadbalancingHTTPFarmServerArray and IPLoadbalancingHTTPFarmServerArrayOutput values.
// You can construct a concrete instance of `IPLoadbalancingHTTPFarmServerArrayInput` via:
//
//          IPLoadbalancingHTTPFarmServerArray{ IPLoadbalancingHTTPFarmServerArgs{...} }
type IPLoadbalancingHTTPFarmServerArrayInput interface {
	pulumi.Input

	ToIPLoadbalancingHTTPFarmServerArrayOutput() IPLoadbalancingHTTPFarmServerArrayOutput
	ToIPLoadbalancingHTTPFarmServerArrayOutputWithContext(context.Context) IPLoadbalancingHTTPFarmServerArrayOutput
}

type IPLoadbalancingHTTPFarmServerArray []IPLoadbalancingHTTPFarmServerInput

func (IPLoadbalancingHTTPFarmServerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IPLoadbalancingHTTPFarmServer)(nil)).Elem()
}

func (i IPLoadbalancingHTTPFarmServerArray) ToIPLoadbalancingHTTPFarmServerArrayOutput() IPLoadbalancingHTTPFarmServerArrayOutput {
	return i.ToIPLoadbalancingHTTPFarmServerArrayOutputWithContext(context.Background())
}

func (i IPLoadbalancingHTTPFarmServerArray) ToIPLoadbalancingHTTPFarmServerArrayOutputWithContext(ctx context.Context) IPLoadbalancingHTTPFarmServerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPLoadbalancingHTTPFarmServerArrayOutput)
}

// IPLoadbalancingHTTPFarmServerMapInput is an input type that accepts IPLoadbalancingHTTPFarmServerMap and IPLoadbalancingHTTPFarmServerMapOutput values.
// You can construct a concrete instance of `IPLoadbalancingHTTPFarmServerMapInput` via:
//
//          IPLoadbalancingHTTPFarmServerMap{ "key": IPLoadbalancingHTTPFarmServerArgs{...} }
type IPLoadbalancingHTTPFarmServerMapInput interface {
	pulumi.Input

	ToIPLoadbalancingHTTPFarmServerMapOutput() IPLoadbalancingHTTPFarmServerMapOutput
	ToIPLoadbalancingHTTPFarmServerMapOutputWithContext(context.Context) IPLoadbalancingHTTPFarmServerMapOutput
}

type IPLoadbalancingHTTPFarmServerMap map[string]IPLoadbalancingHTTPFarmServerInput

func (IPLoadbalancingHTTPFarmServerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IPLoadbalancingHTTPFarmServer)(nil)).Elem()
}

func (i IPLoadbalancingHTTPFarmServerMap) ToIPLoadbalancingHTTPFarmServerMapOutput() IPLoadbalancingHTTPFarmServerMapOutput {
	return i.ToIPLoadbalancingHTTPFarmServerMapOutputWithContext(context.Background())
}

func (i IPLoadbalancingHTTPFarmServerMap) ToIPLoadbalancingHTTPFarmServerMapOutputWithContext(ctx context.Context) IPLoadbalancingHTTPFarmServerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPLoadbalancingHTTPFarmServerMapOutput)
}

type IPLoadbalancingHTTPFarmServerOutput struct{ *pulumi.OutputState }

func (IPLoadbalancingHTTPFarmServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IPLoadbalancingHTTPFarmServer)(nil)).Elem()
}

func (o IPLoadbalancingHTTPFarmServerOutput) ToIPLoadbalancingHTTPFarmServerOutput() IPLoadbalancingHTTPFarmServerOutput {
	return o
}

func (o IPLoadbalancingHTTPFarmServerOutput) ToIPLoadbalancingHTTPFarmServerOutputWithContext(ctx context.Context) IPLoadbalancingHTTPFarmServerOutput {
	return o
}

type IPLoadbalancingHTTPFarmServerArrayOutput struct{ *pulumi.OutputState }

func (IPLoadbalancingHTTPFarmServerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IPLoadbalancingHTTPFarmServer)(nil)).Elem()
}

func (o IPLoadbalancingHTTPFarmServerArrayOutput) ToIPLoadbalancingHTTPFarmServerArrayOutput() IPLoadbalancingHTTPFarmServerArrayOutput {
	return o
}

func (o IPLoadbalancingHTTPFarmServerArrayOutput) ToIPLoadbalancingHTTPFarmServerArrayOutputWithContext(ctx context.Context) IPLoadbalancingHTTPFarmServerArrayOutput {
	return o
}

func (o IPLoadbalancingHTTPFarmServerArrayOutput) Index(i pulumi.IntInput) IPLoadbalancingHTTPFarmServerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IPLoadbalancingHTTPFarmServer {
		return vs[0].([]*IPLoadbalancingHTTPFarmServer)[vs[1].(int)]
	}).(IPLoadbalancingHTTPFarmServerOutput)
}

type IPLoadbalancingHTTPFarmServerMapOutput struct{ *pulumi.OutputState }

func (IPLoadbalancingHTTPFarmServerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IPLoadbalancingHTTPFarmServer)(nil)).Elem()
}

func (o IPLoadbalancingHTTPFarmServerMapOutput) ToIPLoadbalancingHTTPFarmServerMapOutput() IPLoadbalancingHTTPFarmServerMapOutput {
	return o
}

func (o IPLoadbalancingHTTPFarmServerMapOutput) ToIPLoadbalancingHTTPFarmServerMapOutputWithContext(ctx context.Context) IPLoadbalancingHTTPFarmServerMapOutput {
	return o
}

func (o IPLoadbalancingHTTPFarmServerMapOutput) MapIndex(k pulumi.StringInput) IPLoadbalancingHTTPFarmServerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IPLoadbalancingHTTPFarmServer {
		return vs[0].(map[string]*IPLoadbalancingHTTPFarmServer)[vs[1].(string)]
	}).(IPLoadbalancingHTTPFarmServerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IPLoadbalancingHTTPFarmServerInput)(nil)).Elem(), &IPLoadbalancingHTTPFarmServer{})
	pulumi.RegisterInputType(reflect.TypeOf((*IPLoadbalancingHTTPFarmServerArrayInput)(nil)).Elem(), IPLoadbalancingHTTPFarmServerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IPLoadbalancingHTTPFarmServerMapInput)(nil)).Elem(), IPLoadbalancingHTTPFarmServerMap{})
	pulumi.RegisterOutputType(IPLoadbalancingHTTPFarmServerOutput{})
	pulumi.RegisterOutputType(IPLoadbalancingHTTPFarmServerArrayOutput{})
	pulumi.RegisterOutputType(IPLoadbalancingHTTPFarmServerMapOutput{})
}
