// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ovh

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a http backend server group (farm) to be used by loadbalancing frontend(s)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-ovh/sdk/go/ovh"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		lb, err := ovh.GetIPLoadbalancing(ctx, &GetIPLoadbalancingArgs{
// 			ServiceName: pulumi.StringRef("ip-1.2.3.4"),
// 			State:       pulumi.StringRef("ok"),
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		_, err = ovh.NewIPLoadbalancingHTTPFarm(ctx, "farmname", &ovh.IPLoadbalancingHTTPFarmArgs{
// 			DisplayName: pulumi.String("ingress-8080-gra"),
// 			ServiceName: pulumi.String(lb.Id),
// 			Zone:        pulumi.String("GRA"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type IPLoadbalancingHTTPFarm struct {
	pulumi.CustomResourceState

	// Load balancing algorithm. `roundrobin` if null (`first`, `leastconn`, `roundrobin`, `source`)
	Balance pulumi.StringPtrOutput `pulumi:"balance"`
	// Readable label for loadbalancer farm
	DisplayName pulumi.StringPtrOutput `pulumi:"displayName"`
	// Port for backends to recieve traffic on.
	Port pulumi.IntPtrOutput `pulumi:"port"`
	// define a backend healthcheck probe
	Probe IPLoadbalancingHTTPFarmProbePtrOutput `pulumi:"probe"`
	// The internal name of your IP load balancing
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
	// Stickiness type. No stickiness if null (`sourceIp`, `cookie`)
	Stickiness pulumi.StringPtrOutput `pulumi:"stickiness"`
	// Internal Load Balancer identifier of the vRack private network to attach to your farm, mandatory when your Load Balancer is attached to a vRack
	VrackNetworkId pulumi.IntPtrOutput `pulumi:"vrackNetworkId"`
	// Zone where the farm will be defined (ie. `GRA`, `BHS` also supports `ALL`)
	Zone pulumi.StringOutput `pulumi:"zone"`
}

// NewIPLoadbalancingHTTPFarm registers a new resource with the given unique name, arguments, and options.
func NewIPLoadbalancingHTTPFarm(ctx *pulumi.Context,
	name string, args *IPLoadbalancingHTTPFarmArgs, opts ...pulumi.ResourceOption) (*IPLoadbalancingHTTPFarm, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	if args.Zone == nil {
		return nil, errors.New("invalid value for required argument 'Zone'")
	}
	var resource IPLoadbalancingHTTPFarm
	err := ctx.RegisterResource("ovh:index/iPLoadbalancingHTTPFarm:IPLoadbalancingHTTPFarm", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIPLoadbalancingHTTPFarm gets an existing IPLoadbalancingHTTPFarm resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIPLoadbalancingHTTPFarm(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IPLoadbalancingHTTPFarmState, opts ...pulumi.ResourceOption) (*IPLoadbalancingHTTPFarm, error) {
	var resource IPLoadbalancingHTTPFarm
	err := ctx.ReadResource("ovh:index/iPLoadbalancingHTTPFarm:IPLoadbalancingHTTPFarm", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IPLoadbalancingHTTPFarm resources.
type iploadbalancingHTTPFarmState struct {
	// Load balancing algorithm. `roundrobin` if null (`first`, `leastconn`, `roundrobin`, `source`)
	Balance *string `pulumi:"balance"`
	// Readable label for loadbalancer farm
	DisplayName *string `pulumi:"displayName"`
	// Port for backends to recieve traffic on.
	Port *int `pulumi:"port"`
	// define a backend healthcheck probe
	Probe *IPLoadbalancingHTTPFarmProbe `pulumi:"probe"`
	// The internal name of your IP load balancing
	ServiceName *string `pulumi:"serviceName"`
	// Stickiness type. No stickiness if null (`sourceIp`, `cookie`)
	Stickiness *string `pulumi:"stickiness"`
	// Internal Load Balancer identifier of the vRack private network to attach to your farm, mandatory when your Load Balancer is attached to a vRack
	VrackNetworkId *int `pulumi:"vrackNetworkId"`
	// Zone where the farm will be defined (ie. `GRA`, `BHS` also supports `ALL`)
	Zone *string `pulumi:"zone"`
}

type IPLoadbalancingHTTPFarmState struct {
	// Load balancing algorithm. `roundrobin` if null (`first`, `leastconn`, `roundrobin`, `source`)
	Balance pulumi.StringPtrInput
	// Readable label for loadbalancer farm
	DisplayName pulumi.StringPtrInput
	// Port for backends to recieve traffic on.
	Port pulumi.IntPtrInput
	// define a backend healthcheck probe
	Probe IPLoadbalancingHTTPFarmProbePtrInput
	// The internal name of your IP load balancing
	ServiceName pulumi.StringPtrInput
	// Stickiness type. No stickiness if null (`sourceIp`, `cookie`)
	Stickiness pulumi.StringPtrInput
	// Internal Load Balancer identifier of the vRack private network to attach to your farm, mandatory when your Load Balancer is attached to a vRack
	VrackNetworkId pulumi.IntPtrInput
	// Zone where the farm will be defined (ie. `GRA`, `BHS` also supports `ALL`)
	Zone pulumi.StringPtrInput
}

func (IPLoadbalancingHTTPFarmState) ElementType() reflect.Type {
	return reflect.TypeOf((*iploadbalancingHTTPFarmState)(nil)).Elem()
}

type iploadbalancingHTTPFarmArgs struct {
	// Load balancing algorithm. `roundrobin` if null (`first`, `leastconn`, `roundrobin`, `source`)
	Balance *string `pulumi:"balance"`
	// Readable label for loadbalancer farm
	DisplayName *string `pulumi:"displayName"`
	// Port for backends to recieve traffic on.
	Port *int `pulumi:"port"`
	// define a backend healthcheck probe
	Probe *IPLoadbalancingHTTPFarmProbe `pulumi:"probe"`
	// The internal name of your IP load balancing
	ServiceName string `pulumi:"serviceName"`
	// Stickiness type. No stickiness if null (`sourceIp`, `cookie`)
	Stickiness *string `pulumi:"stickiness"`
	// Internal Load Balancer identifier of the vRack private network to attach to your farm, mandatory when your Load Balancer is attached to a vRack
	VrackNetworkId *int `pulumi:"vrackNetworkId"`
	// Zone where the farm will be defined (ie. `GRA`, `BHS` also supports `ALL`)
	Zone string `pulumi:"zone"`
}

// The set of arguments for constructing a IPLoadbalancingHTTPFarm resource.
type IPLoadbalancingHTTPFarmArgs struct {
	// Load balancing algorithm. `roundrobin` if null (`first`, `leastconn`, `roundrobin`, `source`)
	Balance pulumi.StringPtrInput
	// Readable label for loadbalancer farm
	DisplayName pulumi.StringPtrInput
	// Port for backends to recieve traffic on.
	Port pulumi.IntPtrInput
	// define a backend healthcheck probe
	Probe IPLoadbalancingHTTPFarmProbePtrInput
	// The internal name of your IP load balancing
	ServiceName pulumi.StringInput
	// Stickiness type. No stickiness if null (`sourceIp`, `cookie`)
	Stickiness pulumi.StringPtrInput
	// Internal Load Balancer identifier of the vRack private network to attach to your farm, mandatory when your Load Balancer is attached to a vRack
	VrackNetworkId pulumi.IntPtrInput
	// Zone where the farm will be defined (ie. `GRA`, `BHS` also supports `ALL`)
	Zone pulumi.StringInput
}

func (IPLoadbalancingHTTPFarmArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*iploadbalancingHTTPFarmArgs)(nil)).Elem()
}

type IPLoadbalancingHTTPFarmInput interface {
	pulumi.Input

	ToIPLoadbalancingHTTPFarmOutput() IPLoadbalancingHTTPFarmOutput
	ToIPLoadbalancingHTTPFarmOutputWithContext(ctx context.Context) IPLoadbalancingHTTPFarmOutput
}

func (*IPLoadbalancingHTTPFarm) ElementType() reflect.Type {
	return reflect.TypeOf((**IPLoadbalancingHTTPFarm)(nil)).Elem()
}

func (i *IPLoadbalancingHTTPFarm) ToIPLoadbalancingHTTPFarmOutput() IPLoadbalancingHTTPFarmOutput {
	return i.ToIPLoadbalancingHTTPFarmOutputWithContext(context.Background())
}

func (i *IPLoadbalancingHTTPFarm) ToIPLoadbalancingHTTPFarmOutputWithContext(ctx context.Context) IPLoadbalancingHTTPFarmOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPLoadbalancingHTTPFarmOutput)
}

// IPLoadbalancingHTTPFarmArrayInput is an input type that accepts IPLoadbalancingHTTPFarmArray and IPLoadbalancingHTTPFarmArrayOutput values.
// You can construct a concrete instance of `IPLoadbalancingHTTPFarmArrayInput` via:
//
//          IPLoadbalancingHTTPFarmArray{ IPLoadbalancingHTTPFarmArgs{...} }
type IPLoadbalancingHTTPFarmArrayInput interface {
	pulumi.Input

	ToIPLoadbalancingHTTPFarmArrayOutput() IPLoadbalancingHTTPFarmArrayOutput
	ToIPLoadbalancingHTTPFarmArrayOutputWithContext(context.Context) IPLoadbalancingHTTPFarmArrayOutput
}

type IPLoadbalancingHTTPFarmArray []IPLoadbalancingHTTPFarmInput

func (IPLoadbalancingHTTPFarmArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IPLoadbalancingHTTPFarm)(nil)).Elem()
}

func (i IPLoadbalancingHTTPFarmArray) ToIPLoadbalancingHTTPFarmArrayOutput() IPLoadbalancingHTTPFarmArrayOutput {
	return i.ToIPLoadbalancingHTTPFarmArrayOutputWithContext(context.Background())
}

func (i IPLoadbalancingHTTPFarmArray) ToIPLoadbalancingHTTPFarmArrayOutputWithContext(ctx context.Context) IPLoadbalancingHTTPFarmArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPLoadbalancingHTTPFarmArrayOutput)
}

// IPLoadbalancingHTTPFarmMapInput is an input type that accepts IPLoadbalancingHTTPFarmMap and IPLoadbalancingHTTPFarmMapOutput values.
// You can construct a concrete instance of `IPLoadbalancingHTTPFarmMapInput` via:
//
//          IPLoadbalancingHTTPFarmMap{ "key": IPLoadbalancingHTTPFarmArgs{...} }
type IPLoadbalancingHTTPFarmMapInput interface {
	pulumi.Input

	ToIPLoadbalancingHTTPFarmMapOutput() IPLoadbalancingHTTPFarmMapOutput
	ToIPLoadbalancingHTTPFarmMapOutputWithContext(context.Context) IPLoadbalancingHTTPFarmMapOutput
}

type IPLoadbalancingHTTPFarmMap map[string]IPLoadbalancingHTTPFarmInput

func (IPLoadbalancingHTTPFarmMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IPLoadbalancingHTTPFarm)(nil)).Elem()
}

func (i IPLoadbalancingHTTPFarmMap) ToIPLoadbalancingHTTPFarmMapOutput() IPLoadbalancingHTTPFarmMapOutput {
	return i.ToIPLoadbalancingHTTPFarmMapOutputWithContext(context.Background())
}

func (i IPLoadbalancingHTTPFarmMap) ToIPLoadbalancingHTTPFarmMapOutputWithContext(ctx context.Context) IPLoadbalancingHTTPFarmMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPLoadbalancingHTTPFarmMapOutput)
}

type IPLoadbalancingHTTPFarmOutput struct{ *pulumi.OutputState }

func (IPLoadbalancingHTTPFarmOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IPLoadbalancingHTTPFarm)(nil)).Elem()
}

func (o IPLoadbalancingHTTPFarmOutput) ToIPLoadbalancingHTTPFarmOutput() IPLoadbalancingHTTPFarmOutput {
	return o
}

func (o IPLoadbalancingHTTPFarmOutput) ToIPLoadbalancingHTTPFarmOutputWithContext(ctx context.Context) IPLoadbalancingHTTPFarmOutput {
	return o
}

type IPLoadbalancingHTTPFarmArrayOutput struct{ *pulumi.OutputState }

func (IPLoadbalancingHTTPFarmArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IPLoadbalancingHTTPFarm)(nil)).Elem()
}

func (o IPLoadbalancingHTTPFarmArrayOutput) ToIPLoadbalancingHTTPFarmArrayOutput() IPLoadbalancingHTTPFarmArrayOutput {
	return o
}

func (o IPLoadbalancingHTTPFarmArrayOutput) ToIPLoadbalancingHTTPFarmArrayOutputWithContext(ctx context.Context) IPLoadbalancingHTTPFarmArrayOutput {
	return o
}

func (o IPLoadbalancingHTTPFarmArrayOutput) Index(i pulumi.IntInput) IPLoadbalancingHTTPFarmOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IPLoadbalancingHTTPFarm {
		return vs[0].([]*IPLoadbalancingHTTPFarm)[vs[1].(int)]
	}).(IPLoadbalancingHTTPFarmOutput)
}

type IPLoadbalancingHTTPFarmMapOutput struct{ *pulumi.OutputState }

func (IPLoadbalancingHTTPFarmMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IPLoadbalancingHTTPFarm)(nil)).Elem()
}

func (o IPLoadbalancingHTTPFarmMapOutput) ToIPLoadbalancingHTTPFarmMapOutput() IPLoadbalancingHTTPFarmMapOutput {
	return o
}

func (o IPLoadbalancingHTTPFarmMapOutput) ToIPLoadbalancingHTTPFarmMapOutputWithContext(ctx context.Context) IPLoadbalancingHTTPFarmMapOutput {
	return o
}

func (o IPLoadbalancingHTTPFarmMapOutput) MapIndex(k pulumi.StringInput) IPLoadbalancingHTTPFarmOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IPLoadbalancingHTTPFarm {
		return vs[0].(map[string]*IPLoadbalancingHTTPFarm)[vs[1].(string)]
	}).(IPLoadbalancingHTTPFarmOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IPLoadbalancingHTTPFarmInput)(nil)).Elem(), &IPLoadbalancingHTTPFarm{})
	pulumi.RegisterInputType(reflect.TypeOf((*IPLoadbalancingHTTPFarmArrayInput)(nil)).Elem(), IPLoadbalancingHTTPFarmArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IPLoadbalancingHTTPFarmMapInput)(nil)).Elem(), IPLoadbalancingHTTPFarmMap{})
	pulumi.RegisterOutputType(IPLoadbalancingHTTPFarmOutput{})
	pulumi.RegisterOutputType(IPLoadbalancingHTTPFarmArrayOutput{})
	pulumi.RegisterOutputType(IPLoadbalancingHTTPFarmMapOutput{})
}
