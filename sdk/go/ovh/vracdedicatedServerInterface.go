// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ovh

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Attach a Dedicated Server Network Interface to a VRack.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-ovh/sdk/go/ovh"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := ovh.NewVRACDedicatedServerInterface(ctx, "vdsi", &ovh.VRACDedicatedServerInterfaceArgs{
// 			InterfaceId: pulumi.String("67890"),
// 			VrackId:     pulumi.String("12345"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type VRACDedicatedServerInterface struct {
	pulumi.CustomResourceState

	// The id of dedicated server network interface.
	InterfaceId pulumi.StringOutput `pulumi:"interfaceId"`
	// The id of the vrack.
	VrackId pulumi.StringOutput `pulumi:"vrackId"`
}

// NewVRACDedicatedServerInterface registers a new resource with the given unique name, arguments, and options.
func NewVRACDedicatedServerInterface(ctx *pulumi.Context,
	name string, args *VRACDedicatedServerInterfaceArgs, opts ...pulumi.ResourceOption) (*VRACDedicatedServerInterface, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InterfaceId == nil {
		return nil, errors.New("invalid value for required argument 'InterfaceId'")
	}
	if args.VrackId == nil {
		return nil, errors.New("invalid value for required argument 'VrackId'")
	}
	var resource VRACDedicatedServerInterface
	err := ctx.RegisterResource("ovh:index/vRACDedicatedServerInterface:VRACDedicatedServerInterface", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVRACDedicatedServerInterface gets an existing VRACDedicatedServerInterface resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVRACDedicatedServerInterface(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VRACDedicatedServerInterfaceState, opts ...pulumi.ResourceOption) (*VRACDedicatedServerInterface, error) {
	var resource VRACDedicatedServerInterface
	err := ctx.ReadResource("ovh:index/vRACDedicatedServerInterface:VRACDedicatedServerInterface", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VRACDedicatedServerInterface resources.
type vracdedicatedServerInterfaceState struct {
	// The id of dedicated server network interface.
	InterfaceId *string `pulumi:"interfaceId"`
	// The id of the vrack.
	VrackId *string `pulumi:"vrackId"`
}

type VRACDedicatedServerInterfaceState struct {
	// The id of dedicated server network interface.
	InterfaceId pulumi.StringPtrInput
	// The id of the vrack.
	VrackId pulumi.StringPtrInput
}

func (VRACDedicatedServerInterfaceState) ElementType() reflect.Type {
	return reflect.TypeOf((*vracdedicatedServerInterfaceState)(nil)).Elem()
}

type vracdedicatedServerInterfaceArgs struct {
	// The id of dedicated server network interface.
	InterfaceId string `pulumi:"interfaceId"`
	// The id of the vrack.
	VrackId string `pulumi:"vrackId"`
}

// The set of arguments for constructing a VRACDedicatedServerInterface resource.
type VRACDedicatedServerInterfaceArgs struct {
	// The id of dedicated server network interface.
	InterfaceId pulumi.StringInput
	// The id of the vrack.
	VrackId pulumi.StringInput
}

func (VRACDedicatedServerInterfaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vracdedicatedServerInterfaceArgs)(nil)).Elem()
}

type VRACDedicatedServerInterfaceInput interface {
	pulumi.Input

	ToVRACDedicatedServerInterfaceOutput() VRACDedicatedServerInterfaceOutput
	ToVRACDedicatedServerInterfaceOutputWithContext(ctx context.Context) VRACDedicatedServerInterfaceOutput
}

func (*VRACDedicatedServerInterface) ElementType() reflect.Type {
	return reflect.TypeOf((**VRACDedicatedServerInterface)(nil)).Elem()
}

func (i *VRACDedicatedServerInterface) ToVRACDedicatedServerInterfaceOutput() VRACDedicatedServerInterfaceOutput {
	return i.ToVRACDedicatedServerInterfaceOutputWithContext(context.Background())
}

func (i *VRACDedicatedServerInterface) ToVRACDedicatedServerInterfaceOutputWithContext(ctx context.Context) VRACDedicatedServerInterfaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VRACDedicatedServerInterfaceOutput)
}

// VRACDedicatedServerInterfaceArrayInput is an input type that accepts VRACDedicatedServerInterfaceArray and VRACDedicatedServerInterfaceArrayOutput values.
// You can construct a concrete instance of `VRACDedicatedServerInterfaceArrayInput` via:
//
//          VRACDedicatedServerInterfaceArray{ VRACDedicatedServerInterfaceArgs{...} }
type VRACDedicatedServerInterfaceArrayInput interface {
	pulumi.Input

	ToVRACDedicatedServerInterfaceArrayOutput() VRACDedicatedServerInterfaceArrayOutput
	ToVRACDedicatedServerInterfaceArrayOutputWithContext(context.Context) VRACDedicatedServerInterfaceArrayOutput
}

type VRACDedicatedServerInterfaceArray []VRACDedicatedServerInterfaceInput

func (VRACDedicatedServerInterfaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VRACDedicatedServerInterface)(nil)).Elem()
}

func (i VRACDedicatedServerInterfaceArray) ToVRACDedicatedServerInterfaceArrayOutput() VRACDedicatedServerInterfaceArrayOutput {
	return i.ToVRACDedicatedServerInterfaceArrayOutputWithContext(context.Background())
}

func (i VRACDedicatedServerInterfaceArray) ToVRACDedicatedServerInterfaceArrayOutputWithContext(ctx context.Context) VRACDedicatedServerInterfaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VRACDedicatedServerInterfaceArrayOutput)
}

// VRACDedicatedServerInterfaceMapInput is an input type that accepts VRACDedicatedServerInterfaceMap and VRACDedicatedServerInterfaceMapOutput values.
// You can construct a concrete instance of `VRACDedicatedServerInterfaceMapInput` via:
//
//          VRACDedicatedServerInterfaceMap{ "key": VRACDedicatedServerInterfaceArgs{...} }
type VRACDedicatedServerInterfaceMapInput interface {
	pulumi.Input

	ToVRACDedicatedServerInterfaceMapOutput() VRACDedicatedServerInterfaceMapOutput
	ToVRACDedicatedServerInterfaceMapOutputWithContext(context.Context) VRACDedicatedServerInterfaceMapOutput
}

type VRACDedicatedServerInterfaceMap map[string]VRACDedicatedServerInterfaceInput

func (VRACDedicatedServerInterfaceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VRACDedicatedServerInterface)(nil)).Elem()
}

func (i VRACDedicatedServerInterfaceMap) ToVRACDedicatedServerInterfaceMapOutput() VRACDedicatedServerInterfaceMapOutput {
	return i.ToVRACDedicatedServerInterfaceMapOutputWithContext(context.Background())
}

func (i VRACDedicatedServerInterfaceMap) ToVRACDedicatedServerInterfaceMapOutputWithContext(ctx context.Context) VRACDedicatedServerInterfaceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VRACDedicatedServerInterfaceMapOutput)
}

type VRACDedicatedServerInterfaceOutput struct{ *pulumi.OutputState }

func (VRACDedicatedServerInterfaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VRACDedicatedServerInterface)(nil)).Elem()
}

func (o VRACDedicatedServerInterfaceOutput) ToVRACDedicatedServerInterfaceOutput() VRACDedicatedServerInterfaceOutput {
	return o
}

func (o VRACDedicatedServerInterfaceOutput) ToVRACDedicatedServerInterfaceOutputWithContext(ctx context.Context) VRACDedicatedServerInterfaceOutput {
	return o
}

type VRACDedicatedServerInterfaceArrayOutput struct{ *pulumi.OutputState }

func (VRACDedicatedServerInterfaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VRACDedicatedServerInterface)(nil)).Elem()
}

func (o VRACDedicatedServerInterfaceArrayOutput) ToVRACDedicatedServerInterfaceArrayOutput() VRACDedicatedServerInterfaceArrayOutput {
	return o
}

func (o VRACDedicatedServerInterfaceArrayOutput) ToVRACDedicatedServerInterfaceArrayOutputWithContext(ctx context.Context) VRACDedicatedServerInterfaceArrayOutput {
	return o
}

func (o VRACDedicatedServerInterfaceArrayOutput) Index(i pulumi.IntInput) VRACDedicatedServerInterfaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VRACDedicatedServerInterface {
		return vs[0].([]*VRACDedicatedServerInterface)[vs[1].(int)]
	}).(VRACDedicatedServerInterfaceOutput)
}

type VRACDedicatedServerInterfaceMapOutput struct{ *pulumi.OutputState }

func (VRACDedicatedServerInterfaceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VRACDedicatedServerInterface)(nil)).Elem()
}

func (o VRACDedicatedServerInterfaceMapOutput) ToVRACDedicatedServerInterfaceMapOutput() VRACDedicatedServerInterfaceMapOutput {
	return o
}

func (o VRACDedicatedServerInterfaceMapOutput) ToVRACDedicatedServerInterfaceMapOutputWithContext(ctx context.Context) VRACDedicatedServerInterfaceMapOutput {
	return o
}

func (o VRACDedicatedServerInterfaceMapOutput) MapIndex(k pulumi.StringInput) VRACDedicatedServerInterfaceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VRACDedicatedServerInterface {
		return vs[0].(map[string]*VRACDedicatedServerInterface)[vs[1].(string)]
	}).(VRACDedicatedServerInterfaceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VRACDedicatedServerInterfaceInput)(nil)).Elem(), &VRACDedicatedServerInterface{})
	pulumi.RegisterInputType(reflect.TypeOf((*VRACDedicatedServerInterfaceArrayInput)(nil)).Elem(), VRACDedicatedServerInterfaceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VRACDedicatedServerInterfaceMapInput)(nil)).Elem(), VRACDedicatedServerInterfaceMap{})
	pulumi.RegisterOutputType(VRACDedicatedServerInterfaceOutput{})
	pulumi.RegisterOutputType(VRACDedicatedServerInterfaceArrayOutput{})
	pulumi.RegisterOutputType(VRACDedicatedServerInterfaceMapOutput{})
}
