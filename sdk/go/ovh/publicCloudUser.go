// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ovh

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// > __DEPRECATED:__ Use `CloudUser` instead.
//
// Creates a user in a public cloud project.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-ovh/sdk/go/ovh"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := ovh.NewPublicCloudUser(ctx, "user1", &ovh.PublicCloudUserArgs{
// 			ProjectId: pulumi.String("67890"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type PublicCloudUser struct {
	pulumi.CustomResourceState

	// the date the user was created.
	CreationDate pulumi.StringOutput `pulumi:"creationDate"`
	// A description associated with the user.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// a convenient map representing an openstackRc file.
	// Note: no password nor sensitive token is set in this map.
	OpenstackRc pulumi.MapOutput `pulumi:"openstackRc"`
	// (Sensitive) the password generated for the user. The password can
	// be used with the Openstack API. This attribute is sensitive and will only be
	// retrieve once during creation.
	Password pulumi.StringOutput `pulumi:"password"`
	// The id of the public cloud project. If omitted,
	// the `OVH_PROJECT_ID` environment variable is used.
	ProjectId pulumi.StringPtrOutput         `pulumi:"projectId"`
	RoleName  pulumi.StringPtrOutput         `pulumi:"roleName"`
	RoleNames pulumi.StringArrayOutput       `pulumi:"roleNames"`
	Roles     PublicCloudUserRoleArrayOutput `pulumi:"roles"`
	// Service name of the resource representing the id of the cloud project.
	ServiceName pulumi.StringPtrOutput `pulumi:"serviceName"`
	// the status of the user. should be normally set to 'ok'.
	Status pulumi.StringOutput `pulumi:"status"`
	// the username generated for the user. This username can be used with
	// the Openstack API.
	Username pulumi.StringOutput `pulumi:"username"`
}

// NewPublicCloudUser registers a new resource with the given unique name, arguments, and options.
func NewPublicCloudUser(ctx *pulumi.Context,
	name string, args *PublicCloudUserArgs, opts ...pulumi.ResourceOption) (*PublicCloudUser, error) {
	if args == nil {
		args = &PublicCloudUserArgs{}
	}

	var resource PublicCloudUser
	err := ctx.RegisterResource("ovh:index/publicCloudUser:PublicCloudUser", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPublicCloudUser gets an existing PublicCloudUser resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPublicCloudUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PublicCloudUserState, opts ...pulumi.ResourceOption) (*PublicCloudUser, error) {
	var resource PublicCloudUser
	err := ctx.ReadResource("ovh:index/publicCloudUser:PublicCloudUser", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PublicCloudUser resources.
type publicCloudUserState struct {
	// the date the user was created.
	CreationDate *string `pulumi:"creationDate"`
	// A description associated with the user.
	Description *string `pulumi:"description"`
	// a convenient map representing an openstackRc file.
	// Note: no password nor sensitive token is set in this map.
	OpenstackRc map[string]interface{} `pulumi:"openstackRc"`
	// (Sensitive) the password generated for the user. The password can
	// be used with the Openstack API. This attribute is sensitive and will only be
	// retrieve once during creation.
	Password *string `pulumi:"password"`
	// The id of the public cloud project. If omitted,
	// the `OVH_PROJECT_ID` environment variable is used.
	ProjectId *string               `pulumi:"projectId"`
	RoleName  *string               `pulumi:"roleName"`
	RoleNames []string              `pulumi:"roleNames"`
	Roles     []PublicCloudUserRole `pulumi:"roles"`
	// Service name of the resource representing the id of the cloud project.
	ServiceName *string `pulumi:"serviceName"`
	// the status of the user. should be normally set to 'ok'.
	Status *string `pulumi:"status"`
	// the username generated for the user. This username can be used with
	// the Openstack API.
	Username *string `pulumi:"username"`
}

type PublicCloudUserState struct {
	// the date the user was created.
	CreationDate pulumi.StringPtrInput
	// A description associated with the user.
	Description pulumi.StringPtrInput
	// a convenient map representing an openstackRc file.
	// Note: no password nor sensitive token is set in this map.
	OpenstackRc pulumi.MapInput
	// (Sensitive) the password generated for the user. The password can
	// be used with the Openstack API. This attribute is sensitive and will only be
	// retrieve once during creation.
	Password pulumi.StringPtrInput
	// The id of the public cloud project. If omitted,
	// the `OVH_PROJECT_ID` environment variable is used.
	ProjectId pulumi.StringPtrInput
	RoleName  pulumi.StringPtrInput
	RoleNames pulumi.StringArrayInput
	Roles     PublicCloudUserRoleArrayInput
	// Service name of the resource representing the id of the cloud project.
	ServiceName pulumi.StringPtrInput
	// the status of the user. should be normally set to 'ok'.
	Status pulumi.StringPtrInput
	// the username generated for the user. This username can be used with
	// the Openstack API.
	Username pulumi.StringPtrInput
}

func (PublicCloudUserState) ElementType() reflect.Type {
	return reflect.TypeOf((*publicCloudUserState)(nil)).Elem()
}

type publicCloudUserArgs struct {
	// A description associated with the user.
	Description *string `pulumi:"description"`
	// a convenient map representing an openstackRc file.
	// Note: no password nor sensitive token is set in this map.
	OpenstackRc map[string]interface{} `pulumi:"openstackRc"`
	// The id of the public cloud project. If omitted,
	// the `OVH_PROJECT_ID` environment variable is used.
	ProjectId *string  `pulumi:"projectId"`
	RoleName  *string  `pulumi:"roleName"`
	RoleNames []string `pulumi:"roleNames"`
	// Service name of the resource representing the id of the cloud project.
	ServiceName *string `pulumi:"serviceName"`
}

// The set of arguments for constructing a PublicCloudUser resource.
type PublicCloudUserArgs struct {
	// A description associated with the user.
	Description pulumi.StringPtrInput
	// a convenient map representing an openstackRc file.
	// Note: no password nor sensitive token is set in this map.
	OpenstackRc pulumi.MapInput
	// The id of the public cloud project. If omitted,
	// the `OVH_PROJECT_ID` environment variable is used.
	ProjectId pulumi.StringPtrInput
	RoleName  pulumi.StringPtrInput
	RoleNames pulumi.StringArrayInput
	// Service name of the resource representing the id of the cloud project.
	ServiceName pulumi.StringPtrInput
}

func (PublicCloudUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*publicCloudUserArgs)(nil)).Elem()
}

type PublicCloudUserInput interface {
	pulumi.Input

	ToPublicCloudUserOutput() PublicCloudUserOutput
	ToPublicCloudUserOutputWithContext(ctx context.Context) PublicCloudUserOutput
}

func (*PublicCloudUser) ElementType() reflect.Type {
	return reflect.TypeOf((**PublicCloudUser)(nil)).Elem()
}

func (i *PublicCloudUser) ToPublicCloudUserOutput() PublicCloudUserOutput {
	return i.ToPublicCloudUserOutputWithContext(context.Background())
}

func (i *PublicCloudUser) ToPublicCloudUserOutputWithContext(ctx context.Context) PublicCloudUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublicCloudUserOutput)
}

// PublicCloudUserArrayInput is an input type that accepts PublicCloudUserArray and PublicCloudUserArrayOutput values.
// You can construct a concrete instance of `PublicCloudUserArrayInput` via:
//
//          PublicCloudUserArray{ PublicCloudUserArgs{...} }
type PublicCloudUserArrayInput interface {
	pulumi.Input

	ToPublicCloudUserArrayOutput() PublicCloudUserArrayOutput
	ToPublicCloudUserArrayOutputWithContext(context.Context) PublicCloudUserArrayOutput
}

type PublicCloudUserArray []PublicCloudUserInput

func (PublicCloudUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PublicCloudUser)(nil)).Elem()
}

func (i PublicCloudUserArray) ToPublicCloudUserArrayOutput() PublicCloudUserArrayOutput {
	return i.ToPublicCloudUserArrayOutputWithContext(context.Background())
}

func (i PublicCloudUserArray) ToPublicCloudUserArrayOutputWithContext(ctx context.Context) PublicCloudUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublicCloudUserArrayOutput)
}

// PublicCloudUserMapInput is an input type that accepts PublicCloudUserMap and PublicCloudUserMapOutput values.
// You can construct a concrete instance of `PublicCloudUserMapInput` via:
//
//          PublicCloudUserMap{ "key": PublicCloudUserArgs{...} }
type PublicCloudUserMapInput interface {
	pulumi.Input

	ToPublicCloudUserMapOutput() PublicCloudUserMapOutput
	ToPublicCloudUserMapOutputWithContext(context.Context) PublicCloudUserMapOutput
}

type PublicCloudUserMap map[string]PublicCloudUserInput

func (PublicCloudUserMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PublicCloudUser)(nil)).Elem()
}

func (i PublicCloudUserMap) ToPublicCloudUserMapOutput() PublicCloudUserMapOutput {
	return i.ToPublicCloudUserMapOutputWithContext(context.Background())
}

func (i PublicCloudUserMap) ToPublicCloudUserMapOutputWithContext(ctx context.Context) PublicCloudUserMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublicCloudUserMapOutput)
}

type PublicCloudUserOutput struct{ *pulumi.OutputState }

func (PublicCloudUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PublicCloudUser)(nil)).Elem()
}

func (o PublicCloudUserOutput) ToPublicCloudUserOutput() PublicCloudUserOutput {
	return o
}

func (o PublicCloudUserOutput) ToPublicCloudUserOutputWithContext(ctx context.Context) PublicCloudUserOutput {
	return o
}

type PublicCloudUserArrayOutput struct{ *pulumi.OutputState }

func (PublicCloudUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PublicCloudUser)(nil)).Elem()
}

func (o PublicCloudUserArrayOutput) ToPublicCloudUserArrayOutput() PublicCloudUserArrayOutput {
	return o
}

func (o PublicCloudUserArrayOutput) ToPublicCloudUserArrayOutputWithContext(ctx context.Context) PublicCloudUserArrayOutput {
	return o
}

func (o PublicCloudUserArrayOutput) Index(i pulumi.IntInput) PublicCloudUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PublicCloudUser {
		return vs[0].([]*PublicCloudUser)[vs[1].(int)]
	}).(PublicCloudUserOutput)
}

type PublicCloudUserMapOutput struct{ *pulumi.OutputState }

func (PublicCloudUserMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PublicCloudUser)(nil)).Elem()
}

func (o PublicCloudUserMapOutput) ToPublicCloudUserMapOutput() PublicCloudUserMapOutput {
	return o
}

func (o PublicCloudUserMapOutput) ToPublicCloudUserMapOutputWithContext(ctx context.Context) PublicCloudUserMapOutput {
	return o
}

func (o PublicCloudUserMapOutput) MapIndex(k pulumi.StringInput) PublicCloudUserOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PublicCloudUser {
		return vs[0].(map[string]*PublicCloudUser)[vs[1].(string)]
	}).(PublicCloudUserOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PublicCloudUserInput)(nil)).Elem(), &PublicCloudUser{})
	pulumi.RegisterInputType(reflect.TypeOf((*PublicCloudUserArrayInput)(nil)).Elem(), PublicCloudUserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PublicCloudUserMapInput)(nil)).Elem(), PublicCloudUserMap{})
	pulumi.RegisterOutputType(PublicCloudUserOutput{})
	pulumi.RegisterOutputType(PublicCloudUserArrayOutput{})
	pulumi.RegisterOutputType(PublicCloudUserMapOutput{})
}
