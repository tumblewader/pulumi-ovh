// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ovh

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Attach a ip loadbalancing to a VRack.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-ovh/sdk/go/ovh"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := ovh.NewVRACIPLoadbalancing(ctx, "viplb", &ovh.VRACIPLoadbalancingArgs{
// 			IpLoadbalancing: pulumi.String("yyy"),
// 			ServiceName:     pulumi.String("xxx"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type VRACIPLoadbalancing struct {
	pulumi.CustomResourceState

	// The id of the ip loadbalancing.
	IpLoadbalancing pulumi.StringOutput `pulumi:"ipLoadbalancing"`
	// The id of the vrack.
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
}

// NewVRACIPLoadbalancing registers a new resource with the given unique name, arguments, and options.
func NewVRACIPLoadbalancing(ctx *pulumi.Context,
	name string, args *VRACIPLoadbalancingArgs, opts ...pulumi.ResourceOption) (*VRACIPLoadbalancing, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.IpLoadbalancing == nil {
		return nil, errors.New("invalid value for required argument 'IpLoadbalancing'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	var resource VRACIPLoadbalancing
	err := ctx.RegisterResource("ovh:index/vRACIPLoadbalancing:VRACIPLoadbalancing", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVRACIPLoadbalancing gets an existing VRACIPLoadbalancing resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVRACIPLoadbalancing(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VRACIPLoadbalancingState, opts ...pulumi.ResourceOption) (*VRACIPLoadbalancing, error) {
	var resource VRACIPLoadbalancing
	err := ctx.ReadResource("ovh:index/vRACIPLoadbalancing:VRACIPLoadbalancing", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VRACIPLoadbalancing resources.
type vraciploadbalancingState struct {
	// The id of the ip loadbalancing.
	IpLoadbalancing *string `pulumi:"ipLoadbalancing"`
	// The id of the vrack.
	ServiceName *string `pulumi:"serviceName"`
}

type VRACIPLoadbalancingState struct {
	// The id of the ip loadbalancing.
	IpLoadbalancing pulumi.StringPtrInput
	// The id of the vrack.
	ServiceName pulumi.StringPtrInput
}

func (VRACIPLoadbalancingState) ElementType() reflect.Type {
	return reflect.TypeOf((*vraciploadbalancingState)(nil)).Elem()
}

type vraciploadbalancingArgs struct {
	// The id of the ip loadbalancing.
	IpLoadbalancing string `pulumi:"ipLoadbalancing"`
	// The id of the vrack.
	ServiceName string `pulumi:"serviceName"`
}

// The set of arguments for constructing a VRACIPLoadbalancing resource.
type VRACIPLoadbalancingArgs struct {
	// The id of the ip loadbalancing.
	IpLoadbalancing pulumi.StringInput
	// The id of the vrack.
	ServiceName pulumi.StringInput
}

func (VRACIPLoadbalancingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vraciploadbalancingArgs)(nil)).Elem()
}

type VRACIPLoadbalancingInput interface {
	pulumi.Input

	ToVRACIPLoadbalancingOutput() VRACIPLoadbalancingOutput
	ToVRACIPLoadbalancingOutputWithContext(ctx context.Context) VRACIPLoadbalancingOutput
}

func (*VRACIPLoadbalancing) ElementType() reflect.Type {
	return reflect.TypeOf((**VRACIPLoadbalancing)(nil)).Elem()
}

func (i *VRACIPLoadbalancing) ToVRACIPLoadbalancingOutput() VRACIPLoadbalancingOutput {
	return i.ToVRACIPLoadbalancingOutputWithContext(context.Background())
}

func (i *VRACIPLoadbalancing) ToVRACIPLoadbalancingOutputWithContext(ctx context.Context) VRACIPLoadbalancingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VRACIPLoadbalancingOutput)
}

// VRACIPLoadbalancingArrayInput is an input type that accepts VRACIPLoadbalancingArray and VRACIPLoadbalancingArrayOutput values.
// You can construct a concrete instance of `VRACIPLoadbalancingArrayInput` via:
//
//          VRACIPLoadbalancingArray{ VRACIPLoadbalancingArgs{...} }
type VRACIPLoadbalancingArrayInput interface {
	pulumi.Input

	ToVRACIPLoadbalancingArrayOutput() VRACIPLoadbalancingArrayOutput
	ToVRACIPLoadbalancingArrayOutputWithContext(context.Context) VRACIPLoadbalancingArrayOutput
}

type VRACIPLoadbalancingArray []VRACIPLoadbalancingInput

func (VRACIPLoadbalancingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VRACIPLoadbalancing)(nil)).Elem()
}

func (i VRACIPLoadbalancingArray) ToVRACIPLoadbalancingArrayOutput() VRACIPLoadbalancingArrayOutput {
	return i.ToVRACIPLoadbalancingArrayOutputWithContext(context.Background())
}

func (i VRACIPLoadbalancingArray) ToVRACIPLoadbalancingArrayOutputWithContext(ctx context.Context) VRACIPLoadbalancingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VRACIPLoadbalancingArrayOutput)
}

// VRACIPLoadbalancingMapInput is an input type that accepts VRACIPLoadbalancingMap and VRACIPLoadbalancingMapOutput values.
// You can construct a concrete instance of `VRACIPLoadbalancingMapInput` via:
//
//          VRACIPLoadbalancingMap{ "key": VRACIPLoadbalancingArgs{...} }
type VRACIPLoadbalancingMapInput interface {
	pulumi.Input

	ToVRACIPLoadbalancingMapOutput() VRACIPLoadbalancingMapOutput
	ToVRACIPLoadbalancingMapOutputWithContext(context.Context) VRACIPLoadbalancingMapOutput
}

type VRACIPLoadbalancingMap map[string]VRACIPLoadbalancingInput

func (VRACIPLoadbalancingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VRACIPLoadbalancing)(nil)).Elem()
}

func (i VRACIPLoadbalancingMap) ToVRACIPLoadbalancingMapOutput() VRACIPLoadbalancingMapOutput {
	return i.ToVRACIPLoadbalancingMapOutputWithContext(context.Background())
}

func (i VRACIPLoadbalancingMap) ToVRACIPLoadbalancingMapOutputWithContext(ctx context.Context) VRACIPLoadbalancingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VRACIPLoadbalancingMapOutput)
}

type VRACIPLoadbalancingOutput struct{ *pulumi.OutputState }

func (VRACIPLoadbalancingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VRACIPLoadbalancing)(nil)).Elem()
}

func (o VRACIPLoadbalancingOutput) ToVRACIPLoadbalancingOutput() VRACIPLoadbalancingOutput {
	return o
}

func (o VRACIPLoadbalancingOutput) ToVRACIPLoadbalancingOutputWithContext(ctx context.Context) VRACIPLoadbalancingOutput {
	return o
}

type VRACIPLoadbalancingArrayOutput struct{ *pulumi.OutputState }

func (VRACIPLoadbalancingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VRACIPLoadbalancing)(nil)).Elem()
}

func (o VRACIPLoadbalancingArrayOutput) ToVRACIPLoadbalancingArrayOutput() VRACIPLoadbalancingArrayOutput {
	return o
}

func (o VRACIPLoadbalancingArrayOutput) ToVRACIPLoadbalancingArrayOutputWithContext(ctx context.Context) VRACIPLoadbalancingArrayOutput {
	return o
}

func (o VRACIPLoadbalancingArrayOutput) Index(i pulumi.IntInput) VRACIPLoadbalancingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VRACIPLoadbalancing {
		return vs[0].([]*VRACIPLoadbalancing)[vs[1].(int)]
	}).(VRACIPLoadbalancingOutput)
}

type VRACIPLoadbalancingMapOutput struct{ *pulumi.OutputState }

func (VRACIPLoadbalancingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VRACIPLoadbalancing)(nil)).Elem()
}

func (o VRACIPLoadbalancingMapOutput) ToVRACIPLoadbalancingMapOutput() VRACIPLoadbalancingMapOutput {
	return o
}

func (o VRACIPLoadbalancingMapOutput) ToVRACIPLoadbalancingMapOutputWithContext(ctx context.Context) VRACIPLoadbalancingMapOutput {
	return o
}

func (o VRACIPLoadbalancingMapOutput) MapIndex(k pulumi.StringInput) VRACIPLoadbalancingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VRACIPLoadbalancing {
		return vs[0].(map[string]*VRACIPLoadbalancing)[vs[1].(string)]
	}).(VRACIPLoadbalancingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VRACIPLoadbalancingInput)(nil)).Elem(), &VRACIPLoadbalancing{})
	pulumi.RegisterInputType(reflect.TypeOf((*VRACIPLoadbalancingArrayInput)(nil)).Elem(), VRACIPLoadbalancingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VRACIPLoadbalancingMapInput)(nil)).Elem(), VRACIPLoadbalancingMap{})
	pulumi.RegisterOutputType(VRACIPLoadbalancingOutput{})
	pulumi.RegisterOutputType(VRACIPLoadbalancingArrayOutput{})
	pulumi.RegisterOutputType(VRACIPLoadbalancingMapOutput{})
}
