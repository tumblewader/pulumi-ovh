// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ovh

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a backend server group (frontend) to be used by loadbalancing frontend(s)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-ovh/sdk/go/ovh"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		lb, err := ovh.GetIPLoadbalancing(ctx, &GetIPLoadbalancingArgs{
// 			ServiceName: pulumi.StringRef("ip-1.2.3.4"),
// 			State:       pulumi.StringRef("ok"),
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		farm80, err := ovh.NewIPLoadbalancingTCPFarm(ctx, "farm80", &ovh.IPLoadbalancingTCPFarmArgs{
// 			DisplayName: pulumi.String("ingress-8080-gra"),
// 			Port:        pulumi.Int(80),
// 			ServiceName: pulumi.String(lb.ServiceName),
// 			Zone:        pulumi.String("all"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = ovh.NewIPLoadbalancingTCPFrontend(ctx, "testfrontend", &ovh.IPLoadbalancingTCPFrontendArgs{
// 			DefaultFarmId: farm80.ID(),
// 			DisplayName:   pulumi.String("ingress-8080-gra"),
// 			Port:          pulumi.String("80,443"),
// 			ServiceName:   pulumi.String(lb.ServiceName),
// 			Zone:          pulumi.String("all"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type IPLoadbalancingTCPFrontend struct {
	pulumi.CustomResourceState

	// Restrict IP Load Balancing access to these ip block. No restriction if null. List of IP blocks.
	AllowedSources pulumi.StringArrayOutput `pulumi:"allowedSources"`
	// Only attach frontend on these ip. No restriction if null. List of Ip blocks.
	DedicatedIpfos pulumi.StringArrayOutput `pulumi:"dedicatedIpfos"`
	// Default TCP Farm of your frontend
	DefaultFarmId pulumi.IntOutput `pulumi:"defaultFarmId"`
	// Default ssl served to your customer
	DefaultSslId pulumi.IntOutput `pulumi:"defaultSslId"`
	// Disable your frontend. Default: 'false'
	Disabled pulumi.BoolPtrOutput `pulumi:"disabled"`
	// Human readable name for your frontend, this field is for you
	DisplayName pulumi.StringPtrOutput `pulumi:"displayName"`
	// Port(s) attached to your frontend. Supports single port (numerical value),
	// range (2 dash-delimited increasing ports) and comma-separated list of 'single port'
	// and/or 'range'. Each port must be in the [1;49151] range
	Port pulumi.StringOutput `pulumi:"port"`
	// The internal name of your IP load balancing
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
	// SSL deciphering. Default: 'false'
	Ssl pulumi.BoolPtrOutput `pulumi:"ssl"`
	// Zone where the frontend will be defined (ie. `gra`, `bhs` also supports `all`)
	Zone pulumi.StringOutput `pulumi:"zone"`
}

// NewIPLoadbalancingTCPFrontend registers a new resource with the given unique name, arguments, and options.
func NewIPLoadbalancingTCPFrontend(ctx *pulumi.Context,
	name string, args *IPLoadbalancingTCPFrontendArgs, opts ...pulumi.ResourceOption) (*IPLoadbalancingTCPFrontend, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Port == nil {
		return nil, errors.New("invalid value for required argument 'Port'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	if args.Zone == nil {
		return nil, errors.New("invalid value for required argument 'Zone'")
	}
	var resource IPLoadbalancingTCPFrontend
	err := ctx.RegisterResource("ovh:index/iPLoadbalancingTCPFrontend:IPLoadbalancingTCPFrontend", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIPLoadbalancingTCPFrontend gets an existing IPLoadbalancingTCPFrontend resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIPLoadbalancingTCPFrontend(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IPLoadbalancingTCPFrontendState, opts ...pulumi.ResourceOption) (*IPLoadbalancingTCPFrontend, error) {
	var resource IPLoadbalancingTCPFrontend
	err := ctx.ReadResource("ovh:index/iPLoadbalancingTCPFrontend:IPLoadbalancingTCPFrontend", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IPLoadbalancingTCPFrontend resources.
type iploadbalancingTCPFrontendState struct {
	// Restrict IP Load Balancing access to these ip block. No restriction if null. List of IP blocks.
	AllowedSources []string `pulumi:"allowedSources"`
	// Only attach frontend on these ip. No restriction if null. List of Ip blocks.
	DedicatedIpfos []string `pulumi:"dedicatedIpfos"`
	// Default TCP Farm of your frontend
	DefaultFarmId *int `pulumi:"defaultFarmId"`
	// Default ssl served to your customer
	DefaultSslId *int `pulumi:"defaultSslId"`
	// Disable your frontend. Default: 'false'
	Disabled *bool `pulumi:"disabled"`
	// Human readable name for your frontend, this field is for you
	DisplayName *string `pulumi:"displayName"`
	// Port(s) attached to your frontend. Supports single port (numerical value),
	// range (2 dash-delimited increasing ports) and comma-separated list of 'single port'
	// and/or 'range'. Each port must be in the [1;49151] range
	Port *string `pulumi:"port"`
	// The internal name of your IP load balancing
	ServiceName *string `pulumi:"serviceName"`
	// SSL deciphering. Default: 'false'
	Ssl *bool `pulumi:"ssl"`
	// Zone where the frontend will be defined (ie. `gra`, `bhs` also supports `all`)
	Zone *string `pulumi:"zone"`
}

type IPLoadbalancingTCPFrontendState struct {
	// Restrict IP Load Balancing access to these ip block. No restriction if null. List of IP blocks.
	AllowedSources pulumi.StringArrayInput
	// Only attach frontend on these ip. No restriction if null. List of Ip blocks.
	DedicatedIpfos pulumi.StringArrayInput
	// Default TCP Farm of your frontend
	DefaultFarmId pulumi.IntPtrInput
	// Default ssl served to your customer
	DefaultSslId pulumi.IntPtrInput
	// Disable your frontend. Default: 'false'
	Disabled pulumi.BoolPtrInput
	// Human readable name for your frontend, this field is for you
	DisplayName pulumi.StringPtrInput
	// Port(s) attached to your frontend. Supports single port (numerical value),
	// range (2 dash-delimited increasing ports) and comma-separated list of 'single port'
	// and/or 'range'. Each port must be in the [1;49151] range
	Port pulumi.StringPtrInput
	// The internal name of your IP load balancing
	ServiceName pulumi.StringPtrInput
	// SSL deciphering. Default: 'false'
	Ssl pulumi.BoolPtrInput
	// Zone where the frontend will be defined (ie. `gra`, `bhs` also supports `all`)
	Zone pulumi.StringPtrInput
}

func (IPLoadbalancingTCPFrontendState) ElementType() reflect.Type {
	return reflect.TypeOf((*iploadbalancingTCPFrontendState)(nil)).Elem()
}

type iploadbalancingTCPFrontendArgs struct {
	// Restrict IP Load Balancing access to these ip block. No restriction if null. List of IP blocks.
	AllowedSources []string `pulumi:"allowedSources"`
	// Only attach frontend on these ip. No restriction if null. List of Ip blocks.
	DedicatedIpfos []string `pulumi:"dedicatedIpfos"`
	// Default TCP Farm of your frontend
	DefaultFarmId *int `pulumi:"defaultFarmId"`
	// Default ssl served to your customer
	DefaultSslId *int `pulumi:"defaultSslId"`
	// Disable your frontend. Default: 'false'
	Disabled *bool `pulumi:"disabled"`
	// Human readable name for your frontend, this field is for you
	DisplayName *string `pulumi:"displayName"`
	// Port(s) attached to your frontend. Supports single port (numerical value),
	// range (2 dash-delimited increasing ports) and comma-separated list of 'single port'
	// and/or 'range'. Each port must be in the [1;49151] range
	Port string `pulumi:"port"`
	// The internal name of your IP load balancing
	ServiceName string `pulumi:"serviceName"`
	// SSL deciphering. Default: 'false'
	Ssl *bool `pulumi:"ssl"`
	// Zone where the frontend will be defined (ie. `gra`, `bhs` also supports `all`)
	Zone string `pulumi:"zone"`
}

// The set of arguments for constructing a IPLoadbalancingTCPFrontend resource.
type IPLoadbalancingTCPFrontendArgs struct {
	// Restrict IP Load Balancing access to these ip block. No restriction if null. List of IP blocks.
	AllowedSources pulumi.StringArrayInput
	// Only attach frontend on these ip. No restriction if null. List of Ip blocks.
	DedicatedIpfos pulumi.StringArrayInput
	// Default TCP Farm of your frontend
	DefaultFarmId pulumi.IntPtrInput
	// Default ssl served to your customer
	DefaultSslId pulumi.IntPtrInput
	// Disable your frontend. Default: 'false'
	Disabled pulumi.BoolPtrInput
	// Human readable name for your frontend, this field is for you
	DisplayName pulumi.StringPtrInput
	// Port(s) attached to your frontend. Supports single port (numerical value),
	// range (2 dash-delimited increasing ports) and comma-separated list of 'single port'
	// and/or 'range'. Each port must be in the [1;49151] range
	Port pulumi.StringInput
	// The internal name of your IP load balancing
	ServiceName pulumi.StringInput
	// SSL deciphering. Default: 'false'
	Ssl pulumi.BoolPtrInput
	// Zone where the frontend will be defined (ie. `gra`, `bhs` also supports `all`)
	Zone pulumi.StringInput
}

func (IPLoadbalancingTCPFrontendArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*iploadbalancingTCPFrontendArgs)(nil)).Elem()
}

type IPLoadbalancingTCPFrontendInput interface {
	pulumi.Input

	ToIPLoadbalancingTCPFrontendOutput() IPLoadbalancingTCPFrontendOutput
	ToIPLoadbalancingTCPFrontendOutputWithContext(ctx context.Context) IPLoadbalancingTCPFrontendOutput
}

func (*IPLoadbalancingTCPFrontend) ElementType() reflect.Type {
	return reflect.TypeOf((**IPLoadbalancingTCPFrontend)(nil)).Elem()
}

func (i *IPLoadbalancingTCPFrontend) ToIPLoadbalancingTCPFrontendOutput() IPLoadbalancingTCPFrontendOutput {
	return i.ToIPLoadbalancingTCPFrontendOutputWithContext(context.Background())
}

func (i *IPLoadbalancingTCPFrontend) ToIPLoadbalancingTCPFrontendOutputWithContext(ctx context.Context) IPLoadbalancingTCPFrontendOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPLoadbalancingTCPFrontendOutput)
}

// IPLoadbalancingTCPFrontendArrayInput is an input type that accepts IPLoadbalancingTCPFrontendArray and IPLoadbalancingTCPFrontendArrayOutput values.
// You can construct a concrete instance of `IPLoadbalancingTCPFrontendArrayInput` via:
//
//          IPLoadbalancingTCPFrontendArray{ IPLoadbalancingTCPFrontendArgs{...} }
type IPLoadbalancingTCPFrontendArrayInput interface {
	pulumi.Input

	ToIPLoadbalancingTCPFrontendArrayOutput() IPLoadbalancingTCPFrontendArrayOutput
	ToIPLoadbalancingTCPFrontendArrayOutputWithContext(context.Context) IPLoadbalancingTCPFrontendArrayOutput
}

type IPLoadbalancingTCPFrontendArray []IPLoadbalancingTCPFrontendInput

func (IPLoadbalancingTCPFrontendArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IPLoadbalancingTCPFrontend)(nil)).Elem()
}

func (i IPLoadbalancingTCPFrontendArray) ToIPLoadbalancingTCPFrontendArrayOutput() IPLoadbalancingTCPFrontendArrayOutput {
	return i.ToIPLoadbalancingTCPFrontendArrayOutputWithContext(context.Background())
}

func (i IPLoadbalancingTCPFrontendArray) ToIPLoadbalancingTCPFrontendArrayOutputWithContext(ctx context.Context) IPLoadbalancingTCPFrontendArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPLoadbalancingTCPFrontendArrayOutput)
}

// IPLoadbalancingTCPFrontendMapInput is an input type that accepts IPLoadbalancingTCPFrontendMap and IPLoadbalancingTCPFrontendMapOutput values.
// You can construct a concrete instance of `IPLoadbalancingTCPFrontendMapInput` via:
//
//          IPLoadbalancingTCPFrontendMap{ "key": IPLoadbalancingTCPFrontendArgs{...} }
type IPLoadbalancingTCPFrontendMapInput interface {
	pulumi.Input

	ToIPLoadbalancingTCPFrontendMapOutput() IPLoadbalancingTCPFrontendMapOutput
	ToIPLoadbalancingTCPFrontendMapOutputWithContext(context.Context) IPLoadbalancingTCPFrontendMapOutput
}

type IPLoadbalancingTCPFrontendMap map[string]IPLoadbalancingTCPFrontendInput

func (IPLoadbalancingTCPFrontendMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IPLoadbalancingTCPFrontend)(nil)).Elem()
}

func (i IPLoadbalancingTCPFrontendMap) ToIPLoadbalancingTCPFrontendMapOutput() IPLoadbalancingTCPFrontendMapOutput {
	return i.ToIPLoadbalancingTCPFrontendMapOutputWithContext(context.Background())
}

func (i IPLoadbalancingTCPFrontendMap) ToIPLoadbalancingTCPFrontendMapOutputWithContext(ctx context.Context) IPLoadbalancingTCPFrontendMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPLoadbalancingTCPFrontendMapOutput)
}

type IPLoadbalancingTCPFrontendOutput struct{ *pulumi.OutputState }

func (IPLoadbalancingTCPFrontendOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IPLoadbalancingTCPFrontend)(nil)).Elem()
}

func (o IPLoadbalancingTCPFrontendOutput) ToIPLoadbalancingTCPFrontendOutput() IPLoadbalancingTCPFrontendOutput {
	return o
}

func (o IPLoadbalancingTCPFrontendOutput) ToIPLoadbalancingTCPFrontendOutputWithContext(ctx context.Context) IPLoadbalancingTCPFrontendOutput {
	return o
}

type IPLoadbalancingTCPFrontendArrayOutput struct{ *pulumi.OutputState }

func (IPLoadbalancingTCPFrontendArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IPLoadbalancingTCPFrontend)(nil)).Elem()
}

func (o IPLoadbalancingTCPFrontendArrayOutput) ToIPLoadbalancingTCPFrontendArrayOutput() IPLoadbalancingTCPFrontendArrayOutput {
	return o
}

func (o IPLoadbalancingTCPFrontendArrayOutput) ToIPLoadbalancingTCPFrontendArrayOutputWithContext(ctx context.Context) IPLoadbalancingTCPFrontendArrayOutput {
	return o
}

func (o IPLoadbalancingTCPFrontendArrayOutput) Index(i pulumi.IntInput) IPLoadbalancingTCPFrontendOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IPLoadbalancingTCPFrontend {
		return vs[0].([]*IPLoadbalancingTCPFrontend)[vs[1].(int)]
	}).(IPLoadbalancingTCPFrontendOutput)
}

type IPLoadbalancingTCPFrontendMapOutput struct{ *pulumi.OutputState }

func (IPLoadbalancingTCPFrontendMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IPLoadbalancingTCPFrontend)(nil)).Elem()
}

func (o IPLoadbalancingTCPFrontendMapOutput) ToIPLoadbalancingTCPFrontendMapOutput() IPLoadbalancingTCPFrontendMapOutput {
	return o
}

func (o IPLoadbalancingTCPFrontendMapOutput) ToIPLoadbalancingTCPFrontendMapOutputWithContext(ctx context.Context) IPLoadbalancingTCPFrontendMapOutput {
	return o
}

func (o IPLoadbalancingTCPFrontendMapOutput) MapIndex(k pulumi.StringInput) IPLoadbalancingTCPFrontendOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IPLoadbalancingTCPFrontend {
		return vs[0].(map[string]*IPLoadbalancingTCPFrontend)[vs[1].(string)]
	}).(IPLoadbalancingTCPFrontendOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IPLoadbalancingTCPFrontendInput)(nil)).Elem(), &IPLoadbalancingTCPFrontend{})
	pulumi.RegisterInputType(reflect.TypeOf((*IPLoadbalancingTCPFrontendArrayInput)(nil)).Elem(), IPLoadbalancingTCPFrontendArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IPLoadbalancingTCPFrontendMapInput)(nil)).Elem(), IPLoadbalancingTCPFrontendMap{})
	pulumi.RegisterOutputType(IPLoadbalancingTCPFrontendOutput{})
	pulumi.RegisterOutputType(IPLoadbalancingTCPFrontendArrayOutput{})
	pulumi.RegisterOutputType(IPLoadbalancingTCPFrontendMapOutput{})
}
