// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ovh

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manage http route for a loadbalancer service
//
// ## Example Usage
//
// Route which redirect all url to https.
//
// ```go
// package main
//
// import (
// 	"fmt"
//
// 	"github.com/pulumi/pulumi-ovh/sdk/go/ovh"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := ovh.NewIPLoadbalancingHTTPRoute(ctx, "httpsredirect", &ovh.IPLoadbalancingHTTPRouteArgs{
// 			Action: &IPLoadbalancingHTTPRouteActionArgs{
// 				Status: pulumi.Int(302),
// 				Target: pulumi.String(fmt.Sprintf("%v%v%v%v", "https://", host, path, arguments)),
// 				Type:   pulumi.String("redirect"),
// 			},
// 			DisplayName: pulumi.String("Redirect to HTTPS"),
// 			ServiceName: pulumi.String("loadbalancer-xxxxxxxxxxxxxxxxxx"),
// 			Weight:      pulumi.Int(1),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type IPLoadbalancingHTTPRoute struct {
	pulumi.CustomResourceState

	Action IPLoadbalancingHTTPRouteActionOutput `pulumi:"action"`
	// Human readable name for your route, this field is for you
	DisplayName pulumi.StringPtrOutput `pulumi:"displayName"`
	// Route traffic for this frontend
	FrontendId pulumi.IntOutput `pulumi:"frontendId"`
	// The internal name of your IP load balancing
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
	// Route priority ([0..255]). 0 if null. Highest priority routes are evaluated first. Only the first matching route will trigger an action
	// * `action.status` - HTTP status code for "redirect" and "reject" actions
	// * `action.target` - Farm ID for "farm" action type or URL template for "redirect" action. You may use ${uri}, ${protocol}, ${host}, ${port} and ${path} variables in redirect target
	// * `action.type` - (Required) Action to trigger if all the rules of this route matches
	Weight pulumi.IntPtrOutput `pulumi:"weight"`
}

// NewIPLoadbalancingHTTPRoute registers a new resource with the given unique name, arguments, and options.
func NewIPLoadbalancingHTTPRoute(ctx *pulumi.Context,
	name string, args *IPLoadbalancingHTTPRouteArgs, opts ...pulumi.ResourceOption) (*IPLoadbalancingHTTPRoute, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Action == nil {
		return nil, errors.New("invalid value for required argument 'Action'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	var resource IPLoadbalancingHTTPRoute
	err := ctx.RegisterResource("ovh:index/iPLoadbalancingHTTPRoute:IPLoadbalancingHTTPRoute", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIPLoadbalancingHTTPRoute gets an existing IPLoadbalancingHTTPRoute resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIPLoadbalancingHTTPRoute(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IPLoadbalancingHTTPRouteState, opts ...pulumi.ResourceOption) (*IPLoadbalancingHTTPRoute, error) {
	var resource IPLoadbalancingHTTPRoute
	err := ctx.ReadResource("ovh:index/iPLoadbalancingHTTPRoute:IPLoadbalancingHTTPRoute", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IPLoadbalancingHTTPRoute resources.
type iploadbalancingHTTPRouteState struct {
	Action *IPLoadbalancingHTTPRouteAction `pulumi:"action"`
	// Human readable name for your route, this field is for you
	DisplayName *string `pulumi:"displayName"`
	// Route traffic for this frontend
	FrontendId *int `pulumi:"frontendId"`
	// The internal name of your IP load balancing
	ServiceName *string `pulumi:"serviceName"`
	// Route priority ([0..255]). 0 if null. Highest priority routes are evaluated first. Only the first matching route will trigger an action
	// * `action.status` - HTTP status code for "redirect" and "reject" actions
	// * `action.target` - Farm ID for "farm" action type or URL template for "redirect" action. You may use ${uri}, ${protocol}, ${host}, ${port} and ${path} variables in redirect target
	// * `action.type` - (Required) Action to trigger if all the rules of this route matches
	Weight *int `pulumi:"weight"`
}

type IPLoadbalancingHTTPRouteState struct {
	Action IPLoadbalancingHTTPRouteActionPtrInput
	// Human readable name for your route, this field is for you
	DisplayName pulumi.StringPtrInput
	// Route traffic for this frontend
	FrontendId pulumi.IntPtrInput
	// The internal name of your IP load balancing
	ServiceName pulumi.StringPtrInput
	// Route priority ([0..255]). 0 if null. Highest priority routes are evaluated first. Only the first matching route will trigger an action
	// * `action.status` - HTTP status code for "redirect" and "reject" actions
	// * `action.target` - Farm ID for "farm" action type or URL template for "redirect" action. You may use ${uri}, ${protocol}, ${host}, ${port} and ${path} variables in redirect target
	// * `action.type` - (Required) Action to trigger if all the rules of this route matches
	Weight pulumi.IntPtrInput
}

func (IPLoadbalancingHTTPRouteState) ElementType() reflect.Type {
	return reflect.TypeOf((*iploadbalancingHTTPRouteState)(nil)).Elem()
}

type iploadbalancingHTTPRouteArgs struct {
	Action IPLoadbalancingHTTPRouteAction `pulumi:"action"`
	// Human readable name for your route, this field is for you
	DisplayName *string `pulumi:"displayName"`
	// Route traffic for this frontend
	FrontendId *int `pulumi:"frontendId"`
	// The internal name of your IP load balancing
	ServiceName string `pulumi:"serviceName"`
	// Route priority ([0..255]). 0 if null. Highest priority routes are evaluated first. Only the first matching route will trigger an action
	// * `action.status` - HTTP status code for "redirect" and "reject" actions
	// * `action.target` - Farm ID for "farm" action type or URL template for "redirect" action. You may use ${uri}, ${protocol}, ${host}, ${port} and ${path} variables in redirect target
	// * `action.type` - (Required) Action to trigger if all the rules of this route matches
	Weight *int `pulumi:"weight"`
}

// The set of arguments for constructing a IPLoadbalancingHTTPRoute resource.
type IPLoadbalancingHTTPRouteArgs struct {
	Action IPLoadbalancingHTTPRouteActionInput
	// Human readable name for your route, this field is for you
	DisplayName pulumi.StringPtrInput
	// Route traffic for this frontend
	FrontendId pulumi.IntPtrInput
	// The internal name of your IP load balancing
	ServiceName pulumi.StringInput
	// Route priority ([0..255]). 0 if null. Highest priority routes are evaluated first. Only the first matching route will trigger an action
	// * `action.status` - HTTP status code for "redirect" and "reject" actions
	// * `action.target` - Farm ID for "farm" action type or URL template for "redirect" action. You may use ${uri}, ${protocol}, ${host}, ${port} and ${path} variables in redirect target
	// * `action.type` - (Required) Action to trigger if all the rules of this route matches
	Weight pulumi.IntPtrInput
}

func (IPLoadbalancingHTTPRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*iploadbalancingHTTPRouteArgs)(nil)).Elem()
}

type IPLoadbalancingHTTPRouteInput interface {
	pulumi.Input

	ToIPLoadbalancingHTTPRouteOutput() IPLoadbalancingHTTPRouteOutput
	ToIPLoadbalancingHTTPRouteOutputWithContext(ctx context.Context) IPLoadbalancingHTTPRouteOutput
}

func (*IPLoadbalancingHTTPRoute) ElementType() reflect.Type {
	return reflect.TypeOf((**IPLoadbalancingHTTPRoute)(nil)).Elem()
}

func (i *IPLoadbalancingHTTPRoute) ToIPLoadbalancingHTTPRouteOutput() IPLoadbalancingHTTPRouteOutput {
	return i.ToIPLoadbalancingHTTPRouteOutputWithContext(context.Background())
}

func (i *IPLoadbalancingHTTPRoute) ToIPLoadbalancingHTTPRouteOutputWithContext(ctx context.Context) IPLoadbalancingHTTPRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPLoadbalancingHTTPRouteOutput)
}

// IPLoadbalancingHTTPRouteArrayInput is an input type that accepts IPLoadbalancingHTTPRouteArray and IPLoadbalancingHTTPRouteArrayOutput values.
// You can construct a concrete instance of `IPLoadbalancingHTTPRouteArrayInput` via:
//
//          IPLoadbalancingHTTPRouteArray{ IPLoadbalancingHTTPRouteArgs{...} }
type IPLoadbalancingHTTPRouteArrayInput interface {
	pulumi.Input

	ToIPLoadbalancingHTTPRouteArrayOutput() IPLoadbalancingHTTPRouteArrayOutput
	ToIPLoadbalancingHTTPRouteArrayOutputWithContext(context.Context) IPLoadbalancingHTTPRouteArrayOutput
}

type IPLoadbalancingHTTPRouteArray []IPLoadbalancingHTTPRouteInput

func (IPLoadbalancingHTTPRouteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IPLoadbalancingHTTPRoute)(nil)).Elem()
}

func (i IPLoadbalancingHTTPRouteArray) ToIPLoadbalancingHTTPRouteArrayOutput() IPLoadbalancingHTTPRouteArrayOutput {
	return i.ToIPLoadbalancingHTTPRouteArrayOutputWithContext(context.Background())
}

func (i IPLoadbalancingHTTPRouteArray) ToIPLoadbalancingHTTPRouteArrayOutputWithContext(ctx context.Context) IPLoadbalancingHTTPRouteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPLoadbalancingHTTPRouteArrayOutput)
}

// IPLoadbalancingHTTPRouteMapInput is an input type that accepts IPLoadbalancingHTTPRouteMap and IPLoadbalancingHTTPRouteMapOutput values.
// You can construct a concrete instance of `IPLoadbalancingHTTPRouteMapInput` via:
//
//          IPLoadbalancingHTTPRouteMap{ "key": IPLoadbalancingHTTPRouteArgs{...} }
type IPLoadbalancingHTTPRouteMapInput interface {
	pulumi.Input

	ToIPLoadbalancingHTTPRouteMapOutput() IPLoadbalancingHTTPRouteMapOutput
	ToIPLoadbalancingHTTPRouteMapOutputWithContext(context.Context) IPLoadbalancingHTTPRouteMapOutput
}

type IPLoadbalancingHTTPRouteMap map[string]IPLoadbalancingHTTPRouteInput

func (IPLoadbalancingHTTPRouteMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IPLoadbalancingHTTPRoute)(nil)).Elem()
}

func (i IPLoadbalancingHTTPRouteMap) ToIPLoadbalancingHTTPRouteMapOutput() IPLoadbalancingHTTPRouteMapOutput {
	return i.ToIPLoadbalancingHTTPRouteMapOutputWithContext(context.Background())
}

func (i IPLoadbalancingHTTPRouteMap) ToIPLoadbalancingHTTPRouteMapOutputWithContext(ctx context.Context) IPLoadbalancingHTTPRouteMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPLoadbalancingHTTPRouteMapOutput)
}

type IPLoadbalancingHTTPRouteOutput struct{ *pulumi.OutputState }

func (IPLoadbalancingHTTPRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IPLoadbalancingHTTPRoute)(nil)).Elem()
}

func (o IPLoadbalancingHTTPRouteOutput) ToIPLoadbalancingHTTPRouteOutput() IPLoadbalancingHTTPRouteOutput {
	return o
}

func (o IPLoadbalancingHTTPRouteOutput) ToIPLoadbalancingHTTPRouteOutputWithContext(ctx context.Context) IPLoadbalancingHTTPRouteOutput {
	return o
}

type IPLoadbalancingHTTPRouteArrayOutput struct{ *pulumi.OutputState }

func (IPLoadbalancingHTTPRouteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IPLoadbalancingHTTPRoute)(nil)).Elem()
}

func (o IPLoadbalancingHTTPRouteArrayOutput) ToIPLoadbalancingHTTPRouteArrayOutput() IPLoadbalancingHTTPRouteArrayOutput {
	return o
}

func (o IPLoadbalancingHTTPRouteArrayOutput) ToIPLoadbalancingHTTPRouteArrayOutputWithContext(ctx context.Context) IPLoadbalancingHTTPRouteArrayOutput {
	return o
}

func (o IPLoadbalancingHTTPRouteArrayOutput) Index(i pulumi.IntInput) IPLoadbalancingHTTPRouteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IPLoadbalancingHTTPRoute {
		return vs[0].([]*IPLoadbalancingHTTPRoute)[vs[1].(int)]
	}).(IPLoadbalancingHTTPRouteOutput)
}

type IPLoadbalancingHTTPRouteMapOutput struct{ *pulumi.OutputState }

func (IPLoadbalancingHTTPRouteMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IPLoadbalancingHTTPRoute)(nil)).Elem()
}

func (o IPLoadbalancingHTTPRouteMapOutput) ToIPLoadbalancingHTTPRouteMapOutput() IPLoadbalancingHTTPRouteMapOutput {
	return o
}

func (o IPLoadbalancingHTTPRouteMapOutput) ToIPLoadbalancingHTTPRouteMapOutputWithContext(ctx context.Context) IPLoadbalancingHTTPRouteMapOutput {
	return o
}

func (o IPLoadbalancingHTTPRouteMapOutput) MapIndex(k pulumi.StringInput) IPLoadbalancingHTTPRouteOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IPLoadbalancingHTTPRoute {
		return vs[0].(map[string]*IPLoadbalancingHTTPRoute)[vs[1].(string)]
	}).(IPLoadbalancingHTTPRouteOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IPLoadbalancingHTTPRouteInput)(nil)).Elem(), &IPLoadbalancingHTTPRoute{})
	pulumi.RegisterInputType(reflect.TypeOf((*IPLoadbalancingHTTPRouteArrayInput)(nil)).Elem(), IPLoadbalancingHTTPRouteArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IPLoadbalancingHTTPRouteMapInput)(nil)).Elem(), IPLoadbalancingHTTPRouteMap{})
	pulumi.RegisterOutputType(IPLoadbalancingHTTPRouteOutput{})
	pulumi.RegisterOutputType(IPLoadbalancingHTTPRouteArrayOutput{})
	pulumi.RegisterOutputType(IPLoadbalancingHTTPRouteMapOutput{})
}
