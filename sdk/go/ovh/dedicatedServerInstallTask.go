// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ovh

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-ovh/sdk/go/ovh"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		rescue, err := ovh.GetDedicatedServerBoots(ctx, &GetDedicatedServerBootsArgs{
// 			ServiceName: "ns00000.ip-1-2-3.eu",
// 			BootType:    pulumi.StringRef("rescue"),
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		key, err := ovh.NewMeSSHKey(ctx, "key", &ovh.MeSSHKeyArgs{
// 			KeyName: pulumi.String("mykey"),
// 			Key:     pulumi.String("ssh-ed25519 AAAAC3..."),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		debian, err := ovh.NewMeInstallationTemplate(ctx, "debian", &ovh.MeInstallationTemplateArgs{
// 			BaseTemplateName: pulumi.String("debian10_64"),
// 			TemplateName:     pulumi.String("mydebian10"),
// 			DefaultLanguage:  pulumi.String("en"),
// 			Customization: &MeInstallationTemplateCustomizationArgs{
// 				ChangeLog:      pulumi.String("v1"),
// 				CustomHostname: pulumi.String("mytest"),
// 				SshKeyName:     key.KeyName,
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = ovh.NewDedicatedServerInstallTask(ctx, "serverInstall", &ovh.DedicatedServerInstallTaskArgs{
// 			ServiceName:     pulumi.String("ns00000.ip-1-2-3.eu"),
// 			TemplateName:    debian.TemplateName,
// 			BootidOnDestroy: pulumi.Int(rescue.Results[0]),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type DedicatedServerInstallTask struct {
	pulumi.CustomResourceState

	// If set, reboot the server on the specified boot id during destroy phase.
	BootidOnDestroy pulumi.IntPtrOutput `pulumi:"bootidOnDestroy"`
	// Details of this task. (should be `Install asked`)
	Comment pulumi.StringOutput `pulumi:"comment"`
	// see `details` block below.
	Details DedicatedServerInstallTaskDetailsPtrOutput `pulumi:"details"`
	// Completion date in RFC3339 format.
	DoneDate pulumi.StringOutput `pulumi:"doneDate"`
	// Function name (should be `hardInstall`).
	Function pulumi.StringOutput `pulumi:"function"`
	// Last update in RFC3339 format.
	LastUpdate pulumi.StringOutput `pulumi:"lastUpdate"`
	// Partition scheme name.
	PartitionSchemeName pulumi.StringPtrOutput `pulumi:"partitionSchemeName"`
	// The serviceName of your dedicated server.
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
	// Task creation date in RFC3339 format.
	StartDate pulumi.StringOutput `pulumi:"startDate"`
	// Task status (should be `done`)
	Status pulumi.StringOutput `pulumi:"status"`
	// Template name.
	TemplateName pulumi.StringOutput `pulumi:"templateName"`
}

// NewDedicatedServerInstallTask registers a new resource with the given unique name, arguments, and options.
func NewDedicatedServerInstallTask(ctx *pulumi.Context,
	name string, args *DedicatedServerInstallTaskArgs, opts ...pulumi.ResourceOption) (*DedicatedServerInstallTask, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	if args.TemplateName == nil {
		return nil, errors.New("invalid value for required argument 'TemplateName'")
	}
	var resource DedicatedServerInstallTask
	err := ctx.RegisterResource("ovh:index/dedicatedServerInstallTask:DedicatedServerInstallTask", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDedicatedServerInstallTask gets an existing DedicatedServerInstallTask resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDedicatedServerInstallTask(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DedicatedServerInstallTaskState, opts ...pulumi.ResourceOption) (*DedicatedServerInstallTask, error) {
	var resource DedicatedServerInstallTask
	err := ctx.ReadResource("ovh:index/dedicatedServerInstallTask:DedicatedServerInstallTask", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DedicatedServerInstallTask resources.
type dedicatedServerInstallTaskState struct {
	// If set, reboot the server on the specified boot id during destroy phase.
	BootidOnDestroy *int `pulumi:"bootidOnDestroy"`
	// Details of this task. (should be `Install asked`)
	Comment *string `pulumi:"comment"`
	// see `details` block below.
	Details *DedicatedServerInstallTaskDetails `pulumi:"details"`
	// Completion date in RFC3339 format.
	DoneDate *string `pulumi:"doneDate"`
	// Function name (should be `hardInstall`).
	Function *string `pulumi:"function"`
	// Last update in RFC3339 format.
	LastUpdate *string `pulumi:"lastUpdate"`
	// Partition scheme name.
	PartitionSchemeName *string `pulumi:"partitionSchemeName"`
	// The serviceName of your dedicated server.
	ServiceName *string `pulumi:"serviceName"`
	// Task creation date in RFC3339 format.
	StartDate *string `pulumi:"startDate"`
	// Task status (should be `done`)
	Status *string `pulumi:"status"`
	// Template name.
	TemplateName *string `pulumi:"templateName"`
}

type DedicatedServerInstallTaskState struct {
	// If set, reboot the server on the specified boot id during destroy phase.
	BootidOnDestroy pulumi.IntPtrInput
	// Details of this task. (should be `Install asked`)
	Comment pulumi.StringPtrInput
	// see `details` block below.
	Details DedicatedServerInstallTaskDetailsPtrInput
	// Completion date in RFC3339 format.
	DoneDate pulumi.StringPtrInput
	// Function name (should be `hardInstall`).
	Function pulumi.StringPtrInput
	// Last update in RFC3339 format.
	LastUpdate pulumi.StringPtrInput
	// Partition scheme name.
	PartitionSchemeName pulumi.StringPtrInput
	// The serviceName of your dedicated server.
	ServiceName pulumi.StringPtrInput
	// Task creation date in RFC3339 format.
	StartDate pulumi.StringPtrInput
	// Task status (should be `done`)
	Status pulumi.StringPtrInput
	// Template name.
	TemplateName pulumi.StringPtrInput
}

func (DedicatedServerInstallTaskState) ElementType() reflect.Type {
	return reflect.TypeOf((*dedicatedServerInstallTaskState)(nil)).Elem()
}

type dedicatedServerInstallTaskArgs struct {
	// If set, reboot the server on the specified boot id during destroy phase.
	BootidOnDestroy *int `pulumi:"bootidOnDestroy"`
	// see `details` block below.
	Details *DedicatedServerInstallTaskDetails `pulumi:"details"`
	// Partition scheme name.
	PartitionSchemeName *string `pulumi:"partitionSchemeName"`
	// The serviceName of your dedicated server.
	ServiceName string `pulumi:"serviceName"`
	// Template name.
	TemplateName string `pulumi:"templateName"`
}

// The set of arguments for constructing a DedicatedServerInstallTask resource.
type DedicatedServerInstallTaskArgs struct {
	// If set, reboot the server on the specified boot id during destroy phase.
	BootidOnDestroy pulumi.IntPtrInput
	// see `details` block below.
	Details DedicatedServerInstallTaskDetailsPtrInput
	// Partition scheme name.
	PartitionSchemeName pulumi.StringPtrInput
	// The serviceName of your dedicated server.
	ServiceName pulumi.StringInput
	// Template name.
	TemplateName pulumi.StringInput
}

func (DedicatedServerInstallTaskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dedicatedServerInstallTaskArgs)(nil)).Elem()
}

type DedicatedServerInstallTaskInput interface {
	pulumi.Input

	ToDedicatedServerInstallTaskOutput() DedicatedServerInstallTaskOutput
	ToDedicatedServerInstallTaskOutputWithContext(ctx context.Context) DedicatedServerInstallTaskOutput
}

func (*DedicatedServerInstallTask) ElementType() reflect.Type {
	return reflect.TypeOf((**DedicatedServerInstallTask)(nil)).Elem()
}

func (i *DedicatedServerInstallTask) ToDedicatedServerInstallTaskOutput() DedicatedServerInstallTaskOutput {
	return i.ToDedicatedServerInstallTaskOutputWithContext(context.Background())
}

func (i *DedicatedServerInstallTask) ToDedicatedServerInstallTaskOutputWithContext(ctx context.Context) DedicatedServerInstallTaskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DedicatedServerInstallTaskOutput)
}

// DedicatedServerInstallTaskArrayInput is an input type that accepts DedicatedServerInstallTaskArray and DedicatedServerInstallTaskArrayOutput values.
// You can construct a concrete instance of `DedicatedServerInstallTaskArrayInput` via:
//
//          DedicatedServerInstallTaskArray{ DedicatedServerInstallTaskArgs{...} }
type DedicatedServerInstallTaskArrayInput interface {
	pulumi.Input

	ToDedicatedServerInstallTaskArrayOutput() DedicatedServerInstallTaskArrayOutput
	ToDedicatedServerInstallTaskArrayOutputWithContext(context.Context) DedicatedServerInstallTaskArrayOutput
}

type DedicatedServerInstallTaskArray []DedicatedServerInstallTaskInput

func (DedicatedServerInstallTaskArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DedicatedServerInstallTask)(nil)).Elem()
}

func (i DedicatedServerInstallTaskArray) ToDedicatedServerInstallTaskArrayOutput() DedicatedServerInstallTaskArrayOutput {
	return i.ToDedicatedServerInstallTaskArrayOutputWithContext(context.Background())
}

func (i DedicatedServerInstallTaskArray) ToDedicatedServerInstallTaskArrayOutputWithContext(ctx context.Context) DedicatedServerInstallTaskArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DedicatedServerInstallTaskArrayOutput)
}

// DedicatedServerInstallTaskMapInput is an input type that accepts DedicatedServerInstallTaskMap and DedicatedServerInstallTaskMapOutput values.
// You can construct a concrete instance of `DedicatedServerInstallTaskMapInput` via:
//
//          DedicatedServerInstallTaskMap{ "key": DedicatedServerInstallTaskArgs{...} }
type DedicatedServerInstallTaskMapInput interface {
	pulumi.Input

	ToDedicatedServerInstallTaskMapOutput() DedicatedServerInstallTaskMapOutput
	ToDedicatedServerInstallTaskMapOutputWithContext(context.Context) DedicatedServerInstallTaskMapOutput
}

type DedicatedServerInstallTaskMap map[string]DedicatedServerInstallTaskInput

func (DedicatedServerInstallTaskMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DedicatedServerInstallTask)(nil)).Elem()
}

func (i DedicatedServerInstallTaskMap) ToDedicatedServerInstallTaskMapOutput() DedicatedServerInstallTaskMapOutput {
	return i.ToDedicatedServerInstallTaskMapOutputWithContext(context.Background())
}

func (i DedicatedServerInstallTaskMap) ToDedicatedServerInstallTaskMapOutputWithContext(ctx context.Context) DedicatedServerInstallTaskMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DedicatedServerInstallTaskMapOutput)
}

type DedicatedServerInstallTaskOutput struct{ *pulumi.OutputState }

func (DedicatedServerInstallTaskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DedicatedServerInstallTask)(nil)).Elem()
}

func (o DedicatedServerInstallTaskOutput) ToDedicatedServerInstallTaskOutput() DedicatedServerInstallTaskOutput {
	return o
}

func (o DedicatedServerInstallTaskOutput) ToDedicatedServerInstallTaskOutputWithContext(ctx context.Context) DedicatedServerInstallTaskOutput {
	return o
}

type DedicatedServerInstallTaskArrayOutput struct{ *pulumi.OutputState }

func (DedicatedServerInstallTaskArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DedicatedServerInstallTask)(nil)).Elem()
}

func (o DedicatedServerInstallTaskArrayOutput) ToDedicatedServerInstallTaskArrayOutput() DedicatedServerInstallTaskArrayOutput {
	return o
}

func (o DedicatedServerInstallTaskArrayOutput) ToDedicatedServerInstallTaskArrayOutputWithContext(ctx context.Context) DedicatedServerInstallTaskArrayOutput {
	return o
}

func (o DedicatedServerInstallTaskArrayOutput) Index(i pulumi.IntInput) DedicatedServerInstallTaskOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DedicatedServerInstallTask {
		return vs[0].([]*DedicatedServerInstallTask)[vs[1].(int)]
	}).(DedicatedServerInstallTaskOutput)
}

type DedicatedServerInstallTaskMapOutput struct{ *pulumi.OutputState }

func (DedicatedServerInstallTaskMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DedicatedServerInstallTask)(nil)).Elem()
}

func (o DedicatedServerInstallTaskMapOutput) ToDedicatedServerInstallTaskMapOutput() DedicatedServerInstallTaskMapOutput {
	return o
}

func (o DedicatedServerInstallTaskMapOutput) ToDedicatedServerInstallTaskMapOutputWithContext(ctx context.Context) DedicatedServerInstallTaskMapOutput {
	return o
}

func (o DedicatedServerInstallTaskMapOutput) MapIndex(k pulumi.StringInput) DedicatedServerInstallTaskOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DedicatedServerInstallTask {
		return vs[0].(map[string]*DedicatedServerInstallTask)[vs[1].(string)]
	}).(DedicatedServerInstallTaskOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DedicatedServerInstallTaskInput)(nil)).Elem(), &DedicatedServerInstallTask{})
	pulumi.RegisterInputType(reflect.TypeOf((*DedicatedServerInstallTaskArrayInput)(nil)).Elem(), DedicatedServerInstallTaskArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DedicatedServerInstallTaskMapInput)(nil)).Elem(), DedicatedServerInstallTaskMap{})
	pulumi.RegisterOutputType(DedicatedServerInstallTaskOutput{})
	pulumi.RegisterOutputType(DedicatedServerInstallTaskArrayOutput{})
	pulumi.RegisterOutputType(DedicatedServerInstallTaskMapOutput{})
}
