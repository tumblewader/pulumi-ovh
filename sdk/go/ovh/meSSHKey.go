// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ovh

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates an SSH Key.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-ovh/sdk/go/ovh"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := ovh.NewMeSSHKey(ctx, "mykey", &ovh.MeSSHKeyArgs{
// 			Key:     pulumi.String("ssh-ed25519 AAAAC3..."),
// 			KeyName: pulumi.String("mykey"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type MeSSHKey struct {
	pulumi.CustomResourceState

	// True when this public SSH key is used for rescue mode and reinstallations.
	Default pulumi.BoolOutput `pulumi:"default"`
	// The content of the public key in the form "ssh-algo content", e.g. "ssh-ed25519 AAAAC3...".
	Key pulumi.StringOutput `pulumi:"key"`
	// The friendly name of this SSH key.
	KeyName pulumi.StringOutput `pulumi:"keyName"`
}

// NewMeSSHKey registers a new resource with the given unique name, arguments, and options.
func NewMeSSHKey(ctx *pulumi.Context,
	name string, args *MeSSHKeyArgs, opts ...pulumi.ResourceOption) (*MeSSHKey, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Key == nil {
		return nil, errors.New("invalid value for required argument 'Key'")
	}
	if args.KeyName == nil {
		return nil, errors.New("invalid value for required argument 'KeyName'")
	}
	var resource MeSSHKey
	err := ctx.RegisterResource("ovh:index/meSSHKey:MeSSHKey", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMeSSHKey gets an existing MeSSHKey resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMeSSHKey(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MeSSHKeyState, opts ...pulumi.ResourceOption) (*MeSSHKey, error) {
	var resource MeSSHKey
	err := ctx.ReadResource("ovh:index/meSSHKey:MeSSHKey", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MeSSHKey resources.
type meSSHKeyState struct {
	// True when this public SSH key is used for rescue mode and reinstallations.
	Default *bool `pulumi:"default"`
	// The content of the public key in the form "ssh-algo content", e.g. "ssh-ed25519 AAAAC3...".
	Key *string `pulumi:"key"`
	// The friendly name of this SSH key.
	KeyName *string `pulumi:"keyName"`
}

type MeSSHKeyState struct {
	// True when this public SSH key is used for rescue mode and reinstallations.
	Default pulumi.BoolPtrInput
	// The content of the public key in the form "ssh-algo content", e.g. "ssh-ed25519 AAAAC3...".
	Key pulumi.StringPtrInput
	// The friendly name of this SSH key.
	KeyName pulumi.StringPtrInput
}

func (MeSSHKeyState) ElementType() reflect.Type {
	return reflect.TypeOf((*meSSHKeyState)(nil)).Elem()
}

type meSSHKeyArgs struct {
	// True when this public SSH key is used for rescue mode and reinstallations.
	Default *bool `pulumi:"default"`
	// The content of the public key in the form "ssh-algo content", e.g. "ssh-ed25519 AAAAC3...".
	Key string `pulumi:"key"`
	// The friendly name of this SSH key.
	KeyName string `pulumi:"keyName"`
}

// The set of arguments for constructing a MeSSHKey resource.
type MeSSHKeyArgs struct {
	// True when this public SSH key is used for rescue mode and reinstallations.
	Default pulumi.BoolPtrInput
	// The content of the public key in the form "ssh-algo content", e.g. "ssh-ed25519 AAAAC3...".
	Key pulumi.StringInput
	// The friendly name of this SSH key.
	KeyName pulumi.StringInput
}

func (MeSSHKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*meSSHKeyArgs)(nil)).Elem()
}

type MeSSHKeyInput interface {
	pulumi.Input

	ToMeSSHKeyOutput() MeSSHKeyOutput
	ToMeSSHKeyOutputWithContext(ctx context.Context) MeSSHKeyOutput
}

func (*MeSSHKey) ElementType() reflect.Type {
	return reflect.TypeOf((**MeSSHKey)(nil)).Elem()
}

func (i *MeSSHKey) ToMeSSHKeyOutput() MeSSHKeyOutput {
	return i.ToMeSSHKeyOutputWithContext(context.Background())
}

func (i *MeSSHKey) ToMeSSHKeyOutputWithContext(ctx context.Context) MeSSHKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MeSSHKeyOutput)
}

// MeSSHKeyArrayInput is an input type that accepts MeSSHKeyArray and MeSSHKeyArrayOutput values.
// You can construct a concrete instance of `MeSSHKeyArrayInput` via:
//
//          MeSSHKeyArray{ MeSSHKeyArgs{...} }
type MeSSHKeyArrayInput interface {
	pulumi.Input

	ToMeSSHKeyArrayOutput() MeSSHKeyArrayOutput
	ToMeSSHKeyArrayOutputWithContext(context.Context) MeSSHKeyArrayOutput
}

type MeSSHKeyArray []MeSSHKeyInput

func (MeSSHKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MeSSHKey)(nil)).Elem()
}

func (i MeSSHKeyArray) ToMeSSHKeyArrayOutput() MeSSHKeyArrayOutput {
	return i.ToMeSSHKeyArrayOutputWithContext(context.Background())
}

func (i MeSSHKeyArray) ToMeSSHKeyArrayOutputWithContext(ctx context.Context) MeSSHKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MeSSHKeyArrayOutput)
}

// MeSSHKeyMapInput is an input type that accepts MeSSHKeyMap and MeSSHKeyMapOutput values.
// You can construct a concrete instance of `MeSSHKeyMapInput` via:
//
//          MeSSHKeyMap{ "key": MeSSHKeyArgs{...} }
type MeSSHKeyMapInput interface {
	pulumi.Input

	ToMeSSHKeyMapOutput() MeSSHKeyMapOutput
	ToMeSSHKeyMapOutputWithContext(context.Context) MeSSHKeyMapOutput
}

type MeSSHKeyMap map[string]MeSSHKeyInput

func (MeSSHKeyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MeSSHKey)(nil)).Elem()
}

func (i MeSSHKeyMap) ToMeSSHKeyMapOutput() MeSSHKeyMapOutput {
	return i.ToMeSSHKeyMapOutputWithContext(context.Background())
}

func (i MeSSHKeyMap) ToMeSSHKeyMapOutputWithContext(ctx context.Context) MeSSHKeyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MeSSHKeyMapOutput)
}

type MeSSHKeyOutput struct{ *pulumi.OutputState }

func (MeSSHKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MeSSHKey)(nil)).Elem()
}

func (o MeSSHKeyOutput) ToMeSSHKeyOutput() MeSSHKeyOutput {
	return o
}

func (o MeSSHKeyOutput) ToMeSSHKeyOutputWithContext(ctx context.Context) MeSSHKeyOutput {
	return o
}

type MeSSHKeyArrayOutput struct{ *pulumi.OutputState }

func (MeSSHKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MeSSHKey)(nil)).Elem()
}

func (o MeSSHKeyArrayOutput) ToMeSSHKeyArrayOutput() MeSSHKeyArrayOutput {
	return o
}

func (o MeSSHKeyArrayOutput) ToMeSSHKeyArrayOutputWithContext(ctx context.Context) MeSSHKeyArrayOutput {
	return o
}

func (o MeSSHKeyArrayOutput) Index(i pulumi.IntInput) MeSSHKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MeSSHKey {
		return vs[0].([]*MeSSHKey)[vs[1].(int)]
	}).(MeSSHKeyOutput)
}

type MeSSHKeyMapOutput struct{ *pulumi.OutputState }

func (MeSSHKeyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MeSSHKey)(nil)).Elem()
}

func (o MeSSHKeyMapOutput) ToMeSSHKeyMapOutput() MeSSHKeyMapOutput {
	return o
}

func (o MeSSHKeyMapOutput) ToMeSSHKeyMapOutputWithContext(ctx context.Context) MeSSHKeyMapOutput {
	return o
}

func (o MeSSHKeyMapOutput) MapIndex(k pulumi.StringInput) MeSSHKeyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MeSSHKey {
		return vs[0].(map[string]*MeSSHKey)[vs[1].(string)]
	}).(MeSSHKeyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MeSSHKeyInput)(nil)).Elem(), &MeSSHKey{})
	pulumi.RegisterInputType(reflect.TypeOf((*MeSSHKeyArrayInput)(nil)).Elem(), MeSSHKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MeSSHKeyMapInput)(nil)).Elem(), MeSSHKeyMap{})
	pulumi.RegisterOutputType(MeSSHKeyOutput{})
	pulumi.RegisterOutputType(MeSSHKeyArrayOutput{})
	pulumi.RegisterOutputType(MeSSHKeyMapOutput{})
}
