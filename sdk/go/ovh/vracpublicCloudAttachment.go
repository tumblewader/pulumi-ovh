// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ovh

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type VRACPublicCloudAttachment struct {
	pulumi.CustomResourceState

	// The id of the public cloud project. If omitted,
	// the `OVH_PROJECT_ID` environment variable is used.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The id of the vrack. If omitted, the `OVH_VRACK_ID`
	// environment variable is used.
	VrackId pulumi.StringOutput `pulumi:"vrackId"`
}

// NewVRACPublicCloudAttachment registers a new resource with the given unique name, arguments, and options.
func NewVRACPublicCloudAttachment(ctx *pulumi.Context,
	name string, args *VRACPublicCloudAttachmentArgs, opts ...pulumi.ResourceOption) (*VRACPublicCloudAttachment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.VrackId == nil {
		return nil, errors.New("invalid value for required argument 'VrackId'")
	}
	var resource VRACPublicCloudAttachment
	err := ctx.RegisterResource("ovh:index/vRACPublicCloudAttachment:VRACPublicCloudAttachment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVRACPublicCloudAttachment gets an existing VRACPublicCloudAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVRACPublicCloudAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VRACPublicCloudAttachmentState, opts ...pulumi.ResourceOption) (*VRACPublicCloudAttachment, error) {
	var resource VRACPublicCloudAttachment
	err := ctx.ReadResource("ovh:index/vRACPublicCloudAttachment:VRACPublicCloudAttachment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VRACPublicCloudAttachment resources.
type vracpublicCloudAttachmentState struct {
	// The id of the public cloud project. If omitted,
	// the `OVH_PROJECT_ID` environment variable is used.
	ProjectId *string `pulumi:"projectId"`
	// The id of the vrack. If omitted, the `OVH_VRACK_ID`
	// environment variable is used.
	VrackId *string `pulumi:"vrackId"`
}

type VRACPublicCloudAttachmentState struct {
	// The id of the public cloud project. If omitted,
	// the `OVH_PROJECT_ID` environment variable is used.
	ProjectId pulumi.StringPtrInput
	// The id of the vrack. If omitted, the `OVH_VRACK_ID`
	// environment variable is used.
	VrackId pulumi.StringPtrInput
}

func (VRACPublicCloudAttachmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*vracpublicCloudAttachmentState)(nil)).Elem()
}

type vracpublicCloudAttachmentArgs struct {
	// The id of the public cloud project. If omitted,
	// the `OVH_PROJECT_ID` environment variable is used.
	ProjectId string `pulumi:"projectId"`
	// The id of the vrack. If omitted, the `OVH_VRACK_ID`
	// environment variable is used.
	VrackId string `pulumi:"vrackId"`
}

// The set of arguments for constructing a VRACPublicCloudAttachment resource.
type VRACPublicCloudAttachmentArgs struct {
	// The id of the public cloud project. If omitted,
	// the `OVH_PROJECT_ID` environment variable is used.
	ProjectId pulumi.StringInput
	// The id of the vrack. If omitted, the `OVH_VRACK_ID`
	// environment variable is used.
	VrackId pulumi.StringInput
}

func (VRACPublicCloudAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vracpublicCloudAttachmentArgs)(nil)).Elem()
}

type VRACPublicCloudAttachmentInput interface {
	pulumi.Input

	ToVRACPublicCloudAttachmentOutput() VRACPublicCloudAttachmentOutput
	ToVRACPublicCloudAttachmentOutputWithContext(ctx context.Context) VRACPublicCloudAttachmentOutput
}

func (*VRACPublicCloudAttachment) ElementType() reflect.Type {
	return reflect.TypeOf((**VRACPublicCloudAttachment)(nil)).Elem()
}

func (i *VRACPublicCloudAttachment) ToVRACPublicCloudAttachmentOutput() VRACPublicCloudAttachmentOutput {
	return i.ToVRACPublicCloudAttachmentOutputWithContext(context.Background())
}

func (i *VRACPublicCloudAttachment) ToVRACPublicCloudAttachmentOutputWithContext(ctx context.Context) VRACPublicCloudAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VRACPublicCloudAttachmentOutput)
}

// VRACPublicCloudAttachmentArrayInput is an input type that accepts VRACPublicCloudAttachmentArray and VRACPublicCloudAttachmentArrayOutput values.
// You can construct a concrete instance of `VRACPublicCloudAttachmentArrayInput` via:
//
//          VRACPublicCloudAttachmentArray{ VRACPublicCloudAttachmentArgs{...} }
type VRACPublicCloudAttachmentArrayInput interface {
	pulumi.Input

	ToVRACPublicCloudAttachmentArrayOutput() VRACPublicCloudAttachmentArrayOutput
	ToVRACPublicCloudAttachmentArrayOutputWithContext(context.Context) VRACPublicCloudAttachmentArrayOutput
}

type VRACPublicCloudAttachmentArray []VRACPublicCloudAttachmentInput

func (VRACPublicCloudAttachmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VRACPublicCloudAttachment)(nil)).Elem()
}

func (i VRACPublicCloudAttachmentArray) ToVRACPublicCloudAttachmentArrayOutput() VRACPublicCloudAttachmentArrayOutput {
	return i.ToVRACPublicCloudAttachmentArrayOutputWithContext(context.Background())
}

func (i VRACPublicCloudAttachmentArray) ToVRACPublicCloudAttachmentArrayOutputWithContext(ctx context.Context) VRACPublicCloudAttachmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VRACPublicCloudAttachmentArrayOutput)
}

// VRACPublicCloudAttachmentMapInput is an input type that accepts VRACPublicCloudAttachmentMap and VRACPublicCloudAttachmentMapOutput values.
// You can construct a concrete instance of `VRACPublicCloudAttachmentMapInput` via:
//
//          VRACPublicCloudAttachmentMap{ "key": VRACPublicCloudAttachmentArgs{...} }
type VRACPublicCloudAttachmentMapInput interface {
	pulumi.Input

	ToVRACPublicCloudAttachmentMapOutput() VRACPublicCloudAttachmentMapOutput
	ToVRACPublicCloudAttachmentMapOutputWithContext(context.Context) VRACPublicCloudAttachmentMapOutput
}

type VRACPublicCloudAttachmentMap map[string]VRACPublicCloudAttachmentInput

func (VRACPublicCloudAttachmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VRACPublicCloudAttachment)(nil)).Elem()
}

func (i VRACPublicCloudAttachmentMap) ToVRACPublicCloudAttachmentMapOutput() VRACPublicCloudAttachmentMapOutput {
	return i.ToVRACPublicCloudAttachmentMapOutputWithContext(context.Background())
}

func (i VRACPublicCloudAttachmentMap) ToVRACPublicCloudAttachmentMapOutputWithContext(ctx context.Context) VRACPublicCloudAttachmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VRACPublicCloudAttachmentMapOutput)
}

type VRACPublicCloudAttachmentOutput struct{ *pulumi.OutputState }

func (VRACPublicCloudAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VRACPublicCloudAttachment)(nil)).Elem()
}

func (o VRACPublicCloudAttachmentOutput) ToVRACPublicCloudAttachmentOutput() VRACPublicCloudAttachmentOutput {
	return o
}

func (o VRACPublicCloudAttachmentOutput) ToVRACPublicCloudAttachmentOutputWithContext(ctx context.Context) VRACPublicCloudAttachmentOutput {
	return o
}

type VRACPublicCloudAttachmentArrayOutput struct{ *pulumi.OutputState }

func (VRACPublicCloudAttachmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VRACPublicCloudAttachment)(nil)).Elem()
}

func (o VRACPublicCloudAttachmentArrayOutput) ToVRACPublicCloudAttachmentArrayOutput() VRACPublicCloudAttachmentArrayOutput {
	return o
}

func (o VRACPublicCloudAttachmentArrayOutput) ToVRACPublicCloudAttachmentArrayOutputWithContext(ctx context.Context) VRACPublicCloudAttachmentArrayOutput {
	return o
}

func (o VRACPublicCloudAttachmentArrayOutput) Index(i pulumi.IntInput) VRACPublicCloudAttachmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VRACPublicCloudAttachment {
		return vs[0].([]*VRACPublicCloudAttachment)[vs[1].(int)]
	}).(VRACPublicCloudAttachmentOutput)
}

type VRACPublicCloudAttachmentMapOutput struct{ *pulumi.OutputState }

func (VRACPublicCloudAttachmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VRACPublicCloudAttachment)(nil)).Elem()
}

func (o VRACPublicCloudAttachmentMapOutput) ToVRACPublicCloudAttachmentMapOutput() VRACPublicCloudAttachmentMapOutput {
	return o
}

func (o VRACPublicCloudAttachmentMapOutput) ToVRACPublicCloudAttachmentMapOutputWithContext(ctx context.Context) VRACPublicCloudAttachmentMapOutput {
	return o
}

func (o VRACPublicCloudAttachmentMapOutput) MapIndex(k pulumi.StringInput) VRACPublicCloudAttachmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VRACPublicCloudAttachment {
		return vs[0].(map[string]*VRACPublicCloudAttachment)[vs[1].(string)]
	}).(VRACPublicCloudAttachmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VRACPublicCloudAttachmentInput)(nil)).Elem(), &VRACPublicCloudAttachment{})
	pulumi.RegisterInputType(reflect.TypeOf((*VRACPublicCloudAttachmentArrayInput)(nil)).Elem(), VRACPublicCloudAttachmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VRACPublicCloudAttachmentMapInput)(nil)).Elem(), VRACPublicCloudAttachmentMap{})
	pulumi.RegisterOutputType(VRACPublicCloudAttachmentOutput{})
	pulumi.RegisterOutputType(VRACPublicCloudAttachmentArrayOutput{})
	pulumi.RegisterOutputType(VRACPublicCloudAttachmentMapOutput{})
}
