// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ovh

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a user in a public cloud project.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-ovh/sdk/go/ovh"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := ovh.NewCloudUser(ctx, "user1", &ovh.CloudUserArgs{
// 			ProjectId: pulumi.String("67890"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type CloudUser struct {
	pulumi.CustomResourceState

	// the date the user was created.
	CreationDate pulumi.StringOutput `pulumi:"creationDate"`
	// A description associated with the user.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// a convenient map representing an openstackRc file.
	// Note: no password nor sensitive token is set in this map.
	OpenstackRc pulumi.MapOutput `pulumi:"openstackRc"`
	// (Sensitive) the password generated for the user. The password can
	// be used with the Openstack API. This attribute is sensitive and will only be
	// retrieve once during creation.
	Password pulumi.StringOutput `pulumi:"password"`
	// The id of the public cloud project. If omitted,
	// the `OVH_PROJECT_ID` environment variable is used. DEPRECATED. Use `serviceName` instead.
	ProjectId pulumi.StringPtrOutput `pulumi:"projectId"`
	// The name of a role. See `roleNames`.
	RoleName pulumi.StringPtrOutput `pulumi:"roleName"`
	// A list of role names. Values can be:
	// - administrator,
	// - aiTrainingOperator
	// - authentication
	// - backupOperator
	// - computeOperator
	// - imageOperator
	// - infrastructureSupervisor
	// - networkOperator
	// - networkSecurityOperator
	// - objectstoreOperator
	// - volume_operator
	RoleNames pulumi.StringArrayOutput `pulumi:"roleNames"`
	// A list of roles associated with the user.
	Roles CloudUserRoleArrayOutput `pulumi:"roles"`
	// The id of the public cloud project. Conflicts with `projectId`.
	ServiceName pulumi.StringPtrOutput `pulumi:"serviceName"`
	// the status of the user. should be normally set to 'ok'.
	Status pulumi.StringOutput `pulumi:"status"`
	// the username generated for the user. This username can be used with
	// the Openstack API.
	Username pulumi.StringOutput `pulumi:"username"`
}

// NewCloudUser registers a new resource with the given unique name, arguments, and options.
func NewCloudUser(ctx *pulumi.Context,
	name string, args *CloudUserArgs, opts ...pulumi.ResourceOption) (*CloudUser, error) {
	if args == nil {
		args = &CloudUserArgs{}
	}

	var resource CloudUser
	err := ctx.RegisterResource("ovh:index/cloudUser:CloudUser", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCloudUser gets an existing CloudUser resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCloudUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CloudUserState, opts ...pulumi.ResourceOption) (*CloudUser, error) {
	var resource CloudUser
	err := ctx.ReadResource("ovh:index/cloudUser:CloudUser", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CloudUser resources.
type cloudUserState struct {
	// the date the user was created.
	CreationDate *string `pulumi:"creationDate"`
	// A description associated with the user.
	Description *string `pulumi:"description"`
	// a convenient map representing an openstackRc file.
	// Note: no password nor sensitive token is set in this map.
	OpenstackRc map[string]interface{} `pulumi:"openstackRc"`
	// (Sensitive) the password generated for the user. The password can
	// be used with the Openstack API. This attribute is sensitive and will only be
	// retrieve once during creation.
	Password *string `pulumi:"password"`
	// The id of the public cloud project. If omitted,
	// the `OVH_PROJECT_ID` environment variable is used. DEPRECATED. Use `serviceName` instead.
	ProjectId *string `pulumi:"projectId"`
	// The name of a role. See `roleNames`.
	RoleName *string `pulumi:"roleName"`
	// A list of role names. Values can be:
	// - administrator,
	// - aiTrainingOperator
	// - authentication
	// - backupOperator
	// - computeOperator
	// - imageOperator
	// - infrastructureSupervisor
	// - networkOperator
	// - networkSecurityOperator
	// - objectstoreOperator
	// - volume_operator
	RoleNames []string `pulumi:"roleNames"`
	// A list of roles associated with the user.
	Roles []CloudUserRole `pulumi:"roles"`
	// The id of the public cloud project. Conflicts with `projectId`.
	ServiceName *string `pulumi:"serviceName"`
	// the status of the user. should be normally set to 'ok'.
	Status *string `pulumi:"status"`
	// the username generated for the user. This username can be used with
	// the Openstack API.
	Username *string `pulumi:"username"`
}

type CloudUserState struct {
	// the date the user was created.
	CreationDate pulumi.StringPtrInput
	// A description associated with the user.
	Description pulumi.StringPtrInput
	// a convenient map representing an openstackRc file.
	// Note: no password nor sensitive token is set in this map.
	OpenstackRc pulumi.MapInput
	// (Sensitive) the password generated for the user. The password can
	// be used with the Openstack API. This attribute is sensitive and will only be
	// retrieve once during creation.
	Password pulumi.StringPtrInput
	// The id of the public cloud project. If omitted,
	// the `OVH_PROJECT_ID` environment variable is used. DEPRECATED. Use `serviceName` instead.
	ProjectId pulumi.StringPtrInput
	// The name of a role. See `roleNames`.
	RoleName pulumi.StringPtrInput
	// A list of role names. Values can be:
	// - administrator,
	// - aiTrainingOperator
	// - authentication
	// - backupOperator
	// - computeOperator
	// - imageOperator
	// - infrastructureSupervisor
	// - networkOperator
	// - networkSecurityOperator
	// - objectstoreOperator
	// - volume_operator
	RoleNames pulumi.StringArrayInput
	// A list of roles associated with the user.
	Roles CloudUserRoleArrayInput
	// The id of the public cloud project. Conflicts with `projectId`.
	ServiceName pulumi.StringPtrInput
	// the status of the user. should be normally set to 'ok'.
	Status pulumi.StringPtrInput
	// the username generated for the user. This username can be used with
	// the Openstack API.
	Username pulumi.StringPtrInput
}

func (CloudUserState) ElementType() reflect.Type {
	return reflect.TypeOf((*cloudUserState)(nil)).Elem()
}

type cloudUserArgs struct {
	// A description associated with the user.
	Description *string `pulumi:"description"`
	// a convenient map representing an openstackRc file.
	// Note: no password nor sensitive token is set in this map.
	OpenstackRc map[string]interface{} `pulumi:"openstackRc"`
	// The id of the public cloud project. If omitted,
	// the `OVH_PROJECT_ID` environment variable is used. DEPRECATED. Use `serviceName` instead.
	ProjectId *string `pulumi:"projectId"`
	// The name of a role. See `roleNames`.
	RoleName *string `pulumi:"roleName"`
	// A list of role names. Values can be:
	// - administrator,
	// - aiTrainingOperator
	// - authentication
	// - backupOperator
	// - computeOperator
	// - imageOperator
	// - infrastructureSupervisor
	// - networkOperator
	// - networkSecurityOperator
	// - objectstoreOperator
	// - volume_operator
	RoleNames []string `pulumi:"roleNames"`
	// The id of the public cloud project. Conflicts with `projectId`.
	ServiceName *string `pulumi:"serviceName"`
}

// The set of arguments for constructing a CloudUser resource.
type CloudUserArgs struct {
	// A description associated with the user.
	Description pulumi.StringPtrInput
	// a convenient map representing an openstackRc file.
	// Note: no password nor sensitive token is set in this map.
	OpenstackRc pulumi.MapInput
	// The id of the public cloud project. If omitted,
	// the `OVH_PROJECT_ID` environment variable is used. DEPRECATED. Use `serviceName` instead.
	ProjectId pulumi.StringPtrInput
	// The name of a role. See `roleNames`.
	RoleName pulumi.StringPtrInput
	// A list of role names. Values can be:
	// - administrator,
	// - aiTrainingOperator
	// - authentication
	// - backupOperator
	// - computeOperator
	// - imageOperator
	// - infrastructureSupervisor
	// - networkOperator
	// - networkSecurityOperator
	// - objectstoreOperator
	// - volume_operator
	RoleNames pulumi.StringArrayInput
	// The id of the public cloud project. Conflicts with `projectId`.
	ServiceName pulumi.StringPtrInput
}

func (CloudUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cloudUserArgs)(nil)).Elem()
}

type CloudUserInput interface {
	pulumi.Input

	ToCloudUserOutput() CloudUserOutput
	ToCloudUserOutputWithContext(ctx context.Context) CloudUserOutput
}

func (*CloudUser) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudUser)(nil)).Elem()
}

func (i *CloudUser) ToCloudUserOutput() CloudUserOutput {
	return i.ToCloudUserOutputWithContext(context.Background())
}

func (i *CloudUser) ToCloudUserOutputWithContext(ctx context.Context) CloudUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudUserOutput)
}

// CloudUserArrayInput is an input type that accepts CloudUserArray and CloudUserArrayOutput values.
// You can construct a concrete instance of `CloudUserArrayInput` via:
//
//          CloudUserArray{ CloudUserArgs{...} }
type CloudUserArrayInput interface {
	pulumi.Input

	ToCloudUserArrayOutput() CloudUserArrayOutput
	ToCloudUserArrayOutputWithContext(context.Context) CloudUserArrayOutput
}

type CloudUserArray []CloudUserInput

func (CloudUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CloudUser)(nil)).Elem()
}

func (i CloudUserArray) ToCloudUserArrayOutput() CloudUserArrayOutput {
	return i.ToCloudUserArrayOutputWithContext(context.Background())
}

func (i CloudUserArray) ToCloudUserArrayOutputWithContext(ctx context.Context) CloudUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudUserArrayOutput)
}

// CloudUserMapInput is an input type that accepts CloudUserMap and CloudUserMapOutput values.
// You can construct a concrete instance of `CloudUserMapInput` via:
//
//          CloudUserMap{ "key": CloudUserArgs{...} }
type CloudUserMapInput interface {
	pulumi.Input

	ToCloudUserMapOutput() CloudUserMapOutput
	ToCloudUserMapOutputWithContext(context.Context) CloudUserMapOutput
}

type CloudUserMap map[string]CloudUserInput

func (CloudUserMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CloudUser)(nil)).Elem()
}

func (i CloudUserMap) ToCloudUserMapOutput() CloudUserMapOutput {
	return i.ToCloudUserMapOutputWithContext(context.Background())
}

func (i CloudUserMap) ToCloudUserMapOutputWithContext(ctx context.Context) CloudUserMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudUserMapOutput)
}

type CloudUserOutput struct{ *pulumi.OutputState }

func (CloudUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudUser)(nil)).Elem()
}

func (o CloudUserOutput) ToCloudUserOutput() CloudUserOutput {
	return o
}

func (o CloudUserOutput) ToCloudUserOutputWithContext(ctx context.Context) CloudUserOutput {
	return o
}

type CloudUserArrayOutput struct{ *pulumi.OutputState }

func (CloudUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CloudUser)(nil)).Elem()
}

func (o CloudUserArrayOutput) ToCloudUserArrayOutput() CloudUserArrayOutput {
	return o
}

func (o CloudUserArrayOutput) ToCloudUserArrayOutputWithContext(ctx context.Context) CloudUserArrayOutput {
	return o
}

func (o CloudUserArrayOutput) Index(i pulumi.IntInput) CloudUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CloudUser {
		return vs[0].([]*CloudUser)[vs[1].(int)]
	}).(CloudUserOutput)
}

type CloudUserMapOutput struct{ *pulumi.OutputState }

func (CloudUserMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CloudUser)(nil)).Elem()
}

func (o CloudUserMapOutput) ToCloudUserMapOutput() CloudUserMapOutput {
	return o
}

func (o CloudUserMapOutput) ToCloudUserMapOutputWithContext(ctx context.Context) CloudUserMapOutput {
	return o
}

func (o CloudUserMapOutput) MapIndex(k pulumi.StringInput) CloudUserOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CloudUser {
		return vs[0].(map[string]*CloudUser)[vs[1].(string)]
	}).(CloudUserOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CloudUserInput)(nil)).Elem(), &CloudUser{})
	pulumi.RegisterInputType(reflect.TypeOf((*CloudUserArrayInput)(nil)).Elem(), CloudUserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CloudUserMapInput)(nil)).Elem(), CloudUserMap{})
	pulumi.RegisterOutputType(CloudUserOutput{})
	pulumi.RegisterOutputType(CloudUserArrayOutput{})
	pulumi.RegisterOutputType(CloudUserMapOutput{})
}
