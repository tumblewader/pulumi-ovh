// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ovh

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Attach a Public Cloud Project to a VRack.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-ovh/sdk/go/ovh"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := ovh.NewVRACCloudProject(ctx, "vcp", &ovh.VRACCloudProjectArgs{
// 			ProjectId: pulumi.String("67890"),
// 			VrackId:   pulumi.String("12345"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type VRACCloudProject struct {
	pulumi.CustomResourceState

	// The id of the public cloud project. If omitted,
	// the `OVH_PROJECT_ID` environment variable is used.
	// Note: The use of environment variable is deprecated.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The id of the vrack. If omitted, the `OVH_VRACK_ID`
	// environment variable is used.
	// Note: The use of environment variable is deprecated.
	VrackId pulumi.StringOutput `pulumi:"vrackId"`
}

// NewVRACCloudProject registers a new resource with the given unique name, arguments, and options.
func NewVRACCloudProject(ctx *pulumi.Context,
	name string, args *VRACCloudProjectArgs, opts ...pulumi.ResourceOption) (*VRACCloudProject, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.VrackId == nil {
		return nil, errors.New("invalid value for required argument 'VrackId'")
	}
	var resource VRACCloudProject
	err := ctx.RegisterResource("ovh:index/vRACCloudProject:VRACCloudProject", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVRACCloudProject gets an existing VRACCloudProject resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVRACCloudProject(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VRACCloudProjectState, opts ...pulumi.ResourceOption) (*VRACCloudProject, error) {
	var resource VRACCloudProject
	err := ctx.ReadResource("ovh:index/vRACCloudProject:VRACCloudProject", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VRACCloudProject resources.
type vraccloudProjectState struct {
	// The id of the public cloud project. If omitted,
	// the `OVH_PROJECT_ID` environment variable is used.
	// Note: The use of environment variable is deprecated.
	ProjectId *string `pulumi:"projectId"`
	// The id of the vrack. If omitted, the `OVH_VRACK_ID`
	// environment variable is used.
	// Note: The use of environment variable is deprecated.
	VrackId *string `pulumi:"vrackId"`
}

type VRACCloudProjectState struct {
	// The id of the public cloud project. If omitted,
	// the `OVH_PROJECT_ID` environment variable is used.
	// Note: The use of environment variable is deprecated.
	ProjectId pulumi.StringPtrInput
	// The id of the vrack. If omitted, the `OVH_VRACK_ID`
	// environment variable is used.
	// Note: The use of environment variable is deprecated.
	VrackId pulumi.StringPtrInput
}

func (VRACCloudProjectState) ElementType() reflect.Type {
	return reflect.TypeOf((*vraccloudProjectState)(nil)).Elem()
}

type vraccloudProjectArgs struct {
	// The id of the public cloud project. If omitted,
	// the `OVH_PROJECT_ID` environment variable is used.
	// Note: The use of environment variable is deprecated.
	ProjectId string `pulumi:"projectId"`
	// The id of the vrack. If omitted, the `OVH_VRACK_ID`
	// environment variable is used.
	// Note: The use of environment variable is deprecated.
	VrackId string `pulumi:"vrackId"`
}

// The set of arguments for constructing a VRACCloudProject resource.
type VRACCloudProjectArgs struct {
	// The id of the public cloud project. If omitted,
	// the `OVH_PROJECT_ID` environment variable is used.
	// Note: The use of environment variable is deprecated.
	ProjectId pulumi.StringInput
	// The id of the vrack. If omitted, the `OVH_VRACK_ID`
	// environment variable is used.
	// Note: The use of environment variable is deprecated.
	VrackId pulumi.StringInput
}

func (VRACCloudProjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vraccloudProjectArgs)(nil)).Elem()
}

type VRACCloudProjectInput interface {
	pulumi.Input

	ToVRACCloudProjectOutput() VRACCloudProjectOutput
	ToVRACCloudProjectOutputWithContext(ctx context.Context) VRACCloudProjectOutput
}

func (*VRACCloudProject) ElementType() reflect.Type {
	return reflect.TypeOf((**VRACCloudProject)(nil)).Elem()
}

func (i *VRACCloudProject) ToVRACCloudProjectOutput() VRACCloudProjectOutput {
	return i.ToVRACCloudProjectOutputWithContext(context.Background())
}

func (i *VRACCloudProject) ToVRACCloudProjectOutputWithContext(ctx context.Context) VRACCloudProjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VRACCloudProjectOutput)
}

// VRACCloudProjectArrayInput is an input type that accepts VRACCloudProjectArray and VRACCloudProjectArrayOutput values.
// You can construct a concrete instance of `VRACCloudProjectArrayInput` via:
//
//          VRACCloudProjectArray{ VRACCloudProjectArgs{...} }
type VRACCloudProjectArrayInput interface {
	pulumi.Input

	ToVRACCloudProjectArrayOutput() VRACCloudProjectArrayOutput
	ToVRACCloudProjectArrayOutputWithContext(context.Context) VRACCloudProjectArrayOutput
}

type VRACCloudProjectArray []VRACCloudProjectInput

func (VRACCloudProjectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VRACCloudProject)(nil)).Elem()
}

func (i VRACCloudProjectArray) ToVRACCloudProjectArrayOutput() VRACCloudProjectArrayOutput {
	return i.ToVRACCloudProjectArrayOutputWithContext(context.Background())
}

func (i VRACCloudProjectArray) ToVRACCloudProjectArrayOutputWithContext(ctx context.Context) VRACCloudProjectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VRACCloudProjectArrayOutput)
}

// VRACCloudProjectMapInput is an input type that accepts VRACCloudProjectMap and VRACCloudProjectMapOutput values.
// You can construct a concrete instance of `VRACCloudProjectMapInput` via:
//
//          VRACCloudProjectMap{ "key": VRACCloudProjectArgs{...} }
type VRACCloudProjectMapInput interface {
	pulumi.Input

	ToVRACCloudProjectMapOutput() VRACCloudProjectMapOutput
	ToVRACCloudProjectMapOutputWithContext(context.Context) VRACCloudProjectMapOutput
}

type VRACCloudProjectMap map[string]VRACCloudProjectInput

func (VRACCloudProjectMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VRACCloudProject)(nil)).Elem()
}

func (i VRACCloudProjectMap) ToVRACCloudProjectMapOutput() VRACCloudProjectMapOutput {
	return i.ToVRACCloudProjectMapOutputWithContext(context.Background())
}

func (i VRACCloudProjectMap) ToVRACCloudProjectMapOutputWithContext(ctx context.Context) VRACCloudProjectMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VRACCloudProjectMapOutput)
}

type VRACCloudProjectOutput struct{ *pulumi.OutputState }

func (VRACCloudProjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VRACCloudProject)(nil)).Elem()
}

func (o VRACCloudProjectOutput) ToVRACCloudProjectOutput() VRACCloudProjectOutput {
	return o
}

func (o VRACCloudProjectOutput) ToVRACCloudProjectOutputWithContext(ctx context.Context) VRACCloudProjectOutput {
	return o
}

type VRACCloudProjectArrayOutput struct{ *pulumi.OutputState }

func (VRACCloudProjectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VRACCloudProject)(nil)).Elem()
}

func (o VRACCloudProjectArrayOutput) ToVRACCloudProjectArrayOutput() VRACCloudProjectArrayOutput {
	return o
}

func (o VRACCloudProjectArrayOutput) ToVRACCloudProjectArrayOutputWithContext(ctx context.Context) VRACCloudProjectArrayOutput {
	return o
}

func (o VRACCloudProjectArrayOutput) Index(i pulumi.IntInput) VRACCloudProjectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VRACCloudProject {
		return vs[0].([]*VRACCloudProject)[vs[1].(int)]
	}).(VRACCloudProjectOutput)
}

type VRACCloudProjectMapOutput struct{ *pulumi.OutputState }

func (VRACCloudProjectMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VRACCloudProject)(nil)).Elem()
}

func (o VRACCloudProjectMapOutput) ToVRACCloudProjectMapOutput() VRACCloudProjectMapOutput {
	return o
}

func (o VRACCloudProjectMapOutput) ToVRACCloudProjectMapOutputWithContext(ctx context.Context) VRACCloudProjectMapOutput {
	return o
}

func (o VRACCloudProjectMapOutput) MapIndex(k pulumi.StringInput) VRACCloudProjectOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VRACCloudProject {
		return vs[0].(map[string]*VRACCloudProject)[vs[1].(string)]
	}).(VRACCloudProjectOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VRACCloudProjectInput)(nil)).Elem(), &VRACCloudProject{})
	pulumi.RegisterInputType(reflect.TypeOf((*VRACCloudProjectArrayInput)(nil)).Elem(), VRACCloudProjectArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VRACCloudProjectMapInput)(nil)).Elem(), VRACCloudProjectMap{})
	pulumi.RegisterOutputType(VRACCloudProjectOutput{})
	pulumi.RegisterOutputType(VRACCloudProjectArrayOutput{})
	pulumi.RegisterOutputType(VRACCloudProjectMapOutput{})
}
