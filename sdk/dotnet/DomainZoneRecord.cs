// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Ovh
{
    /// <summary>
    /// Provides a OVH domain zone record.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Ovh = Pulumi.Ovh;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         // Add a record to a sub-domain
    ///         var test = new Ovh.DomainZoneRecord("test", new Ovh.DomainZoneRecordArgs
    ///         {
    ///             Fieldtype = "A",
    ///             Subdomain = "test",
    ///             Target = "0.0.0.0",
    ///             Ttl = 3600,
    ///             Zone = "testdemo.ovh",
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// OVH record can be imported using the `id` and the `zone`, eg
    /// 
    /// ```sh
    ///  $ pulumi import ovh:index/domainZoneRecord:DomainZoneRecord test 1234OVH_ID.zone.tld
    /// ```
    /// </summary>
    [OvhResourceType("ovh:index/domainZoneRecord:DomainZoneRecord")]
    public partial class DomainZoneRecord : Pulumi.CustomResource
    {
        /// <summary>
        /// The type of the record
        /// </summary>
        [Output("fieldtype")]
        public Output<string> Fieldtype { get; private set; } = null!;

        /// <summary>
        /// The name of the record
        /// </summary>
        [Output("subdomain")]
        public Output<string?> Subdomain { get; private set; } = null!;

        /// <summary>
        /// The value of the record
        /// </summary>
        [Output("target")]
        public Output<string> Target { get; private set; } = null!;

        /// <summary>
        /// The TTL of the record
        /// </summary>
        [Output("ttl")]
        public Output<int?> Ttl { get; private set; } = null!;

        /// <summary>
        /// The domain to add the record to
        /// </summary>
        [Output("zone")]
        public Output<string> Zone { get; private set; } = null!;


        /// <summary>
        /// Create a DomainZoneRecord resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DomainZoneRecord(string name, DomainZoneRecordArgs args, CustomResourceOptions? options = null)
            : base("ovh:index/domainZoneRecord:DomainZoneRecord", name, args ?? new DomainZoneRecordArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DomainZoneRecord(string name, Input<string> id, DomainZoneRecordState? state = null, CustomResourceOptions? options = null)
            : base("ovh:index/domainZoneRecord:DomainZoneRecord", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DomainZoneRecord resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DomainZoneRecord Get(string name, Input<string> id, DomainZoneRecordState? state = null, CustomResourceOptions? options = null)
        {
            return new DomainZoneRecord(name, id, state, options);
        }
    }

    public sealed class DomainZoneRecordArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The type of the record
        /// </summary>
        [Input("fieldtype", required: true)]
        public Input<string> Fieldtype { get; set; } = null!;

        /// <summary>
        /// The name of the record
        /// </summary>
        [Input("subdomain")]
        public Input<string>? Subdomain { get; set; }

        /// <summary>
        /// The value of the record
        /// </summary>
        [Input("target", required: true)]
        public Input<string> Target { get; set; } = null!;

        /// <summary>
        /// The TTL of the record
        /// </summary>
        [Input("ttl")]
        public Input<int>? Ttl { get; set; }

        /// <summary>
        /// The domain to add the record to
        /// </summary>
        [Input("zone", required: true)]
        public Input<string> Zone { get; set; } = null!;

        public DomainZoneRecordArgs()
        {
        }
    }

    public sealed class DomainZoneRecordState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The type of the record
        /// </summary>
        [Input("fieldtype")]
        public Input<string>? Fieldtype { get; set; }

        /// <summary>
        /// The name of the record
        /// </summary>
        [Input("subdomain")]
        public Input<string>? Subdomain { get; set; }

        /// <summary>
        /// The value of the record
        /// </summary>
        [Input("target")]
        public Input<string>? Target { get; set; }

        /// <summary>
        /// The TTL of the record
        /// </summary>
        [Input("ttl")]
        public Input<int>? Ttl { get; set; }

        /// <summary>
        /// The domain to add the record to
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public DomainZoneRecordState()
        {
        }
    }
}
