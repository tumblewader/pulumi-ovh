// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Ovh
{
    public static class GetDedicatedServerBoots
    {
        /// <summary>
        /// Use this data source to get the list of compatible netboots for a dedicated server associated with your OVH Account.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Ovh = Pulumi.Ovh;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var netboots = Output.Create(Ovh.GetDedicatedServerBoots.InvokeAsync(new Ovh.GetDedicatedServerBootsArgs
        ///         {
        ///             BootType = "harddisk",
        ///             ServiceName = "myserver",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetDedicatedServerBootsResult> InvokeAsync(GetDedicatedServerBootsArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetDedicatedServerBootsResult>("ovh:index/getDedicatedServerBoots:getDedicatedServerBoots", args ?? new GetDedicatedServerBootsArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to get the list of compatible netboots for a dedicated server associated with your OVH Account.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Ovh = Pulumi.Ovh;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var netboots = Output.Create(Ovh.GetDedicatedServerBoots.InvokeAsync(new Ovh.GetDedicatedServerBootsArgs
        ///         {
        ///             BootType = "harddisk",
        ///             ServiceName = "myserver",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetDedicatedServerBootsResult> Invoke(GetDedicatedServerBootsInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetDedicatedServerBootsResult>("ovh:index/getDedicatedServerBoots:getDedicatedServerBoots", args ?? new GetDedicatedServerBootsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDedicatedServerBootsArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Filter the value of bootType property (harddisk, rescue, ipxeCustomerScript, internal, network)
        /// </summary>
        [Input("bootType")]
        public string? BootType { get; set; }

        [Input("kernel")]
        public string? Kernel { get; set; }

        /// <summary>
        /// The internal name of your dedicated server.
        /// </summary>
        [Input("serviceName", required: true)]
        public string ServiceName { get; set; } = null!;

        public GetDedicatedServerBootsArgs()
        {
        }
    }

    public sealed class GetDedicatedServerBootsInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Filter the value of bootType property (harddisk, rescue, ipxeCustomerScript, internal, network)
        /// </summary>
        [Input("bootType")]
        public Input<string>? BootType { get; set; }

        [Input("kernel")]
        public Input<string>? Kernel { get; set; }

        /// <summary>
        /// The internal name of your dedicated server.
        /// </summary>
        [Input("serviceName", required: true)]
        public Input<string> ServiceName { get; set; } = null!;

        public GetDedicatedServerBootsInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetDedicatedServerBootsResult
    {
        public readonly string? BootType;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string? Kernel;
        /// <summary>
        /// The list of dedicated server netboots.
        /// </summary>
        public readonly ImmutableArray<int> Results;
        public readonly string ServiceName;

        [OutputConstructor]
        private GetDedicatedServerBootsResult(
            string? bootType,

            string id,

            string? kernel,

            ImmutableArray<int> results,

            string serviceName)
        {
            BootType = bootType;
            Id = id;
            Kernel = kernel;
            Results = results;
            ServiceName = serviceName;
        }
    }
}
