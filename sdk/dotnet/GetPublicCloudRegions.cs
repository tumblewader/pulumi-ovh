// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Ovh
{
    public static class GetPublicCloudRegions
    {
        /// <summary>
        /// &gt; __DEPRECATED:__ Use `ovh.getCloudRegions` instead.
        /// 
        /// Use this data source to get the regions of a public cloud project.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Ovh = Pulumi.Ovh;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var regions = Output.Create(Ovh.GetPublicCloudRegions.InvokeAsync(new Ovh.GetPublicCloudRegionsArgs
        ///         {
        ///             HasServicesUps = 
        ///             {
        ///                 "network",
        ///             },
        ///             ProjectId = "XXXXXX",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetPublicCloudRegionsResult> InvokeAsync(GetPublicCloudRegionsArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetPublicCloudRegionsResult>("ovh:index/getPublicCloudRegions:getPublicCloudRegions", args ?? new GetPublicCloudRegionsArgs(), options.WithDefaults());

        /// <summary>
        /// &gt; __DEPRECATED:__ Use `ovh.getCloudRegions` instead.
        /// 
        /// Use this data source to get the regions of a public cloud project.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Ovh = Pulumi.Ovh;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var regions = Output.Create(Ovh.GetPublicCloudRegions.InvokeAsync(new Ovh.GetPublicCloudRegionsArgs
        ///         {
        ///             HasServicesUps = 
        ///             {
        ///                 "network",
        ///             },
        ///             ProjectId = "XXXXXX",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetPublicCloudRegionsResult> Invoke(GetPublicCloudRegionsInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetPublicCloudRegionsResult>("ovh:index/getPublicCloudRegions:getPublicCloudRegions", args ?? new GetPublicCloudRegionsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetPublicCloudRegionsArgs : Pulumi.InvokeArgs
    {
        [Input("hasServicesUps")]
        private List<string>? _hasServicesUps;

        /// <summary>
        /// List of services which has to be UP in regions.
        /// Example: "image", "instance", "network", "storage", "volume", "workflow", ...
        /// If left blank, returns all regions associated with the project_id.
        /// </summary>
        public List<string> HasServicesUps
        {
            get => _hasServicesUps ?? (_hasServicesUps = new List<string>());
            set => _hasServicesUps = value;
        }

        /// <summary>
        /// The id of the public cloud project. If omitted,
        /// the `OVH_PROJECT_ID` environment variable is used.
        /// </summary>
        [Input("projectId", required: true)]
        public string ProjectId { get; set; } = null!;

        public GetPublicCloudRegionsArgs()
        {
        }
    }

    public sealed class GetPublicCloudRegionsInvokeArgs : Pulumi.InvokeArgs
    {
        [Input("hasServicesUps")]
        private InputList<string>? _hasServicesUps;

        /// <summary>
        /// List of services which has to be UP in regions.
        /// Example: "image", "instance", "network", "storage", "volume", "workflow", ...
        /// If left blank, returns all regions associated with the project_id.
        /// </summary>
        public InputList<string> HasServicesUps
        {
            get => _hasServicesUps ?? (_hasServicesUps = new InputList<string>());
            set => _hasServicesUps = value;
        }

        /// <summary>
        /// The id of the public cloud project. If omitted,
        /// the `OVH_PROJECT_ID` environment variable is used.
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        public GetPublicCloudRegionsInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetPublicCloudRegionsResult
    {
        public readonly ImmutableArray<string> HasServicesUps;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The list of regions associated with the project, filtered by services UP.
        /// </summary>
        public readonly ImmutableArray<string> Names;
        public readonly string ProjectId;

        [OutputConstructor]
        private GetPublicCloudRegionsResult(
            ImmutableArray<string> hasServicesUps,

            string id,

            ImmutableArray<string> names,

            string projectId)
        {
            HasServicesUps = hasServicesUps;
            Id = id;
            Names = names;
            ProjectId = projectId;
        }
    }
}
