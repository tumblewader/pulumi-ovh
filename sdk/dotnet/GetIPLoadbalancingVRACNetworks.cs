// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Ovh
{
    public static class GetIPLoadbalancingVRACNetworks
    {
        /// <summary>
        /// Use this data source to get the list of Vrack network ids available for your IPLoadbalancer associated with your OVH account.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Ovh = Pulumi.Ovh;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var lbNetworks = Output.Create(Ovh.GetIPLoadbalancingVRACNetworks.InvokeAsync(new Ovh.GetIPLoadbalancingVRACNetworksArgs
        ///         {
        ///             ServiceName = "xxx",
        ///             Subnet = "10.0.0.0/24",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetIPLoadbalancingVRACNetworksResult> InvokeAsync(GetIPLoadbalancingVRACNetworksArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetIPLoadbalancingVRACNetworksResult>("ovh:index/getIPLoadbalancingVRACNetworks:getIPLoadbalancingVRACNetworks", args ?? new GetIPLoadbalancingVRACNetworksArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to get the list of Vrack network ids available for your IPLoadbalancer associated with your OVH account.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Ovh = Pulumi.Ovh;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var lbNetworks = Output.Create(Ovh.GetIPLoadbalancingVRACNetworks.InvokeAsync(new Ovh.GetIPLoadbalancingVRACNetworksArgs
        ///         {
        ///             ServiceName = "xxx",
        ///             Subnet = "10.0.0.0/24",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetIPLoadbalancingVRACNetworksResult> Invoke(GetIPLoadbalancingVRACNetworksInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetIPLoadbalancingVRACNetworksResult>("ovh:index/getIPLoadbalancingVRACNetworks:getIPLoadbalancingVRACNetworks", args ?? new GetIPLoadbalancingVRACNetworksInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetIPLoadbalancingVRACNetworksArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The internal name of your IP load balancing
        /// </summary>
        [Input("serviceName", required: true)]
        public string ServiceName { get; set; } = null!;

        /// <summary>
        /// Filters networks on the subnet.
        /// </summary>
        [Input("subnet")]
        public string? Subnet { get; set; }

        /// <summary>
        /// Filters networks on the vlan id.
        /// </summary>
        [Input("vlanId")]
        public int? VlanId { get; set; }

        public GetIPLoadbalancingVRACNetworksArgs()
        {
        }
    }

    public sealed class GetIPLoadbalancingVRACNetworksInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The internal name of your IP load balancing
        /// </summary>
        [Input("serviceName", required: true)]
        public Input<string> ServiceName { get; set; } = null!;

        /// <summary>
        /// Filters networks on the subnet.
        /// </summary>
        [Input("subnet")]
        public Input<string>? Subnet { get; set; }

        /// <summary>
        /// Filters networks on the vlan id.
        /// </summary>
        [Input("vlanId")]
        public Input<int>? VlanId { get; set; }

        public GetIPLoadbalancingVRACNetworksInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetIPLoadbalancingVRACNetworksResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The list of vrack network ids.
        /// </summary>
        public readonly ImmutableArray<int> Results;
        public readonly string ServiceName;
        public readonly string? Subnet;
        public readonly int? VlanId;

        [OutputConstructor]
        private GetIPLoadbalancingVRACNetworksResult(
            string id,

            ImmutableArray<int> results,

            string serviceName,

            string? subnet,

            int? vlanId)
        {
            Id = id;
            Results = results;
            ServiceName = serviceName;
            Subnet = subnet;
            VlanId = vlanId;
        }
    }
}
