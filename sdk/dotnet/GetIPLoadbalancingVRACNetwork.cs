// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Ovh
{
    public static class GetIPLoadbalancingVRACNetwork
    {
        /// <summary>
        /// Use this data source to get the details of Vrack network available for your IPLoadbalancer associated with your OVH account.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Ovh = Pulumi.Ovh;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var lbNetwork = Output.Create(Ovh.GetIPLoadbalancingVRACNetwork.InvokeAsync(new Ovh.GetIPLoadbalancingVRACNetworkArgs
        ///         {
        ///             ServiceName = "xxx",
        ///             VrackNetworkId = "yyy",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetIPLoadbalancingVRACNetworkResult> InvokeAsync(GetIPLoadbalancingVRACNetworkArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetIPLoadbalancingVRACNetworkResult>("ovh:index/getIPLoadbalancingVRACNetwork:getIPLoadbalancingVRACNetwork", args ?? new GetIPLoadbalancingVRACNetworkArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to get the details of Vrack network available for your IPLoadbalancer associated with your OVH account.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Ovh = Pulumi.Ovh;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var lbNetwork = Output.Create(Ovh.GetIPLoadbalancingVRACNetwork.InvokeAsync(new Ovh.GetIPLoadbalancingVRACNetworkArgs
        ///         {
        ///             ServiceName = "xxx",
        ///             VrackNetworkId = "yyy",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetIPLoadbalancingVRACNetworkResult> Invoke(GetIPLoadbalancingVRACNetworkInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetIPLoadbalancingVRACNetworkResult>("ovh:index/getIPLoadbalancingVRACNetwork:getIPLoadbalancingVRACNetwork", args ?? new GetIPLoadbalancingVRACNetworkInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetIPLoadbalancingVRACNetworkArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The internal name of your IP load balancing
        /// </summary>
        [Input("serviceName", required: true)]
        public string ServiceName { get; set; } = null!;

        /// <summary>
        /// Internal Load Balancer identifier of the vRack private network
        /// </summary>
        [Input("vrackNetworkId", required: true)]
        public int VrackNetworkId { get; set; }

        public GetIPLoadbalancingVRACNetworkArgs()
        {
        }
    }

    public sealed class GetIPLoadbalancingVRACNetworkInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The internal name of your IP load balancing
        /// </summary>
        [Input("serviceName", required: true)]
        public Input<string> ServiceName { get; set; } = null!;

        /// <summary>
        /// Internal Load Balancer identifier of the vRack private network
        /// </summary>
        [Input("vrackNetworkId", required: true)]
        public Input<int> VrackNetworkId { get; set; } = null!;

        public GetIPLoadbalancingVRACNetworkInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetIPLoadbalancingVRACNetworkResult
    {
        /// <summary>
        /// Human readable name for your vrack network
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// An IP block used as a pool of IPs by this Load Balancer to connect to the servers in this private network. The blck must be in the private network and reserved for the Load Balancer
        /// </summary>
        public readonly string NatIp;
        public readonly string ServiceName;
        /// <summary>
        /// IP block of the private network in the vRack
        /// </summary>
        public readonly string Subnet;
        /// <summary>
        /// VLAN of the private network in the vRack. 0 if the private network is not in a VLAN
        /// </summary>
        public readonly int Vlan;
        public readonly int VrackNetworkId;

        [OutputConstructor]
        private GetIPLoadbalancingVRACNetworkResult(
            string displayName,

            string id,

            string natIp,

            string serviceName,

            string subnet,

            int vlan,

            int vrackNetworkId)
        {
            DisplayName = displayName;
            Id = id;
            NatIp = natIp;
            ServiceName = serviceName;
            Subnet = subnet;
            Vlan = vlan;
            VrackNetworkId = vrackNetworkId;
        }
    }
}
