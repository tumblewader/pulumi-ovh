# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetCloudRegionResult',
    'AwaitableGetCloudRegionResult',
    'get_cloud_region',
    'get_cloud_region_output',
]

@pulumi.output_type
class GetCloudRegionResult:
    """
    A collection of values returned by getCloudRegion.
    """
    def __init__(__self__, continent_code=None, datacenter_location=None, id=None, name=None, project_id=None, services=None):
        if continent_code and not isinstance(continent_code, str):
            raise TypeError("Expected argument 'continent_code' to be a str")
        pulumi.set(__self__, "continent_code", continent_code)
        if datacenter_location and not isinstance(datacenter_location, str):
            raise TypeError("Expected argument 'datacenter_location' to be a str")
        pulumi.set(__self__, "datacenter_location", datacenter_location)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if project_id and not isinstance(project_id, str):
            raise TypeError("Expected argument 'project_id' to be a str")
        pulumi.set(__self__, "project_id", project_id)
        if services and not isinstance(services, list):
            raise TypeError("Expected argument 'services' to be a list")
        pulumi.set(__self__, "services", services)

    @property
    @pulumi.getter(name="continentCode")
    def continent_code(self) -> str:
        """
        the code of the geographic continent the region is running.
        E.g.: EU for Europe, US for America...
        """
        return pulumi.get(self, "continent_code")

    @property
    @pulumi.getter(name="datacenterLocation")
    def datacenter_location(self) -> str:
        """
        The location code of the datacenter.
        E.g.: "GRA", meaning Gravelines, for region "GRA1"
        """
        return pulumi.get(self, "datacenter_location")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        the name of the public cloud service
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> str:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def services(self) -> Sequence['outputs.GetCloudRegionServiceResult']:
        """
        The list of public cloud services running within the region
        """
        return pulumi.get(self, "services")


class AwaitableGetCloudRegionResult(GetCloudRegionResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCloudRegionResult(
            continent_code=self.continent_code,
            datacenter_location=self.datacenter_location,
            id=self.id,
            name=self.name,
            project_id=self.project_id,
            services=self.services)


def get_cloud_region(name: Optional[str] = None,
                     project_id: Optional[str] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCloudRegionResult:
    """
    Use this data source to retrieve information about a region associated with a
    public cloud project. The region must be associated with the project.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_ovh as ovh

    g_ra1 = ovh.get_cloud_region(name="GRA1",
        project_id="XXXXXX")
    ```


    :param str name: The name of the region associated with the public cloud
           project.
    :param str project_id: The id of the public cloud project. If omitted,
           the `OVH_PROJECT_ID` environment variable is used.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['projectId'] = project_id
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('ovh:index/getCloudRegion:getCloudRegion', __args__, opts=opts, typ=GetCloudRegionResult).value

    return AwaitableGetCloudRegionResult(
        continent_code=__ret__.continent_code,
        datacenter_location=__ret__.datacenter_location,
        id=__ret__.id,
        name=__ret__.name,
        project_id=__ret__.project_id,
        services=__ret__.services)


@_utilities.lift_output_func(get_cloud_region)
def get_cloud_region_output(name: Optional[pulumi.Input[str]] = None,
                            project_id: Optional[pulumi.Input[str]] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetCloudRegionResult]:
    """
    Use this data source to retrieve information about a region associated with a
    public cloud project. The region must be associated with the project.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_ovh as ovh

    g_ra1 = ovh.get_cloud_region(name="GRA1",
        project_id="XXXXXX")
    ```


    :param str name: The name of the region associated with the public cloud
           project.
    :param str project_id: The id of the public cloud project. If omitted,
           the `OVH_PROJECT_ID` environment variable is used.
    """
    ...
