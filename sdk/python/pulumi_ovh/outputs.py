# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'CloudNetworkPrivateRegionsStatus',
    'CloudNetworkPrivateSubnetIpPool',
    'CloudUserRole',
    'DedicatedServerInstallTaskDetails',
    'IPLoadbalancingHTTPFarmProbe',
    'IPLoadbalancingHTTPRouteAction',
    'IPLoadbalancingTCPFarmProbe',
    'MeInstallationTemplateCustomization',
    'PubicCloudPrivateNetworkRegionsStatus',
    'PubicCloudPrivateNetworkSubnetIpPool',
    'PublicCloudUserRole',
    'GetCloudRegionServiceResult',
    'GetDedicatedServerVniResult',
    'GetIPLoadbalancingOrderableZoneResult',
    'GetMeInstallationTemplateCustomizationResult',
    'GetMeInstallationTemplatePartitionSchemeResult',
    'GetMeInstallationTemplatePartitionSchemeHardwareRaidResult',
    'GetMeInstallationTemplatePartitionSchemePartitionResult',
    'GetPublicCloudRegionServiceResult',
    'GetVPSDatacenterResult',
    'GetVPSModelResult',
]

@pulumi.output_type
class CloudNetworkPrivateRegionsStatus(dict):
    def __init__(__self__, *,
                 status: str,
                 region: Optional[str] = None):
        """
        :param str status: the status of the network. should be normally set to 'ACTIVE'.
        """
        pulumi.set(__self__, "status", status)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        the status of the network. should be normally set to 'ACTIVE'.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")


@pulumi.output_type
class CloudNetworkPrivateSubnetIpPool(dict):
    def __init__(__self__, *,
                 dhcp: Optional[bool] = None,
                 end: Optional[str] = None,
                 network: Optional[str] = None,
                 region: Optional[str] = None,
                 start: Optional[str] = None):
        """
        :param bool dhcp: Enable DHCP.
               Changing this forces a new resource to be created. Defaults to false.
               _
        :param str end: Last ip for this region.
               Changing this value recreates the subnet.
        :param str network: Global network in CIDR format.
               Changing this value recreates the subnet
        :param str region: The region in which the network subnet will be created.
               Ex.: "GRA1". Changing this value recreates the resource.
        :param str start: First ip for this region.
               Changing this value recreates the subnet.
        """
        if dhcp is not None:
            pulumi.set(__self__, "dhcp", dhcp)
        if end is not None:
            pulumi.set(__self__, "end", end)
        if network is not None:
            pulumi.set(__self__, "network", network)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if start is not None:
            pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter
    def dhcp(self) -> Optional[bool]:
        """
        Enable DHCP.
        Changing this forces a new resource to be created. Defaults to false.
        _
        """
        return pulumi.get(self, "dhcp")

    @property
    @pulumi.getter
    def end(self) -> Optional[str]:
        """
        Last ip for this region.
        Changing this value recreates the subnet.
        """
        return pulumi.get(self, "end")

    @property
    @pulumi.getter
    def network(self) -> Optional[str]:
        """
        Global network in CIDR format.
        Changing this value recreates the subnet
        """
        return pulumi.get(self, "network")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        """
        The region in which the network subnet will be created.
        Ex.: "GRA1". Changing this value recreates the resource.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def start(self) -> Optional[str]:
        """
        First ip for this region.
        Changing this value recreates the subnet.
        """
        return pulumi.get(self, "start")


@pulumi.output_type
class CloudUserRole(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 permissions: Optional[Sequence[str]] = None):
        """
        :param str description: A description associated with the user.
        :param str id: id of the role
        :param str name: name of the role
        :param Sequence[str] permissions: list of permissions associated with the role
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if permissions is not None:
            pulumi.set(__self__, "permissions", permissions)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        A description associated with the user.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        id of the role
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        name of the role
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def permissions(self) -> Optional[Sequence[str]]:
        """
        list of permissions associated with the role
        """
        return pulumi.get(self, "permissions")


@pulumi.output_type
class DedicatedServerInstallTaskDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "changeLog":
            suggest = "change_log"
        elif key == "customHostname":
            suggest = "custom_hostname"
        elif key == "diskGroupId":
            suggest = "disk_group_id"
        elif key == "installRtm":
            suggest = "install_rtm"
        elif key == "installSqlServer":
            suggest = "install_sql_server"
        elif key == "noRaid":
            suggest = "no_raid"
        elif key == "postInstallationScriptLink":
            suggest = "post_installation_script_link"
        elif key == "postInstallationScriptReturn":
            suggest = "post_installation_script_return"
        elif key == "resetHwRaid":
            suggest = "reset_hw_raid"
        elif key == "softRaidDevices":
            suggest = "soft_raid_devices"
        elif key == "sshKeyName":
            suggest = "ssh_key_name"
        elif key == "useDistribKernel":
            suggest = "use_distrib_kernel"
        elif key == "useSpla":
            suggest = "use_spla"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DedicatedServerInstallTaskDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DedicatedServerInstallTaskDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DedicatedServerInstallTaskDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 change_log: Optional[str] = None,
                 custom_hostname: Optional[str] = None,
                 disk_group_id: Optional[int] = None,
                 install_rtm: Optional[bool] = None,
                 install_sql_server: Optional[bool] = None,
                 language: Optional[str] = None,
                 no_raid: Optional[bool] = None,
                 post_installation_script_link: Optional[str] = None,
                 post_installation_script_return: Optional[str] = None,
                 reset_hw_raid: Optional[bool] = None,
                 soft_raid_devices: Optional[int] = None,
                 ssh_key_name: Optional[str] = None,
                 use_distrib_kernel: Optional[bool] = None,
                 use_spla: Optional[bool] = None):
        """
        :param str change_log: Template change log details.
        :param str custom_hostname: Set up the server using the provided hostname instead of the default hostname.
        :param int disk_group_id: Disk group id.
        :param bool install_rtm: set to true to install RTM.
        :param bool install_sql_server: set to true to install sql server (Windows template only).
        :param str language: language.
        :param bool no_raid: set to true to disable RAID.
        :param str post_installation_script_link: Indicate the URL where your postinstall customisation script is located.
        :param str post_installation_script_return: Indicate the string returned by your postinstall customisation script on successful execution. Advice: your script should return a unique validation string in case of succes. A good example is 'loh1Xee7eo OK OK OK UGh8Ang1Gu'.
        :param bool reset_hw_raid: set to true to make a hardware raid reset.
        :param int soft_raid_devices: soft raid devices.
        :param str ssh_key_name: Name of the ssh key that should be installed. Password login will be disabled.
        :param bool use_distrib_kernel: Use the distribution's native kernel instead of the recommended OVH Kernel.
        :param bool use_spla: set to true to use SPLA.
        """
        if change_log is not None:
            pulumi.set(__self__, "change_log", change_log)
        if custom_hostname is not None:
            pulumi.set(__self__, "custom_hostname", custom_hostname)
        if disk_group_id is not None:
            pulumi.set(__self__, "disk_group_id", disk_group_id)
        if install_rtm is not None:
            pulumi.set(__self__, "install_rtm", install_rtm)
        if install_sql_server is not None:
            pulumi.set(__self__, "install_sql_server", install_sql_server)
        if language is not None:
            pulumi.set(__self__, "language", language)
        if no_raid is not None:
            pulumi.set(__self__, "no_raid", no_raid)
        if post_installation_script_link is not None:
            pulumi.set(__self__, "post_installation_script_link", post_installation_script_link)
        if post_installation_script_return is not None:
            pulumi.set(__self__, "post_installation_script_return", post_installation_script_return)
        if reset_hw_raid is not None:
            pulumi.set(__self__, "reset_hw_raid", reset_hw_raid)
        if soft_raid_devices is not None:
            pulumi.set(__self__, "soft_raid_devices", soft_raid_devices)
        if ssh_key_name is not None:
            pulumi.set(__self__, "ssh_key_name", ssh_key_name)
        if use_distrib_kernel is not None:
            pulumi.set(__self__, "use_distrib_kernel", use_distrib_kernel)
        if use_spla is not None:
            pulumi.set(__self__, "use_spla", use_spla)

    @property
    @pulumi.getter(name="changeLog")
    def change_log(self) -> Optional[str]:
        """
        Template change log details.
        """
        return pulumi.get(self, "change_log")

    @property
    @pulumi.getter(name="customHostname")
    def custom_hostname(self) -> Optional[str]:
        """
        Set up the server using the provided hostname instead of the default hostname.
        """
        return pulumi.get(self, "custom_hostname")

    @property
    @pulumi.getter(name="diskGroupId")
    def disk_group_id(self) -> Optional[int]:
        """
        Disk group id.
        """
        return pulumi.get(self, "disk_group_id")

    @property
    @pulumi.getter(name="installRtm")
    def install_rtm(self) -> Optional[bool]:
        """
        set to true to install RTM.
        """
        return pulumi.get(self, "install_rtm")

    @property
    @pulumi.getter(name="installSqlServer")
    def install_sql_server(self) -> Optional[bool]:
        """
        set to true to install sql server (Windows template only).
        """
        return pulumi.get(self, "install_sql_server")

    @property
    @pulumi.getter
    def language(self) -> Optional[str]:
        """
        language.
        """
        return pulumi.get(self, "language")

    @property
    @pulumi.getter(name="noRaid")
    def no_raid(self) -> Optional[bool]:
        """
        set to true to disable RAID.
        """
        return pulumi.get(self, "no_raid")

    @property
    @pulumi.getter(name="postInstallationScriptLink")
    def post_installation_script_link(self) -> Optional[str]:
        """
        Indicate the URL where your postinstall customisation script is located.
        """
        return pulumi.get(self, "post_installation_script_link")

    @property
    @pulumi.getter(name="postInstallationScriptReturn")
    def post_installation_script_return(self) -> Optional[str]:
        """
        Indicate the string returned by your postinstall customisation script on successful execution. Advice: your script should return a unique validation string in case of succes. A good example is 'loh1Xee7eo OK OK OK UGh8Ang1Gu'.
        """
        return pulumi.get(self, "post_installation_script_return")

    @property
    @pulumi.getter(name="resetHwRaid")
    def reset_hw_raid(self) -> Optional[bool]:
        """
        set to true to make a hardware raid reset.
        """
        return pulumi.get(self, "reset_hw_raid")

    @property
    @pulumi.getter(name="softRaidDevices")
    def soft_raid_devices(self) -> Optional[int]:
        """
        soft raid devices.
        """
        return pulumi.get(self, "soft_raid_devices")

    @property
    @pulumi.getter(name="sshKeyName")
    def ssh_key_name(self) -> Optional[str]:
        """
        Name of the ssh key that should be installed. Password login will be disabled.
        """
        return pulumi.get(self, "ssh_key_name")

    @property
    @pulumi.getter(name="useDistribKernel")
    def use_distrib_kernel(self) -> Optional[bool]:
        """
        Use the distribution's native kernel instead of the recommended OVH Kernel.
        """
        return pulumi.get(self, "use_distrib_kernel")

    @property
    @pulumi.getter(name="useSpla")
    def use_spla(self) -> Optional[bool]:
        """
        set to true to use SPLA.
        """
        return pulumi.get(self, "use_spla")


@pulumi.output_type
class IPLoadbalancingHTTPFarmProbe(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "forceSsl":
            suggest = "force_ssl"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IPLoadbalancingHTTPFarmProbe. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IPLoadbalancingHTTPFarmProbe.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IPLoadbalancingHTTPFarmProbe.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 force_ssl: Optional[bool] = None,
                 interval: Optional[int] = None,
                 match: Optional[str] = None,
                 method: Optional[str] = None,
                 negate: Optional[bool] = None,
                 pattern: Optional[str] = None,
                 port: Optional[int] = None,
                 url: Optional[str] = None):
        """
        :param str type: Valid values : `http`, `internal`, `mysql`, `oko`, `pgsql`, `smtp`, `tcp`
        :param bool force_ssl: Force use of SSL (TLS)
        :param int interval: probe interval, Value between 30 and 3600 seconds, default 30
        :param str match: What to mach `pattern` against (`contains`, `default`, `internal`, `matches`, `status`)
        :param str method: HTTP probe method (`GET`, `HEAD`, `OPTIONS`, `internal`)
        :param bool negate: Negate probe result
        :param str pattern: Pattern to match against `match`
        :param int port: Port for backends to recieve traffic on.
        :param str url: URL for HTTP probe type.
        """
        pulumi.set(__self__, "type", type)
        if force_ssl is not None:
            pulumi.set(__self__, "force_ssl", force_ssl)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if match is not None:
            pulumi.set(__self__, "match", match)
        if method is not None:
            pulumi.set(__self__, "method", method)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if pattern is not None:
            pulumi.set(__self__, "pattern", pattern)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Valid values : `http`, `internal`, `mysql`, `oko`, `pgsql`, `smtp`, `tcp`
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="forceSsl")
    def force_ssl(self) -> Optional[bool]:
        """
        Force use of SSL (TLS)
        """
        return pulumi.get(self, "force_ssl")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        """
        probe interval, Value between 30 and 3600 seconds, default 30
        """
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter
    def match(self) -> Optional[str]:
        """
        What to mach `pattern` against (`contains`, `default`, `internal`, `matches`, `status`)
        """
        return pulumi.get(self, "match")

    @property
    @pulumi.getter
    def method(self) -> Optional[str]:
        """
        HTTP probe method (`GET`, `HEAD`, `OPTIONS`, `internal`)
        """
        return pulumi.get(self, "method")

    @property
    @pulumi.getter
    def negate(self) -> Optional[bool]:
        """
        Negate probe result
        """
        return pulumi.get(self, "negate")

    @property
    @pulumi.getter
    def pattern(self) -> Optional[str]:
        """
        Pattern to match against `match`
        """
        return pulumi.get(self, "pattern")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        """
        Port for backends to recieve traffic on.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        """
        URL for HTTP probe type.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class IPLoadbalancingHTTPRouteAction(dict):
    def __init__(__self__, *,
                 type: str,
                 status: Optional[int] = None,
                 target: Optional[str] = None):
        pulumi.set(__self__, "type", type)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if target is not None:
            pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def status(self) -> Optional[int]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def target(self) -> Optional[str]:
        return pulumi.get(self, "target")


@pulumi.output_type
class IPLoadbalancingTCPFarmProbe(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "forceSsl":
            suggest = "force_ssl"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IPLoadbalancingTCPFarmProbe. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IPLoadbalancingTCPFarmProbe.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IPLoadbalancingTCPFarmProbe.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 force_ssl: Optional[bool] = None,
                 interval: Optional[int] = None,
                 match: Optional[str] = None,
                 method: Optional[str] = None,
                 negate: Optional[bool] = None,
                 pattern: Optional[str] = None,
                 port: Optional[int] = None,
                 url: Optional[str] = None):
        """
        :param str type: Valid values : `http`, `internal`, `mysql`, `oko`, `pgsql`, `smtp`, `tcp`
        :param bool force_ssl: Force use of SSL (TLS)
        :param int interval: probe interval, Value between 30 and 3600 seconds, default 30
        :param str match: What to mach `pattern` against (`contains`, `default`, `internal`, `matches`, `status`)
        :param str method: HTTP probe method (`GET`, `HEAD`, `OPTIONS`, `internal`)
        :param bool negate: Negate probe result
        :param str pattern: Pattern to match against `match`
        :param int port: Port for backends to recieve traffic on.
        :param str url: URL for HTTP probe type.
        """
        pulumi.set(__self__, "type", type)
        if force_ssl is not None:
            pulumi.set(__self__, "force_ssl", force_ssl)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if match is not None:
            pulumi.set(__self__, "match", match)
        if method is not None:
            pulumi.set(__self__, "method", method)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if pattern is not None:
            pulumi.set(__self__, "pattern", pattern)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Valid values : `http`, `internal`, `mysql`, `oko`, `pgsql`, `smtp`, `tcp`
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="forceSsl")
    def force_ssl(self) -> Optional[bool]:
        """
        Force use of SSL (TLS)
        """
        return pulumi.get(self, "force_ssl")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        """
        probe interval, Value between 30 and 3600 seconds, default 30
        """
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter
    def match(self) -> Optional[str]:
        """
        What to mach `pattern` against (`contains`, `default`, `internal`, `matches`, `status`)
        """
        return pulumi.get(self, "match")

    @property
    @pulumi.getter
    def method(self) -> Optional[str]:
        """
        HTTP probe method (`GET`, `HEAD`, `OPTIONS`, `internal`)
        """
        return pulumi.get(self, "method")

    @property
    @pulumi.getter
    def negate(self) -> Optional[bool]:
        """
        Negate probe result
        """
        return pulumi.get(self, "negate")

    @property
    @pulumi.getter
    def pattern(self) -> Optional[str]:
        """
        Pattern to match against `match`
        """
        return pulumi.get(self, "pattern")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        """
        Port for backends to recieve traffic on.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        """
        URL for HTTP probe type.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class MeInstallationTemplateCustomization(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "changeLog":
            suggest = "change_log"
        elif key == "customHostname":
            suggest = "custom_hostname"
        elif key == "postInstallationScriptLink":
            suggest = "post_installation_script_link"
        elif key == "postInstallationScriptReturn":
            suggest = "post_installation_script_return"
        elif key == "sshKeyName":
            suggest = "ssh_key_name"
        elif key == "useDistributionKernel":
            suggest = "use_distribution_kernel"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MeInstallationTemplateCustomization. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MeInstallationTemplateCustomization.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MeInstallationTemplateCustomization.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 change_log: Optional[str] = None,
                 custom_hostname: Optional[str] = None,
                 post_installation_script_link: Optional[str] = None,
                 post_installation_script_return: Optional[str] = None,
                 rating: Optional[int] = None,
                 ssh_key_name: Optional[str] = None,
                 use_distribution_kernel: Optional[bool] = None):
        if change_log is not None:
            pulumi.set(__self__, "change_log", change_log)
        if custom_hostname is not None:
            pulumi.set(__self__, "custom_hostname", custom_hostname)
        if post_installation_script_link is not None:
            pulumi.set(__self__, "post_installation_script_link", post_installation_script_link)
        if post_installation_script_return is not None:
            pulumi.set(__self__, "post_installation_script_return", post_installation_script_return)
        if rating is not None:
            pulumi.set(__self__, "rating", rating)
        if ssh_key_name is not None:
            pulumi.set(__self__, "ssh_key_name", ssh_key_name)
        if use_distribution_kernel is not None:
            pulumi.set(__self__, "use_distribution_kernel", use_distribution_kernel)

    @property
    @pulumi.getter(name="changeLog")
    def change_log(self) -> Optional[str]:
        return pulumi.get(self, "change_log")

    @property
    @pulumi.getter(name="customHostname")
    def custom_hostname(self) -> Optional[str]:
        return pulumi.get(self, "custom_hostname")

    @property
    @pulumi.getter(name="postInstallationScriptLink")
    def post_installation_script_link(self) -> Optional[str]:
        return pulumi.get(self, "post_installation_script_link")

    @property
    @pulumi.getter(name="postInstallationScriptReturn")
    def post_installation_script_return(self) -> Optional[str]:
        return pulumi.get(self, "post_installation_script_return")

    @property
    @pulumi.getter
    def rating(self) -> Optional[int]:
        return pulumi.get(self, "rating")

    @property
    @pulumi.getter(name="sshKeyName")
    def ssh_key_name(self) -> Optional[str]:
        return pulumi.get(self, "ssh_key_name")

    @property
    @pulumi.getter(name="useDistributionKernel")
    def use_distribution_kernel(self) -> Optional[bool]:
        return pulumi.get(self, "use_distribution_kernel")


@pulumi.output_type
class PubicCloudPrivateNetworkRegionsStatus(dict):
    def __init__(__self__, *,
                 status: str,
                 region: Optional[str] = None):
        """
        :param str status: the status of the network. should be normally set to 'ACTIVE'.
        """
        pulumi.set(__self__, "status", status)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        the status of the network. should be normally set to 'ACTIVE'.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")


@pulumi.output_type
class PubicCloudPrivateNetworkSubnetIpPool(dict):
    def __init__(__self__, *,
                 dhcp: Optional[bool] = None,
                 end: Optional[str] = None,
                 network: Optional[str] = None,
                 region: Optional[str] = None,
                 start: Optional[str] = None):
        """
        :param bool dhcp: Enable DHCP.
               Changing this forces a new resource to be created. Defaults to false.
               _
        :param str end: Last ip for this region.
               Changing this value recreates the subnet.
        :param str network: Global network in CIDR format.
               Changing this value recreates the subnet
        :param str region: The region in which the network subnet will be created.
               Ex.: "GRA1". Changing this value recreates the resource.
        :param str start: First ip for this region.
               Changing this value recreates the subnet.
        """
        if dhcp is not None:
            pulumi.set(__self__, "dhcp", dhcp)
        if end is not None:
            pulumi.set(__self__, "end", end)
        if network is not None:
            pulumi.set(__self__, "network", network)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if start is not None:
            pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter
    def dhcp(self) -> Optional[bool]:
        """
        Enable DHCP.
        Changing this forces a new resource to be created. Defaults to false.
        _
        """
        return pulumi.get(self, "dhcp")

    @property
    @pulumi.getter
    def end(self) -> Optional[str]:
        """
        Last ip for this region.
        Changing this value recreates the subnet.
        """
        return pulumi.get(self, "end")

    @property
    @pulumi.getter
    def network(self) -> Optional[str]:
        """
        Global network in CIDR format.
        Changing this value recreates the subnet
        """
        return pulumi.get(self, "network")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        """
        The region in which the network subnet will be created.
        Ex.: "GRA1". Changing this value recreates the resource.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def start(self) -> Optional[str]:
        """
        First ip for this region.
        Changing this value recreates the subnet.
        """
        return pulumi.get(self, "start")


@pulumi.output_type
class PublicCloudUserRole(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 permissions: Optional[Sequence[str]] = None):
        """
        :param str description: A description associated with the user.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if permissions is not None:
            pulumi.set(__self__, "permissions", permissions)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        A description associated with the user.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def permissions(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "permissions")


@pulumi.output_type
class GetCloudRegionServiceResult(dict):
    def __init__(__self__, *,
                 name: str,
                 status: str):
        """
        :param str name: The name of the region associated with the public cloud
               project.
        :param str status: the status of the service
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the region associated with the public cloud
        project.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        the status of the service
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetDedicatedServerVniResult(dict):
    def __init__(__self__, *,
                 enabled: bool,
                 mode: str,
                 name: str,
                 nics: Sequence[str],
                 server_name: str,
                 uuid: str,
                 vrack: str):
        """
        :param bool enabled: VirtualNetworkInterface activation state
        :param str mode: VirtualNetworkInterface mode (public,vrack,vrack_aggregation)
        :param str name: User defined VirtualNetworkInterface name
        :param str server_name: Server bound to this VirtualNetworkInterface
        :param str uuid: VirtualNetworkInterface unique id
        :param str vrack: vRack name
        """
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "mode", mode)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "nics", nics)
        pulumi.set(__self__, "server_name", server_name)
        pulumi.set(__self__, "uuid", uuid)
        pulumi.set(__self__, "vrack", vrack)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        VirtualNetworkInterface activation state
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def mode(self) -> str:
        """
        VirtualNetworkInterface mode (public,vrack,vrack_aggregation)
        """
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        User defined VirtualNetworkInterface name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def nics(self) -> Sequence[str]:
        return pulumi.get(self, "nics")

    @property
    @pulumi.getter(name="serverName")
    def server_name(self) -> str:
        """
        Server bound to this VirtualNetworkInterface
        """
        return pulumi.get(self, "server_name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        VirtualNetworkInterface unique id
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def vrack(self) -> str:
        """
        vRack name
        """
        return pulumi.get(self, "vrack")


@pulumi.output_type
class GetIPLoadbalancingOrderableZoneResult(dict):
    def __init__(__self__, *,
                 name: str,
                 plan_code: str):
        """
        :param str name: The zone three letter code
        :param str plan_code: The billing planCode for this zone
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "plan_code", plan_code)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The zone three letter code
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="planCode")
    def plan_code(self) -> str:
        """
        The billing planCode for this zone
        """
        return pulumi.get(self, "plan_code")


@pulumi.output_type
class GetMeInstallationTemplateCustomizationResult(dict):
    def __init__(__self__, *,
                 change_log: str,
                 custom_hostname: str,
                 post_installation_script_link: str,
                 post_installation_script_return: str,
                 rating: int,
                 ssh_key_name: str,
                 use_distribution_kernel: bool):
        pulumi.set(__self__, "change_log", change_log)
        pulumi.set(__self__, "custom_hostname", custom_hostname)
        pulumi.set(__self__, "post_installation_script_link", post_installation_script_link)
        pulumi.set(__self__, "post_installation_script_return", post_installation_script_return)
        pulumi.set(__self__, "rating", rating)
        pulumi.set(__self__, "ssh_key_name", ssh_key_name)
        pulumi.set(__self__, "use_distribution_kernel", use_distribution_kernel)

    @property
    @pulumi.getter(name="changeLog")
    def change_log(self) -> str:
        return pulumi.get(self, "change_log")

    @property
    @pulumi.getter(name="customHostname")
    def custom_hostname(self) -> str:
        return pulumi.get(self, "custom_hostname")

    @property
    @pulumi.getter(name="postInstallationScriptLink")
    def post_installation_script_link(self) -> str:
        return pulumi.get(self, "post_installation_script_link")

    @property
    @pulumi.getter(name="postInstallationScriptReturn")
    def post_installation_script_return(self) -> str:
        return pulumi.get(self, "post_installation_script_return")

    @property
    @pulumi.getter
    def rating(self) -> int:
        return pulumi.get(self, "rating")

    @property
    @pulumi.getter(name="sshKeyName")
    def ssh_key_name(self) -> str:
        return pulumi.get(self, "ssh_key_name")

    @property
    @pulumi.getter(name="useDistributionKernel")
    def use_distribution_kernel(self) -> bool:
        return pulumi.get(self, "use_distribution_kernel")


@pulumi.output_type
class GetMeInstallationTemplatePartitionSchemeResult(dict):
    def __init__(__self__, *,
                 hardware_raids: Sequence['outputs.GetMeInstallationTemplatePartitionSchemeHardwareRaidResult'],
                 name: str,
                 partitions: Sequence['outputs.GetMeInstallationTemplatePartitionSchemePartitionResult'],
                 priority: int):
        pulumi.set(__self__, "hardware_raids", hardware_raids)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "partitions", partitions)
        pulumi.set(__self__, "priority", priority)

    @property
    @pulumi.getter(name="hardwareRaids")
    def hardware_raids(self) -> Sequence['outputs.GetMeInstallationTemplatePartitionSchemeHardwareRaidResult']:
        return pulumi.get(self, "hardware_raids")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def partitions(self) -> Sequence['outputs.GetMeInstallationTemplatePartitionSchemePartitionResult']:
        return pulumi.get(self, "partitions")

    @property
    @pulumi.getter
    def priority(self) -> int:
        return pulumi.get(self, "priority")


@pulumi.output_type
class GetMeInstallationTemplatePartitionSchemeHardwareRaidResult(dict):
    def __init__(__self__, *,
                 disks: Sequence[str],
                 mode: str,
                 name: str,
                 step: int):
        pulumi.set(__self__, "disks", disks)
        pulumi.set(__self__, "mode", mode)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "step", step)

    @property
    @pulumi.getter
    def disks(self) -> Sequence[str]:
        return pulumi.get(self, "disks")

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def step(self) -> int:
        return pulumi.get(self, "step")


@pulumi.output_type
class GetMeInstallationTemplatePartitionSchemePartitionResult(dict):
    def __init__(__self__, *,
                 filesystem: str,
                 mountpoint: str,
                 order: int,
                 raid: str,
                 size: int,
                 type: str,
                 volume_name: str):
        pulumi.set(__self__, "filesystem", filesystem)
        pulumi.set(__self__, "mountpoint", mountpoint)
        pulumi.set(__self__, "order", order)
        pulumi.set(__self__, "raid", raid)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "volume_name", volume_name)

    @property
    @pulumi.getter
    def filesystem(self) -> str:
        return pulumi.get(self, "filesystem")

    @property
    @pulumi.getter
    def mountpoint(self) -> str:
        return pulumi.get(self, "mountpoint")

    @property
    @pulumi.getter
    def order(self) -> int:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def raid(self) -> str:
        return pulumi.get(self, "raid")

    @property
    @pulumi.getter
    def size(self) -> int:
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="volumeName")
    def volume_name(self) -> str:
        return pulumi.get(self, "volume_name")


@pulumi.output_type
class GetPublicCloudRegionServiceResult(dict):
    def __init__(__self__, *,
                 name: str,
                 status: str):
        """
        :param str name: the name of the public cloud service
        :param str status: the status of the service
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        the name of the public cloud service
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        the status of the service
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetVPSDatacenterResult(dict):
    def __init__(__self__, *,
                 longname: str,
                 name: str):
        pulumi.set(__self__, "longname", longname)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def longname(self) -> str:
        return pulumi.get(self, "longname")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetVPSModelResult(dict):
    def __init__(__self__, *,
                 name: str,
                 offer: str,
                 version: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "offer", offer)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def offer(self) -> str:
        return pulumi.get(self, "offer")

    @property
    @pulumi.getter
    def version(self) -> str:
        return pulumi.get(self, "version")


