// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * Manage http route for a loadbalancer service
 *
 * ## Example Usage
 *
 * Route which redirect all url to https.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ovh from "@pulumi/ovh";
 *
 * const httpsredirect = new ovh.IPLoadbalancingHTTPRoute("httpsredirect", {
 *     action: {
 *         status: 302,
 *         target: "https://${host}${path}${arguments}",
 *         type: "redirect",
 *     },
 *     displayName: "Redirect to HTTPS",
 *     serviceName: "loadbalancer-xxxxxxxxxxxxxxxxxx",
 *     weight: 1,
 * });
 * ```
 */
export class IPLoadbalancingHTTPRoute extends pulumi.CustomResource {
    /**
     * Get an existing IPLoadbalancingHTTPRoute resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IPLoadbalancingHTTPRouteState, opts?: pulumi.CustomResourceOptions): IPLoadbalancingHTTPRoute {
        return new IPLoadbalancingHTTPRoute(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ovh:index/iPLoadbalancingHTTPRoute:IPLoadbalancingHTTPRoute';

    /**
     * Returns true if the given object is an instance of IPLoadbalancingHTTPRoute.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IPLoadbalancingHTTPRoute {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IPLoadbalancingHTTPRoute.__pulumiType;
    }

    public readonly action!: pulumi.Output<outputs.IPLoadbalancingHTTPRouteAction>;
    /**
     * Human readable name for your route, this field is for you
     */
    public readonly displayName!: pulumi.Output<string | undefined>;
    /**
     * Route traffic for this frontend
     */
    public readonly frontendId!: pulumi.Output<number>;
    /**
     * The internal name of your IP load balancing
     */
    public readonly serviceName!: pulumi.Output<string>;
    /**
     * Route priority ([0..255]). 0 if null. Highest priority routes are evaluated first. Only the first matching route will trigger an action
     * * `action.status` - HTTP status code for "redirect" and "reject" actions
     * * `action.target` - Farm ID for "farm" action type or URL template for "redirect" action. You may use ${uri}, ${protocol}, ${host}, ${port} and ${path} variables in redirect target
     * * `action.type` - (Required) Action to trigger if all the rules of this route matches
     */
    public readonly weight!: pulumi.Output<number | undefined>;

    /**
     * Create a IPLoadbalancingHTTPRoute resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IPLoadbalancingHTTPRouteArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IPLoadbalancingHTTPRouteArgs | IPLoadbalancingHTTPRouteState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IPLoadbalancingHTTPRouteState | undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["frontendId"] = state ? state.frontendId : undefined;
            resourceInputs["serviceName"] = state ? state.serviceName : undefined;
            resourceInputs["weight"] = state ? state.weight : undefined;
        } else {
            const args = argsOrState as IPLoadbalancingHTTPRouteArgs | undefined;
            if ((!args || args.action === undefined) && !opts.urn) {
                throw new Error("Missing required property 'action'");
            }
            if ((!args || args.serviceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceName'");
            }
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["frontendId"] = args ? args.frontendId : undefined;
            resourceInputs["serviceName"] = args ? args.serviceName : undefined;
            resourceInputs["weight"] = args ? args.weight : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IPLoadbalancingHTTPRoute.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering IPLoadbalancingHTTPRoute resources.
 */
export interface IPLoadbalancingHTTPRouteState {
    action?: pulumi.Input<inputs.IPLoadbalancingHTTPRouteAction>;
    /**
     * Human readable name for your route, this field is for you
     */
    displayName?: pulumi.Input<string>;
    /**
     * Route traffic for this frontend
     */
    frontendId?: pulumi.Input<number>;
    /**
     * The internal name of your IP load balancing
     */
    serviceName?: pulumi.Input<string>;
    /**
     * Route priority ([0..255]). 0 if null. Highest priority routes are evaluated first. Only the first matching route will trigger an action
     * * `action.status` - HTTP status code for "redirect" and "reject" actions
     * * `action.target` - Farm ID for "farm" action type or URL template for "redirect" action. You may use ${uri}, ${protocol}, ${host}, ${port} and ${path} variables in redirect target
     * * `action.type` - (Required) Action to trigger if all the rules of this route matches
     */
    weight?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a IPLoadbalancingHTTPRoute resource.
 */
export interface IPLoadbalancingHTTPRouteArgs {
    action: pulumi.Input<inputs.IPLoadbalancingHTTPRouteAction>;
    /**
     * Human readable name for your route, this field is for you
     */
    displayName?: pulumi.Input<string>;
    /**
     * Route traffic for this frontend
     */
    frontendId?: pulumi.Input<number>;
    /**
     * The internal name of your IP load balancing
     */
    serviceName: pulumi.Input<string>;
    /**
     * Route priority ([0..255]). 0 if null. Highest priority routes are evaluated first. Only the first matching route will trigger an action
     * * `action.status` - HTTP status code for "redirect" and "reject" actions
     * * `action.target` - Farm ID for "farm" action type or URL template for "redirect" action. You may use ${uri}, ${protocol}, ${host}, ${port} and ${path} variables in redirect target
     * * `action.type` - (Required) Action to trigger if all the rules of this route matches
     */
    weight?: pulumi.Input<number>;
}
