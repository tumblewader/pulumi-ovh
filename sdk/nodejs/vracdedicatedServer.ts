// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Attach a dedicated server to a VRack.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ovh from "@pulumi/ovh";
 *
 * const vds = new ovh.VRACDedicatedServer("vds", {
 *     serverId: "67890",
 *     vrackId: "12345",
 * });
 * ```
 */
export class VRACDedicatedServer extends pulumi.CustomResource {
    /**
     * Get an existing VRACDedicatedServer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VRACDedicatedServerState, opts?: pulumi.CustomResourceOptions): VRACDedicatedServer {
        return new VRACDedicatedServer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ovh:index/vRACDedicatedServer:VRACDedicatedServer';

    /**
     * Returns true if the given object is an instance of VRACDedicatedServer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VRACDedicatedServer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VRACDedicatedServer.__pulumiType;
    }

    /**
     * The id of the dedicated server.
     */
    public readonly serverId!: pulumi.Output<string>;
    /**
     * The id of the vrack.
     */
    public readonly vrackId!: pulumi.Output<string>;

    /**
     * Create a VRACDedicatedServer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VRACDedicatedServerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VRACDedicatedServerArgs | VRACDedicatedServerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VRACDedicatedServerState | undefined;
            resourceInputs["serverId"] = state ? state.serverId : undefined;
            resourceInputs["vrackId"] = state ? state.vrackId : undefined;
        } else {
            const args = argsOrState as VRACDedicatedServerArgs | undefined;
            if ((!args || args.serverId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serverId'");
            }
            if ((!args || args.vrackId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vrackId'");
            }
            resourceInputs["serverId"] = args ? args.serverId : undefined;
            resourceInputs["vrackId"] = args ? args.vrackId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VRACDedicatedServer.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering VRACDedicatedServer resources.
 */
export interface VRACDedicatedServerState {
    /**
     * The id of the dedicated server.
     */
    serverId?: pulumi.Input<string>;
    /**
     * The id of the vrack.
     */
    vrackId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VRACDedicatedServer resource.
 */
export interface VRACDedicatedServerArgs {
    /**
     * The id of the dedicated server.
     */
    serverId: pulumi.Input<string>;
    /**
     * The id of the vrack.
     */
    vrackId: pulumi.Input<string>;
}
