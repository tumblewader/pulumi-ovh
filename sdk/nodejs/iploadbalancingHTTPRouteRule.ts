// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Manage rules for HTTP route.
 *
 * ## Example Usage
 *
 * Route which redirect all url to https for example.com (Vhost).
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ovh from "@pulumi/ovh";
 *
 * const httpsredirect = new ovh.IPLoadbalancingHTTPRoute("httpsredirect", {
 *     action: {
 *         status: 302,
 *         target: "https://${host}${path}${arguments}",
 *         type: "redirect",
 *     },
 *     displayName: "Redirect to HTTPS",
 *     frontendId: 11111,
 *     serviceName: "loadbalancer-xxxxxxxxxxxxxxxxxx",
 *     weight: 1,
 * });
 * const examplerule = new ovh.IPLoadbalancingHTTPRouteRule("examplerule", {
 *     displayName: "Match example.com host",
 *     field: "host",
 *     match: "is",
 *     negate: false,
 *     pattern: "example.com",
 *     routeId: httpsredirect.id,
 *     serviceName: "loadbalancer-xxxxxxxxxxxxxxxxxx",
 * });
 * ```
 *
 * Rule which match a specific header (same effect as the host match above).
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ovh from "@pulumi/ovh";
 *
 * const examplerule = new ovh.IPLoadbalancingHTTPRouteRule("examplerule", {
 *     displayName: "Match example.com Host header",
 *     field: "headers",
 *     match: "is",
 *     negate: false,
 *     pattern: "example.com",
 *     routeId: ovh_iploadbalancing_http_route_httpsredirect.id,
 *     serviceName: "loadbalancer-xxxxxxxxxxxxxxxxxx",
 *     subField: "Host",
 * });
 * ```
 */
export class IPLoadbalancingHTTPRouteRule extends pulumi.CustomResource {
    /**
     * Get an existing IPLoadbalancingHTTPRouteRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IPLoadbalancingHTTPRouteRuleState, opts?: pulumi.CustomResourceOptions): IPLoadbalancingHTTPRouteRule {
        return new IPLoadbalancingHTTPRouteRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ovh:index/iPLoadbalancingHTTPRouteRule:IPLoadbalancingHTTPRouteRule';

    /**
     * Returns true if the given object is an instance of IPLoadbalancingHTTPRouteRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IPLoadbalancingHTTPRouteRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IPLoadbalancingHTTPRouteRule.__pulumiType;
    }

    /**
     * Human readable name for your rule, this field is for you
     */
    public readonly displayName!: pulumi.Output<string | undefined>;
    /**
     * Name of the field to match like "protocol" or "host". See "/ipLoadbalancing/{serviceName}/availableRouteRules" for a list of available rules
     */
    public readonly field!: pulumi.Output<string>;
    /**
     * Matching operator. Not all operators are available for all fields. See "/ipLoadbalancing/{serviceName}/availableRouteRules"
     */
    public readonly match!: pulumi.Output<string>;
    /**
     * Invert the matching operator effect
     */
    public readonly negate!: pulumi.Output<boolean | undefined>;
    /**
     * Value to match against this match. Interpretation if this field depends on the match and field
     */
    public readonly pattern!: pulumi.Output<string | undefined>;
    /**
     * The route to apply this rule
     */
    public readonly routeId!: pulumi.Output<string>;
    /**
     * The internal name of your IP load balancing
     */
    public readonly serviceName!: pulumi.Output<string>;
    /**
     * Name of sub-field, if applicable. This may be a Cookie or Header name for instance
     */
    public readonly subField!: pulumi.Output<string | undefined>;

    /**
     * Create a IPLoadbalancingHTTPRouteRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IPLoadbalancingHTTPRouteRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IPLoadbalancingHTTPRouteRuleArgs | IPLoadbalancingHTTPRouteRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IPLoadbalancingHTTPRouteRuleState | undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["field"] = state ? state.field : undefined;
            resourceInputs["match"] = state ? state.match : undefined;
            resourceInputs["negate"] = state ? state.negate : undefined;
            resourceInputs["pattern"] = state ? state.pattern : undefined;
            resourceInputs["routeId"] = state ? state.routeId : undefined;
            resourceInputs["serviceName"] = state ? state.serviceName : undefined;
            resourceInputs["subField"] = state ? state.subField : undefined;
        } else {
            const args = argsOrState as IPLoadbalancingHTTPRouteRuleArgs | undefined;
            if ((!args || args.field === undefined) && !opts.urn) {
                throw new Error("Missing required property 'field'");
            }
            if ((!args || args.match === undefined) && !opts.urn) {
                throw new Error("Missing required property 'match'");
            }
            if ((!args || args.routeId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'routeId'");
            }
            if ((!args || args.serviceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceName'");
            }
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["field"] = args ? args.field : undefined;
            resourceInputs["match"] = args ? args.match : undefined;
            resourceInputs["negate"] = args ? args.negate : undefined;
            resourceInputs["pattern"] = args ? args.pattern : undefined;
            resourceInputs["routeId"] = args ? args.routeId : undefined;
            resourceInputs["serviceName"] = args ? args.serviceName : undefined;
            resourceInputs["subField"] = args ? args.subField : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IPLoadbalancingHTTPRouteRule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering IPLoadbalancingHTTPRouteRule resources.
 */
export interface IPLoadbalancingHTTPRouteRuleState {
    /**
     * Human readable name for your rule, this field is for you
     */
    displayName?: pulumi.Input<string>;
    /**
     * Name of the field to match like "protocol" or "host". See "/ipLoadbalancing/{serviceName}/availableRouteRules" for a list of available rules
     */
    field?: pulumi.Input<string>;
    /**
     * Matching operator. Not all operators are available for all fields. See "/ipLoadbalancing/{serviceName}/availableRouteRules"
     */
    match?: pulumi.Input<string>;
    /**
     * Invert the matching operator effect
     */
    negate?: pulumi.Input<boolean>;
    /**
     * Value to match against this match. Interpretation if this field depends on the match and field
     */
    pattern?: pulumi.Input<string>;
    /**
     * The route to apply this rule
     */
    routeId?: pulumi.Input<string>;
    /**
     * The internal name of your IP load balancing
     */
    serviceName?: pulumi.Input<string>;
    /**
     * Name of sub-field, if applicable. This may be a Cookie or Header name for instance
     */
    subField?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a IPLoadbalancingHTTPRouteRule resource.
 */
export interface IPLoadbalancingHTTPRouteRuleArgs {
    /**
     * Human readable name for your rule, this field is for you
     */
    displayName?: pulumi.Input<string>;
    /**
     * Name of the field to match like "protocol" or "host". See "/ipLoadbalancing/{serviceName}/availableRouteRules" for a list of available rules
     */
    field: pulumi.Input<string>;
    /**
     * Matching operator. Not all operators are available for all fields. See "/ipLoadbalancing/{serviceName}/availableRouteRules"
     */
    match: pulumi.Input<string>;
    /**
     * Invert the matching operator effect
     */
    negate?: pulumi.Input<boolean>;
    /**
     * Value to match against this match. Interpretation if this field depends on the match and field
     */
    pattern?: pulumi.Input<string>;
    /**
     * The route to apply this rule
     */
    routeId: pulumi.Input<string>;
    /**
     * The internal name of your IP load balancing
     */
    serviceName: pulumi.Input<string>;
    /**
     * Name of sub-field, if applicable. This may be a Cookie or Header name for instance
     */
    subField?: pulumi.Input<string>;
}
